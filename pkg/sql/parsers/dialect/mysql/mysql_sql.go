// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"go/constant"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const CONNECT = 57367
const MANAGE = 57368
const GRANTS = 57369
const OWNERSHIP = 57370
const REFERENCE = 57371
const LOWER_THAN_SET = 57372
const SET = 57373
const ALL = 57374
const DISTINCT = 57375
const DISTINCTROW = 57376
const AS = 57377
const EXISTS = 57378
const ASC = 57379
const DESC = 57380
const INTO = 57381
const DUPLICATE = 57382
const DEFAULT = 57383
const LOCK = 57384
const KEYS = 57385
const NULLS = 57386
const FIRST = 57387
const LAST = 57388
const AFTER = 57389
const INSTANT = 57390
const INPLACE = 57391
const COPY = 57392
const DISABLE = 57393
const ENABLE = 57394
const UNDEFINED = 57395
const MERGE = 57396
const TEMPTABLE = 57397
const DEFINER = 57398
const INVOKER = 57399
const SQL = 57400
const SECURITY = 57401
const CASCADED = 57402
const VALUES = 57403
const NEXT = 57404
const VALUE = 57405
const SHARE = 57406
const MODE = 57407
const SQL_NO_CACHE = 57408
const SQL_CACHE = 57409
const JOIN = 57410
const STRAIGHT_JOIN = 57411
const LEFT = 57412
const RIGHT = 57413
const INNER = 57414
const OUTER = 57415
const CROSS = 57416
const NATURAL = 57417
const USE = 57418
const FORCE = 57419
const LOWER_THAN_ON = 57420
const ON = 57421
const USING = 57422
const SUBQUERY_AS_EXPR = 57423
const LOWER_THAN_STRING = 57424
const ID = 57425
const AT_ID = 57426
const AT_AT_ID = 57427
const STRING = 57428
const VALUE_ARG = 57429
const LIST_ARG = 57430
const COMMENT = 57431
const COMMENT_KEYWORD = 57432
const QUOTE_ID = 57433
const STAGE = 57434
const CREDENTIALS = 57435
const STAGES = 57436
const INTEGRAL = 57437
const HEX = 57438
const BIT_LITERAL = 57439
const FLOAT = 57440
const HEXNUM = 57441
const NULL = 57442
const TRUE = 57443
const FALSE = 57444
const LOWER_THAN_CHARSET = 57445
const CHARSET = 57446
const UNIQUE = 57447
const KEY = 57448
const OR = 57449
const PIPE_CONCAT = 57450
const XOR = 57451
const AND = 57452
const NOT = 57453
const BETWEEN = 57454
const CASE = 57455
const WHEN = 57456
const THEN = 57457
const ELSE = 57458
const END = 57459
const ELSEIF = 57460
const LOWER_THAN_EQ = 57461
const LE = 57462
const GE = 57463
const NE = 57464
const NULL_SAFE_EQUAL = 57465
const IS = 57466
const LIKE = 57467
const REGEXP = 57468
const IN = 57469
const ASSIGNMENT = 57470
const ILIKE = 57471
const SHIFT_LEFT = 57472
const SHIFT_RIGHT = 57473
const DIV = 57474
const MOD = 57475
const UNARY = 57476
const COLLATE = 57477
const BINARY = 57478
const UNDERSCORE_BINARY = 57479
const INTERVAL = 57480
const OUT = 57481
const INOUT = 57482
const BEGIN = 57483
const START = 57484
const TRANSACTION = 57485
const COMMIT = 57486
const ROLLBACK = 57487
const WORK = 57488
const CONSISTENT = 57489
const SNAPSHOT = 57490
const CHAIN = 57491
const NO = 57492
const RELEASE = 57493
const PRIORITY = 57494
const QUICK = 57495
const BIT = 57496
const TINYINT = 57497
const SMALLINT = 57498
const MEDIUMINT = 57499
const INT = 57500
const INTEGER = 57501
const BIGINT = 57502
const INTNUM = 57503
const REAL = 57504
const DOUBLE = 57505
const FLOAT_TYPE = 57506
const DECIMAL = 57507
const NUMERIC = 57508
const DECIMAL_VALUE = 57509
const TIME = 57510
const TIMESTAMP = 57511
const DATETIME = 57512
const YEAR = 57513
const CHAR = 57514
const VARCHAR = 57515
const BOOL = 57516
const CHARACTER = 57517
const VARBINARY = 57518
const NCHAR = 57519
const TEXT = 57520
const TINYTEXT = 57521
const MEDIUMTEXT = 57522
const LONGTEXT = 57523
const BLOB = 57524
const TINYBLOB = 57525
const MEDIUMBLOB = 57526
const LONGBLOB = 57527
const JSON = 57528
const ENUM = 57529
const UUID = 57530
const VECF32 = 57531
const VECF64 = 57532
const GEOMETRY = 57533
const POINT = 57534
const LINESTRING = 57535
const POLYGON = 57536
const GEOMETRYCOLLECTION = 57537
const MULTIPOINT = 57538
const MULTILINESTRING = 57539
const MULTIPOLYGON = 57540
const INT1 = 57541
const INT2 = 57542
const INT3 = 57543
const INT4 = 57544
const INT8 = 57545
const S3OPTION = 57546
const STAGEOPTION = 57547
const SQL_SMALL_RESULT = 57548
const SQL_BIG_RESULT = 57549
const SQL_BUFFER_RESULT = 57550
const LOW_PRIORITY = 57551
const HIGH_PRIORITY = 57552
const DELAYED = 57553
const CREATE = 57554
const ALTER = 57555
const DROP = 57556
const RENAME = 57557
const ANALYZE = 57558
const ADD = 57559
const RETURNS = 57560
const SCHEMA = 57561
const TABLE = 57562
const SEQUENCE = 57563
const INDEX = 57564
const VIEW = 57565
const TO = 57566
const IGNORE = 57567
const IF = 57568
const PRIMARY = 57569
const COLUMN = 57570
const CONSTRAINT = 57571
const SPATIAL = 57572
const FULLTEXT = 57573
const FOREIGN = 57574
const KEY_BLOCK_SIZE = 57575
const SHOW = 57576
const DESCRIBE = 57577
const EXPLAIN = 57578
const DATE = 57579
const ESCAPE = 57580
const REPAIR = 57581
const OPTIMIZE = 57582
const TRUNCATE = 57583
const MAXVALUE = 57584
const PARTITION = 57585
const REORGANIZE = 57586
const LESS = 57587
const THAN = 57588
const PROCEDURE = 57589
const TRIGGER = 57590
const STATUS = 57591
const VARIABLES = 57592
const ROLE = 57593
const PROXY = 57594
const AVG_ROW_LENGTH = 57595
const STORAGE = 57596
const DISK = 57597
const MEMORY = 57598
const CHECKSUM = 57599
const COMPRESSION = 57600
const DATA = 57601
const DIRECTORY = 57602
const DELAY_KEY_WRITE = 57603
const ENCRYPTION = 57604
const ENGINE = 57605
const MAX_ROWS = 57606
const MIN_ROWS = 57607
const PACK_KEYS = 57608
const ROW_FORMAT = 57609
const STATS_AUTO_RECALC = 57610
const STATS_PERSISTENT = 57611
const STATS_SAMPLE_PAGES = 57612
const DYNAMIC = 57613
const COMPRESSED = 57614
const REDUNDANT = 57615
const COMPACT = 57616
const FIXED = 57617
const COLUMN_FORMAT = 57618
const AUTO_RANDOM = 57619
const ENGINE_ATTRIBUTE = 57620
const SECONDARY_ENGINE_ATTRIBUTE = 57621
const INSERT_METHOD = 57622
const RESTRICT = 57623
const CASCADE = 57624
const ACTION = 57625
const PARTIAL = 57626
const SIMPLE = 57627
const CHECK = 57628
const ENFORCED = 57629
const RANGE = 57630
const LIST = 57631
const ALGORITHM = 57632
const LINEAR = 57633
const PARTITIONS = 57634
const SUBPARTITION = 57635
const SUBPARTITIONS = 57636
const CLUSTER = 57637
const TYPE = 57638
const ANY = 57639
const SOME = 57640
const EXTERNAL = 57641
const LOCALFILE = 57642
const URL = 57643
const PREPARE = 57644
const DEALLOCATE = 57645
const RESET = 57646
const EXTENSION = 57647
const INCREMENT = 57648
const CYCLE = 57649
const MINVALUE = 57650
const PUBLICATION = 57651
const SUBSCRIPTIONS = 57652
const PUBLICATIONS = 57653
const PROPERTIES = 57654
const PARSER = 57655
const VISIBLE = 57656
const INVISIBLE = 57657
const BTREE = 57658
const HASH = 57659
const RTREE = 57660
const BSI = 57661
const IVFFLAT = 57662
const ZONEMAP = 57663
const LEADING = 57664
const BOTH = 57665
const TRAILING = 57666
const UNKNOWN = 57667
const LISTS = 57668
const OP_TYPE = 57669
const REINDEX = 57670
const EXPIRE = 57671
const ACCOUNT = 57672
const ACCOUNTS = 57673
const UNLOCK = 57674
const DAY = 57675
const NEVER = 57676
const PUMP = 57677
const MYSQL_COMPATIBILITY_MODE = 57678
const MODIFY = 57679
const CHANGE = 57680
const SECOND = 57681
const ASCII = 57682
const COALESCE = 57683
const COLLATION = 57684
const HOUR = 57685
const MICROSECOND = 57686
const MINUTE = 57687
const MONTH = 57688
const QUARTER = 57689
const REPEAT = 57690
const REVERSE = 57691
const ROW_COUNT = 57692
const WEEK = 57693
const REVOKE = 57694
const FUNCTION = 57695
const PRIVILEGES = 57696
const TABLESPACE = 57697
const EXECUTE = 57698
const SUPER = 57699
const GRANT = 57700
const OPTION = 57701
const REFERENCES = 57702
const REPLICATION = 57703
const SLAVE = 57704
const CLIENT = 57705
const USAGE = 57706
const RELOAD = 57707
const FILE = 57708
const TEMPORARY = 57709
const ROUTINE = 57710
const EVENT = 57711
const SHUTDOWN = 57712
const NULLX = 57713
const AUTO_INCREMENT = 57714
const APPROXNUM = 57715
const SIGNED = 57716
const UNSIGNED = 57717
const ZEROFILL = 57718
const ENGINES = 57719
const LOW_CARDINALITY = 57720
const AUTOEXTEND_SIZE = 57721
const ADMIN_NAME = 57722
const RANDOM = 57723
const SUSPEND = 57724
const ATTRIBUTE = 57725
const HISTORY = 57726
const REUSE = 57727
const CURRENT = 57728
const OPTIONAL = 57729
const FAILED_LOGIN_ATTEMPTS = 57730
const PASSWORD_LOCK_TIME = 57731
const UNBOUNDED = 57732
const SECONDARY = 57733
const RESTRICTED = 57734
const USER = 57735
const IDENTIFIED = 57736
const CIPHER = 57737
const ISSUER = 57738
const X509 = 57739
const SUBJECT = 57740
const SAN = 57741
const REQUIRE = 57742
const SSL = 57743
const NONE = 57744
const PASSWORD = 57745
const SHARED = 57746
const EXCLUSIVE = 57747
const MAX_QUERIES_PER_HOUR = 57748
const MAX_UPDATES_PER_HOUR = 57749
const MAX_CONNECTIONS_PER_HOUR = 57750
const MAX_USER_CONNECTIONS = 57751
const FORMAT = 57752
const VERBOSE = 57753
const CONNECTION = 57754
const TRIGGERS = 57755
const PROFILES = 57756
const LOAD = 57757
const INLINE = 57758
const INFILE = 57759
const TERMINATED = 57760
const OPTIONALLY = 57761
const ENCLOSED = 57762
const ESCAPED = 57763
const STARTING = 57764
const LINES = 57765
const ROWS = 57766
const IMPORT = 57767
const DISCARD = 57768
const JSONTYPE = 57769
const MODUMP = 57770
const OVER = 57771
const PRECEDING = 57772
const FOLLOWING = 57773
const GROUPS = 57774
const DATABASES = 57775
const TABLES = 57776
const SEQUENCES = 57777
const EXTENDED = 57778
const FULL = 57779
const PROCESSLIST = 57780
const FIELDS = 57781
const COLUMNS = 57782
const OPEN = 57783
const ERRORS = 57784
const WARNINGS = 57785
const INDEXES = 57786
const SCHEMAS = 57787
const NODE = 57788
const LOCKS = 57789
const ROLES = 57790
const TABLE_NUMBER = 57791
const COLUMN_NUMBER = 57792
const TABLE_VALUES = 57793
const TABLE_SIZE = 57794
const NAMES = 57795
const GLOBAL = 57796
const PERSIST = 57797
const SESSION = 57798
const ISOLATION = 57799
const LEVEL = 57800
const READ = 57801
const WRITE = 57802
const ONLY = 57803
const REPEATABLE = 57804
const COMMITTED = 57805
const UNCOMMITTED = 57806
const SERIALIZABLE = 57807
const LOCAL = 57808
const EVENTS = 57809
const PLUGINS = 57810
const CURRENT_TIMESTAMP = 57811
const DATABASE = 57812
const CURRENT_TIME = 57813
const LOCALTIME = 57814
const LOCALTIMESTAMP = 57815
const UTC_DATE = 57816
const UTC_TIME = 57817
const UTC_TIMESTAMP = 57818
const REPLACE = 57819
const CONVERT = 57820
const SEPARATOR = 57821
const TIMESTAMPDIFF = 57822
const CURRENT_DATE = 57823
const CURRENT_USER = 57824
const CURRENT_ROLE = 57825
const SECOND_MICROSECOND = 57826
const MINUTE_MICROSECOND = 57827
const MINUTE_SECOND = 57828
const HOUR_MICROSECOND = 57829
const HOUR_SECOND = 57830
const HOUR_MINUTE = 57831
const DAY_MICROSECOND = 57832
const DAY_SECOND = 57833
const DAY_MINUTE = 57834
const DAY_HOUR = 57835
const YEAR_MONTH = 57836
const SQL_TSI_HOUR = 57837
const SQL_TSI_DAY = 57838
const SQL_TSI_WEEK = 57839
const SQL_TSI_MONTH = 57840
const SQL_TSI_QUARTER = 57841
const SQL_TSI_YEAR = 57842
const SQL_TSI_SECOND = 57843
const SQL_TSI_MINUTE = 57844
const RECURSIVE = 57845
const CONFIG = 57846
const DRAINER = 57847
const SOURCE = 57848
const STREAM = 57849
const HEADERS = 57850
const CONNECTOR = 57851
const CONNECTORS = 57852
const DAEMON = 57853
const PAUSE = 57854
const CANCEL = 57855
const TASK = 57856
const RESUME = 57857
const MATCH = 57858
const AGAINST = 57859
const BOOLEAN = 57860
const LANGUAGE = 57861
const WITH = 57862
const QUERY = 57863
const EXPANSION = 57864
const WITHOUT = 57865
const VALIDATION = 57866
const ADDDATE = 57867
const BIT_AND = 57868
const BIT_OR = 57869
const BIT_XOR = 57870
const CAST = 57871
const COUNT = 57872
const APPROX_COUNT = 57873
const APPROX_COUNT_DISTINCT = 57874
const SERIAL_EXTRACT = 57875
const APPROX_PERCENTILE = 57876
const CURDATE = 57877
const CURTIME = 57878
const DATE_ADD = 57879
const DATE_SUB = 57880
const EXTRACT = 57881
const GROUP_CONCAT = 57882
const MAX = 57883
const MID = 57884
const MIN = 57885
const NOW = 57886
const POSITION = 57887
const SESSION_USER = 57888
const STD = 57889
const STDDEV = 57890
const MEDIAN = 57891
const CLUSTER_CENTERS = 57892
const KMEANS = 57893
const STDDEV_POP = 57894
const STDDEV_SAMP = 57895
const SUBDATE = 57896
const SUBSTR = 57897
const SUBSTRING = 57898
const SUM = 57899
const SYSDATE = 57900
const SYSTEM_USER = 57901
const TRANSLATE = 57902
const TRIM = 57903
const VARIANCE = 57904
const VAR_POP = 57905
const VAR_SAMP = 57906
const AVG = 57907
const RANK = 57908
const ROW_NUMBER = 57909
const DENSE_RANK = 57910
const BIT_CAST = 57911
const NEXTVAL = 57912
const SETVAL = 57913
const CURRVAL = 57914
const LASTVAL = 57915
const ARROW = 57916
const ROW = 57917
const OUTFILE = 57918
const HEADER = 57919
const MAX_FILE_SIZE = 57920
const FORCE_QUOTE = 57921
const PARALLEL = 57922
const UNUSED = 57923
const BINDINGS = 57924
const DO = 57925
const DECLARE = 57926
const LOOP = 57927
const WHILE = 57928
const LEAVE = 57929
const ITERATE = 57930
const UNTIL = 57931
const CALL = 57932
const PREV = 57933
const SLIDING = 57934
const FILL = 57935
const SPBEGIN = 57936
const BACKEND = 57937
const SERVERS = 57938
const HANDLER = 57939
const PERCENT = 57940
const SAMPLE = 57941
const KILL = 57942
const BACKUP = 57943
const FILESYSTEM = 57944
const QUERY_RESULT = 57945

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"INTEGRAL",
	"HEX",
	"BIT_LITERAL",
	"FLOAT",
	"HEXNUM",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:11042

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 117,
	11, 701,
	22, 701,
	-2, 694,
	-1, 137,
	237, 1083,
	239, 991,
	-2, 1037,
	-1, 161,
	43, 530,
	239, 530,
	266, 537,
	267, 537,
	461, 530,
	-2, 563,
	-1, 202,
	624, 1824,
	-2, 446,
	-1, 497,
	624, 1940,
	-2, 341,
	-1, 555,
	624, 1999,
	-2, 339,
	-1, 556,
	624, 2000,
	-2, 340,
	-1, 557,
	624, 2001,
	-2, 342,
	-1, 682,
	318, 133,
	433, 133,
	434, 133,
	-2, 1729,
	-1, 747,
	82, 1516,
	-2, 1879,
	-1, 748,
	82, 1534,
	-2, 1850,
	-1, 752,
	82, 1535,
	-2, 1878,
	-1, 780,
	82, 1446,
	-2, 2071,
	-1, 781,
	82, 1447,
	-2, 2070,
	-1, 782,
	82, 1448,
	-2, 2060,
	-1, 783,
	82, 2032,
	-2, 2053,
	-1, 784,
	82, 2033,
	-2, 2054,
	-1, 785,
	82, 2034,
	-2, 2062,
	-1, 786,
	82, 2035,
	-2, 2042,
	-1, 787,
	82, 2036,
	-2, 2051,
	-1, 788,
	82, 2037,
	-2, 2063,
	-1, 789,
	82, 2038,
	-2, 2064,
	-1, 790,
	82, 2039,
	-2, 2069,
	-1, 791,
	82, 2040,
	-2, 2074,
	-1, 792,
	82, 2041,
	-2, 2075,
	-1, 793,
	82, 1512,
	-2, 1914,
	-1, 794,
	82, 1513,
	-2, 1713,
	-1, 795,
	82, 1514,
	-2, 1923,
	-1, 796,
	82, 1515,
	-2, 1722,
	-1, 798,
	82, 1518,
	-2, 1730,
	-1, 799,
	82, 1519,
	-2, 1947,
	-1, 801,
	82, 1522,
	-2, 1749,
	-1, 803,
	82, 1524,
	-2, 1959,
	-1, 804,
	82, 1525,
	-2, 1958,
	-1, 805,
	82, 1526,
	-2, 1793,
	-1, 806,
	82, 1527,
	-2, 1874,
	-1, 809,
	82, 1530,
	-2, 1970,
	-1, 811,
	82, 1532,
	-2, 1973,
	-1, 812,
	82, 1533,
	-2, 1975,
	-1, 813,
	82, 1536,
	-2, 1983,
	-1, 814,
	82, 1537,
	-2, 1859,
	-1, 815,
	82, 1538,
	-2, 1904,
	-1, 816,
	82, 1539,
	-2, 1869,
	-1, 817,
	82, 1540,
	-2, 1894,
	-1, 828,
	82, 1424,
	-2, 2065,
	-1, 829,
	82, 1425,
	-2, 2066,
	-1, 830,
	82, 1426,
	-2, 2067,
	-1, 915,
	456, 563,
	457, 563,
	-2, 531,
	-1, 961,
	123, 1713,
	134, 1713,
	154, 1713,
	-2, 1687,
	-1, 1070,
	22, 728,
	-2, 677,
	-1, 1171,
	11, 701,
	22, 701,
	-2, 1310,
	-1, 1247,
	22, 728,
	-2, 677,
	-1, 1558,
	82, 1587,
	-2, 1876,
	-1, 1559,
	82, 1588,
	-2, 1877,
	-1, 1702,
	83, 877,
	-2, 883,
	-1, 2112,
	106, 1029,
	150, 1029,
	189, 1029,
	192, 1029,
	279, 1029,
	-2, 1022,
	-1, 2258,
	11, 701,
	22, 701,
	-2, 821,
	-1, 2290,
	83, 1673,
	155, 1673,
	-2, 1861,
	-1, 2291,
	83, 1673,
	155, 1673,
	-2, 1860,
	-1, 2292,
	83, 1649,
	155, 1649,
	-2, 1847,
	-1, 2293,
	83, 1650,
	155, 1650,
	-2, 1852,
	-1, 2294,
	83, 1651,
	155, 1651,
	-2, 1781,
	-1, 2295,
	83, 1652,
	155, 1652,
	-2, 1775,
	-1, 2296,
	83, 1653,
	155, 1653,
	-2, 1703,
	-1, 2297,
	83, 1654,
	155, 1654,
	-2, 1849,
	-1, 2298,
	83, 1655,
	155, 1655,
	-2, 1779,
	-1, 2299,
	83, 1656,
	155, 1656,
	-2, 1774,
	-1, 2300,
	83, 1657,
	155, 1657,
	-2, 1763,
	-1, 2301,
	83, 1673,
	155, 1673,
	-2, 1764,
	-1, 2302,
	83, 1673,
	155, 1673,
	-2, 1765,
	-1, 2304,
	83, 1662,
	155, 1662,
	-2, 1894,
	-1, 2305,
	83, 1640,
	155, 1640,
	-2, 1879,
	-1, 2306,
	83, 1671,
	155, 1671,
	-2, 1850,
	-1, 2307,
	83, 1671,
	155, 1671,
	-2, 1878,
	-1, 2308,
	83, 1671,
	155, 1671,
	-2, 1731,
	-1, 2309,
	83, 1669,
	155, 1669,
	-2, 1869,
	-1, 2310,
	83, 1666,
	155, 1666,
	-2, 1754,
	-1, 2311,
	82, 1621,
	83, 1621,
	155, 1621,
	391, 1621,
	392, 1621,
	393, 1621,
	-2, 1702,
	-1, 2312,
	82, 1622,
	83, 1622,
	155, 1622,
	391, 1622,
	392, 1622,
	393, 1622,
	-2, 1704,
	-1, 2313,
	82, 1623,
	83, 1623,
	155, 1623,
	391, 1623,
	392, 1623,
	393, 1623,
	-2, 1920,
	-1, 2314,
	82, 1625,
	83, 1625,
	155, 1625,
	391, 1625,
	392, 1625,
	393, 1625,
	-2, 1851,
	-1, 2315,
	82, 1627,
	83, 1627,
	155, 1627,
	391, 1627,
	392, 1627,
	393, 1627,
	-2, 1833,
	-1, 2316,
	82, 1629,
	83, 1629,
	155, 1629,
	391, 1629,
	392, 1629,
	393, 1629,
	-2, 1780,
	-1, 2317,
	82, 1631,
	83, 1631,
	155, 1631,
	391, 1631,
	392, 1631,
	393, 1631,
	-2, 1759,
	-1, 2318,
	82, 1632,
	83, 1632,
	155, 1632,
	391, 1632,
	392, 1632,
	393, 1632,
	-2, 1760,
	-1, 2319,
	82, 1634,
	83, 1634,
	155, 1634,
	391, 1634,
	392, 1634,
	393, 1634,
	-2, 1701,
	-1, 2320,
	83, 1676,
	155, 1676,
	391, 1676,
	392, 1676,
	393, 1676,
	-2, 1736,
	-1, 2321,
	83, 1676,
	155, 1676,
	391, 1676,
	392, 1676,
	393, 1676,
	-2, 1750,
	-1, 2322,
	83, 1679,
	155, 1679,
	391, 1679,
	392, 1679,
	393, 1679,
	-2, 1732,
	-1, 2323,
	83, 1679,
	155, 1679,
	391, 1679,
	392, 1679,
	393, 1679,
	-2, 1796,
	-1, 2324,
	83, 1676,
	155, 1676,
	391, 1676,
	392, 1676,
	393, 1676,
	-2, 1817,
	-1, 2511,
	106, 1029,
	150, 1029,
	189, 1029,
	192, 1029,
	279, 1029,
	-2, 1023,
	-1, 2525,
	80, 622,
	155, 622,
	-2, 1196,
	-1, 2907,
	192, 1029,
	303, 1278,
	-2, 1250,
	-1, 3061,
	106, 1029,
	150, 1029,
	189, 1029,
	192, 1029,
	-2, 1139,
	-1, 3063,
	106, 1029,
	150, 1029,
	189, 1029,
	192, 1029,
	-2, 1139,
	-1, 3075,
	80, 622,
	155, 622,
	-2, 1197,
	-1, 3096,
	192, 1029,
	303, 1278,
	-2, 1251,
	-1, 3230,
	106, 1029,
	150, 1029,
	189, 1029,
	192, 1029,
	-2, 1140,
	-1, 3256,
	83, 1101,
	155, 1101,
	-2, 1029,
	-1, 3385,
	83, 1101,
	155, 1101,
	-2, 1029,
	-1, 3534,
	83, 1105,
	155, 1105,
	-2, 1029,
	-1, 3582,
	83, 1106,
	155, 1106,
	-2, 1029,
}

const yyPrivate = 57344

const yyLast = 45059

var yyAct = [...]int{
	714, 692, 3599, 2554, 716, 3562, 191, 3615, 1786, 3538,
	3544, 3081, 3440, 2926, 3545, 3537, 1538, 3466, 3385, 2893,
	3425, 700, 3110, 694, 3175, 2548, 3363, 2374, 3416, 1205,
	3284, 3384, 1327, 1388, 2993, 3444, 3218, 3215, 3322, 3311,
	589, 2994, 3217, 1534, 744, 960, 2551, 3355, 1464, 1071,
	605, 3179, 610, 610, 3426, 3428, 3170, 1735, 610, 626,
	635, 3048, 3237, 635, 690, 3097, 2528, 2902, 3222, 3229,
	3199, 1541, 2867, 2830, 2991, 3064, 2660, 3232, 2856, 2157,
	2661, 3037, 2643, 2578, 2904, 1876, 2409, 3066, 176, 2922,
	2653, 1595, 2659, 2911, 1979, 2722, 1944, 2979, 2286, 1849,
	1474, 2160, 2682, 2959, 640, 2288, 646, 2656, 2501, 2837,
	2840, 2835, 36, 2910, 684, 3181, 2123, 1873, 2831, 1841,
	1891, 1381, 2833, 2832, 2874, 2512, 1064, 2081, 2090, 2236,
	2765, 689, 1964, 1453, 2080, 2357, 2252, 2557, 2695, 1975,
	891, 1952, 1682, 2189, 1918, 2705, 1468, 1953, 1945, 1869,
	1460, 609, 609, 2340, 2828, 1844, 1465, 617, 1974, 2253,
	1300, 2241, 1842, 2490, 2485, 589, 954, 2559, 2580, 2441,
	1765, 632, 2158, 1776, 2520, 6, 55, 2122, 1473, 187,
	8, 1711, 2284, 1016, 1278, 186, 7, 2009, 1397, 1976,
	1490, 191, 1532, 191, 693, 1007, 1008, 604, 116, 1427,
	35, 1367, 610, 1746, 2103, 1537, 588, 923, 2442, 1747,
	1986, 683, 1588, 1572, 1523, 685, 701, 1082, 1934, 2153,
	622, 1951, 1434, 1948, 1737, 26, 1908, 1531, 1316, 15,
	1302, 953, 1366, 2260, 1710, 619, 14, 691, 13, 890,
	32, 1596, 1328, 648, 23, 832, 1364, 1420, 16, 649,
	10, 177, 1336, 867, 1206, 1426, 888, 873, 910, 1245,
	167, 645, 634, 3349, 1983, 1337, 2474, 2474, 1004, 1312,
	1993, 173, 2474, 3051, 2986, 2397, 2346, 2344, 2343, 1003,
	2341, 1005, 1695, 1441, 631, 1437, 999, 1000, 627, 175,
	1264, 606, 834, 1000, 835, 630, 2813, 629, 1000, 628,
	2810, 617, 2815, 2812, 3607, 685, 2467, 2465, 1349, 1689,
	1260, 1439, 3168, 2718, 3100, 2716, 615, 1140, 1141, 1142,
	1139, 1140, 1141, 1142, 1139, 638, 1923, 3318, 3312, 3171,
	2992, 1961, 1200, 3430, 1947, 833, 2792, 2197, 844, 1033,
	1103, 2383, 3204, 3370, 1980, 969, 2469, 174, 51, 163,
	138, 998, 3112, 2391, 1265, 8, 3200, 3065, 2114, 3339,
	3477, 7, 174, 1407, 1406, 3103, 1405, 966, 972, 968,
	970, 3519, 971, 644, 174, 3098, 2790, 174, 1991, 174,
	3120, 3121, 1292, 2107, 3341, 2278, 3099, 3371, 2266, 988,
	1274, 2265, 2279, 1137, 2267, 1488, 174, 174, 51, 163,
	138, 2689, 2690, 1368, 881, 1370, 882, 1886, 174, 51,
	163, 138, 1854, 1855, 1481, 1266, 168, 1696, 1697, 2688,
	1853, 1324, 115, 3104, 1332, 1485, 164, 2737, 1331, 1334,
	1335, 168, 2358, 156, 932, 2897, 1761, 165, 1540, 942,
	2895, 1135, 862, 168, 1478, 963, 1487, 845, 168, 174,
	51, 163, 138, 962, 174, 876, 115, 872, 2069, 1019,
	964, 1118, 965, 3192, 1119, 1480, 168, 1334, 1335, 1130,
	2814, 103, 1508, 174, 2811, 1345, 3433, 168, 1346, 1041,
	1045, 1047, 1049, 1051, 1052, 1054, 3432, 1059, 1055, 1056,
	1057, 1058, 1121, 1036, 1037, 1038, 1039, 1017, 1018, 1042,
	3431, 1020, 2730, 1021, 1022, 1023, 1024, 1025, 1026, 1027,
	1028, 1029, 1032, 1034, 1030, 1031, 1040, 3119, 168, 2161,
	1273, 115, 3570, 168, 1044, 1046, 1048, 1050, 1053, 3516,
	2487, 983, 978, 973, 977, 981, 3548, 3549, 3433, 3510,
	2488, 3320, 168, 3512, 3108, 3432, 3509, 2723, 1440, 1438,
	3431, 3508, 2470, 120, 121, 3418, 122, 123, 3421, 986,
	3566, 3567, 1035, 976, 1348, 3315, 3105, 3109, 3107, 3106,
	823, 1116, 822, 824, 825, 1544, 826, 827, 3323, 3324,
	3325, 3326, 938, 936, 878, 937, 871, 2995, 2724, 2486,
	2725, 3418, 2378, 1076, 1085, 875, 874, 2995, 1085, 3191,
	1995, 2598, 1860, 3437, 3114, 3115, 1870, 3193, 3008, 610,
	3521, 3522, 856, 137, 984, 172, 863, 1322, 1519, 610,
	1075, 987, 3517, 3518, 137, 162, 172, 2849, 101, 3038,
	1992, 1987, 2841, 2851, 1117, 161, 870, 635, 635, 3045,
	610, 1864, 974, 3343, 3209, 2755, 161, 155, 154, 2230,
	3122, 1358, 2493, 57, 1931, 880, 3335, 1884, 1885, 3336,
	869, 2101, 3101, 2468, 868, 985, 1447, 1446, 3113, 879,
	855, 943, 2477, 1275, 861, 1123, 1133, 1134, 1124, 1128,
	1129, 3122, 2846, 2847, 2195, 3514, 2753, 1132, 1263, 3547,
	1543, 1542, 939, 1010, 679, 859, 1106, 681, 2848, 2411,
	2412, 1524, 680, 2388, 1528, 975, 1126, 3169, 1066, 2717,
	2845, 1120, 3338, 2647, 157, 158, 159, 2237, 1073, 3346,
	2233, 2232, 1981, 1981, 3206, 1347, 1981, 2925, 1527, 3137,
	3577, 3348, 879, 2865, 3011, 2759, 632, 632, 1068, 1094,
	2473, 3134, 2875, 3337, 166, 3375, 1075, 3367, 2899, 3335,
	1098, 3459, 3336, 2176, 3454, 941, 2521, 1074, 860, 2156,
	2179, 637, 1080, 636, 111, 2652, 633, 3330, 160, 1209,
	112, 2923, 2924, 2109, 3127, 1000, 3461, 1000, 1000, 3445,
	1000, 3082, 982, 3369, 3467, 1122, 1000, 1000, 1087, 1086,
	2894, 2553, 1087, 1086, 2549, 2550, 1173, 2553, 3118, 1998,
	2000, 2001, 969, 1982, 1994, 3338, 3089, 3342, 2342, 1334,
	1335, 1529, 1442, 1311, 1334, 1335, 3520, 2178, 979, 3138,
	2928, 980, 2843, 1127, 966, 3436, 968, 113, 52, 3275,
	3631, 2207, 940, 2206, 1526, 877, 3337, 3264, 2163, 1323,
	50, 3618, 833, 1043, 1078, 1079, 3270, 3182, 1125, 631,
	631, 1089, 2466, 627, 627, 2499, 1271, 605, 3205, 2177,
	630, 630, 629, 629, 628, 628, 1377, 3117, 633, 2392,
	1376, 139, 969, 1096, 866, 2281, 1070, 1550, 1553, 1554,
	1309, 1243, 1308, 1210, 1248, 1307, 139, 3468, 1551, 52,
	891, 1095, 2227, 2228, 966, 3536, 968, 3356, 139, 1091,
	1092, 139, 3376, 139, 3368, 1097, 3389, 881, 1069, 882,
	965, 2010, 2627, 169, 170, 2903, 171, 1326, 1325, 1179,
	139, 139, 1065, 1111, 169, 170, 1113, 171, 2809, 3067,
	52, 2198, 139, 2173, 1175, 1176, 1177, 1178, 1871, 610,
	2842, 1360, 1330, 2852, 2163, 2166, 2156, 589, 589, 3166,
	3513, 1525, 2998, 3344, 1114, 2756, 589, 589, 1279, 2492,
	1392, 1392, 3331, 610, 2684, 2686, 3427, 3285, 3286, 3287,
	3290, 3289, 3288, 139, 2900, 2162, 644, 3619, 139, 2599,
	2164, 2600, 2601, 933, 3415, 635, 1421, 605, 1365, 1861,
	1430, 1430, 2919, 2384, 1394, 114, 39, 139, 2270, 2193,
	1984, 191, 49, 1390, 1390, 1520, 5, 3210, 1218, 1219,
	589, 2927, 118, 119, 1399, 2496, 2497, 1284, 2700, 2701,
	2844, 2505, 2507, 2508, 2509, 2506, 1333, 2863, 1863, 1103,
	2495, 2923, 2924, 1107, 2165, 3388, 2758, 1290, 1356, 1999,
	1289, 2166, 2920, 1288, 1287, 1280, 1281, 1282, 1283, 639,
	1285, 3031, 1996, 1997, 1272, 3331, 1291, 3277, 1109, 3332,
	2596, 1472, 1398, 1475, 1448, 1297, 935, 2476, 1483, 934,
	1112, 1115, 3535, 885, 886, 887, 2167, 3271, 3272, 1386,
	1387, 2162, 2156, 2161, 3266, 2159, 2164, 2084, 3265, 1506,
	1269, 1276, 2767, 2766, 1247, 1699, 1108, 2151, 991, 996,
	997, 2086, 2085, 1392, 1700, 1392, 1075, 1249, 3616, 3617,
	1501, 1502, 2083, 1372, 1374, 1102, 1277, 1552, 847, 1489,
	1267, 1268, 1384, 1385, 1305, 1698, 2163, 2166, 2219, 1310,
	2685, 933, 1318, 1319, 2618, 2619, 1320, 848, 3238, 2172,
	2165, 883, 3621, 2170, 1339, 1340, 1299, 1342, 1343, 1344,
	1359, 1451, 3506, 1454, 1455, 2526, 2864, 1521, 880, 2628,
	2630, 2631, 2632, 2629, 1456, 1457, 3627, 1313, 1317, 1317,
	1317, 1338, 2167, 1110, 1341, 2192, 1443, 1479, 1138, 2999,
	2250, 1486, 2880, 2139, 1422, 2093, 1072, 1594, 1462, 1463,
	1911, 1313, 1313, 632, 3613, 1350, 1351, 1738, 1375, 851,
	1738, 1643, 1505, 1515, 2956, 1470, 3601, 3635, 2094, 2095,
	1504, 1103, 1522, 1467, 935, 2360, 1471, 934, 1560, 1561,
	1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571,
	615, 2952, 1413, 1101, 1583, 1584, 2043, 1400, 1989, 2042,
	2105, 969, 2921, 1539, 1536, 969, 1431, 1419, 3034, 3010,
	850, 3584, 1432, 3556, 853, 852, 2617, 2527, 2167, 3550,
	2074, 3532, 1075, 2162, 2156, 2161, 3585, 2159, 2164, 1140,
	1141, 1142, 1139, 2383, 1421, 2932, 1680, 1555, 3602, 1708,
	1652, 1392, 1713, 1714, 1628, 1716, 1717, 610, 1517, 993,
	994, 995, 610, 2527, 3487, 1392, 1633, 1634, 1635, 891,
	1072, 1497, 1736, 686, 2251, 944, 631, 1392, 1533, 1649,
	627, 1138, 1650, 1360, 1492, 2138, 1514, 630, 626, 629,
	1511, 628, 2165, 3585, 3462, 3557, 1660, 1661, 1909, 1510,
	1138, 3352, 1683, 3533, 2251, 1513, 3450, 2956, 1760, 1512,
	3408, 1509, 3407, 1679, 2930, 1530, 1766, 1766, 1642, 1360,
	1103, 1360, 1360, 1535, 2104, 610, 610, 3402, 1708, 1708,
	1100, 3401, 1392, 1838, 1839, 1851, 3352, 3400, 2819, 1625,
	1626, 1707, 1629, 3399, 1140, 1141, 1142, 1139, 2817, 589,
	1644, 1392, 1574, 2251, 3379, 2703, 1718, 2479, 2471, 2373,
	1715, 1723, 2022, 1651, 3378, 1653, 1989, 2365, 2281, 1691,
	1140, 1141, 1142, 1139, 3351, 1581, 1582, 3143, 3451, 610,
	1708, 1392, 3409, 1896, 2127, 610, 610, 610, 1901, 1902,
	2788, 1140, 1141, 1142, 1139, 1906, 1907, 3091, 1980, 3352,
	1913, 3057, 1887, 3352, 1788, 1852, 1101, 191, 1686, 3352,
	191, 191, 2149, 191, 1244, 3352, 2019, 2079, 2073, 2072,
	1833, 1834, 2047, 1971, 1772, 1773, 1989, 1764, 2940, 1704,
	1705, 1706, 1654, 1882, 1298, 1586, 1989, 2021, 837, 838,
	839, 840, 1719, 1720, 1721, 1722, 3352, 2679, 1378, 2281,
	2448, 1643, 1643, 1955, 1865, 3603, 1712, 2440, 1643, 1643,
	1681, 1687, 1001, 1002, 1857, 1966, 1859, 1006, 2399, 3092,
	1728, 3078, 1893, 3058, 1879, 1880, 1877, 1878, 1892, 2381,
	2881, 2369, 1741, 2707, 1892, 1892, 1892, 1767, 1895, 1736,
	1872, 1703, 1960, 1392, 1978, 1922, 2529, 2386, 1925, 1926,
	2941, 1928, 1768, 2367, 2385, 1898, 1899, 1900, 1733, 1744,
	1745, 1739, 1740, 1732, 2377, 1752, 2144, 2038, 3044, 2251,
	1753, 3300, 1138, 1749, 1770, 1771, 1754, 1755, 1769, 1138,
	2362, 1759, 1758, 2023, 1762, 1763, 1970, 1712, 2355, 1748,
	1138, 1750, 1751, 1313, 1916, 2353, 1972, 1743, 2351, 717,
	727, 2127, 1956, 2363, 1904, 1757, 1494, 1317, 718, 2417,
	726, 719, 723, 722, 720, 721, 1837, 2349, 1840, 1317,
	837, 838, 839, 840, 1856, 2368, 1858, 1186, 2126, 1088,
	1866, 632, 2075, 2054, 1067, 842, 1533, 1059, 1055, 1056,
	1057, 1058, 2053, 2422, 2041, 2421, 2420, 2418, 1950, 2032,
	1062, 2031, 2363, 1060, 3141, 1950, 2030, 1988, 1894, 1881,
	2356, 1498, 2262, 3163, 2007, 2008, 1155, 2354, 1632, 1631,
	2350, 2885, 2750, 3455, 3239, 2876, 1919, 969, 1917, 1303,
	3070, 1632, 1631, 1304, 969, 849, 3622, 3604, 3068, 2350,
	2190, 1314, 3350, 1380, 3327, 725, 2003, 1403, 1936, 966,
	2127, 968, 1382, 1962, 2074, 1138, 966, 3268, 968, 3267,
	3253, 3211, 2419, 1383, 1138, 3050, 1138, 3456, 3240, 2957,
	2950, 1138, 684, 1138, 3071, 610, 610, 610, 1138, 1989,
	1959, 1957, 3069, 1499, 1067, 2945, 2942, 1969, 2858, 1968,
	610, 610, 610, 610, 631, 2649, 2503, 2475, 627, 2396,
	2366, 2877, 2272, 2124, 1294, 630, 1973, 629, 1293, 628,
	1077, 2341, 2984, 2131, 1360, 2406, 2335, 842, 1589, 1435,
	2016, 1920, 969, 1589, 1920, 2709, 2048, 2049, 1666, 2051,
	1158, 1159, 1160, 1161, 1162, 1155, 2058, 1142, 1139, 1360,
	2011, 1659, 1379, 2002, 966, 2878, 968, 1156, 1157, 1158,
	1159, 1160, 1161, 1162, 1155, 1709, 2185, 1315, 1187, 854,
	2004, 1580, 3507, 1574, 1140, 1141, 1142, 1139, 1139, 3280,
	2015, 3279, 2726, 2985, 2097, 2098, 2099, 1577, 1579, 1576,
	2588, 1578, 2587, 2565, 2563, 2005, 2006, 3207, 3630, 2115,
	2116, 2117, 2118, 1140, 1141, 1142, 1139, 3212, 3213, 2423,
	2424, 3259, 2408, 3609, 2191, 643, 1153, 1163, 1164, 1156,
	1157, 1158, 1159, 1160, 1161, 1162, 1155, 2255, 2255, 1851,
	2255, 1154, 1153, 1163, 1164, 1156, 1157, 1158, 1159, 1160,
	1161, 1162, 1155, 1140, 1141, 1142, 1139, 1188, 589, 589,
	2045, 3608, 2459, 3208, 2987, 2460, 1075, 3042, 2076, 3629,
	1187, 3531, 1392, 610, 2068, 2070, 2071, 1647, 3530, 1616,
	1146, 1147, 1148, 1149, 1150, 1151, 1152, 1144, 610, 1209,
	3496, 1648, 2155, 2154, 1075, 2325, 605, 3457, 3404, 3392,
	1430, 3382, 1851, 2087, 3372, 2330, 2639, 2332, 3313, 3242,
	2637, 191, 3241, 2106, 3083, 2276, 3072, 1140, 1141, 1142,
	1139, 2635, 3041, 3043, 2148, 2850, 2624, 2196, 2345, 2746,
	2199, 2200, 2201, 2202, 2203, 2204, 2205, 2132, 2721, 2208,
	2209, 2210, 2211, 2212, 2213, 2214, 2215, 2216, 2217, 2218,
	2720, 2220, 2221, 2222, 2223, 2224, 2622, 2225, 2259, 2133,
	2134, 2379, 2638, 2621, 1978, 2268, 2636, 2269, 2145, 2136,
	2137, 1392, 1398, 1392, 2257, 1392, 2261, 2634, 2140, 2620,
	1075, 1143, 2623, 2143, 2612, 2273, 2274, 1892, 2398, 1172,
	2168, 2169, 2606, 2174, 2605, 2604, 2135, 1181, 2603, 2336,
	2472, 2141, 2078, 1210, 2142, 1939, 1938, 1937, 2283, 1140,
	1141, 1142, 1139, 1392, 2426, 969, 2389, 1933, 2337, 1932,
	1317, 2329, 1189, 2781, 1372, 1374, 1890, 1889, 1888, 2433,
	1495, 2289, 2234, 1262, 1392, 2034, 2502, 966, 3049, 968,
	679, 1612, 2654, 681, 2263, 2432, 2425, 1609, 680, 2836,
	3626, 1611, 1608, 1610, 1614, 1615, 1390, 3625, 3576, 1613,
	3575, 2277, 1140, 1141, 1142, 1139, 3572, 2434, 2280, 1630,
	3176, 1436, 1140, 1141, 1142, 1139, 3568, 1390, 3439, 3216,
	1435, 3424, 2780, 1075, 3413, 3396, 3391, 1075, 2437, 2438,
	3390, 3347, 3345, 2326, 3314, 1392, 3261, 2414, 2500, 2328,
	2435, 2033, 3225, 3174, 1708, 3172, 3474, 3150, 1140, 1141,
	1142, 1139, 2525, 3147, 2410, 3145, 2410, 2393, 2531, 2395,
	3541, 2644, 3040, 2327, 3039, 2375, 2376, 1140, 1141, 1142,
	1139, 3036, 2334, 2390, 2404, 2541, 3019, 1140, 1141, 1142,
	1139, 2371, 3017, 2951, 1075, 2947, 1140, 1141, 1142, 1139,
	2463, 2938, 2562, 2382, 2937, 2859, 2380, 2823, 2822, 1075,
	1075, 1075, 1766, 2387, 3443, 1075, 2821, 2573, 2574, 2575,
	2576, 1075, 2583, 2082, 2584, 2585, 1533, 2586, 2760, 2757,
	2513, 2719, 2693, 2400, 2401, 1140, 1141, 1142, 1139, 2583,
	1140, 1141, 1142, 1139, 2633, 2416, 2514, 1140, 1141, 1142,
	1139, 2255, 2625, 1619, 1620, 1621, 1622, 1623, 1624, 1617,
	1618, 2523, 2615, 2443, 2444, 2640, 2522, 1788, 2613, 2449,
	2480, 2609, 2608, 589, 2289, 2607, 2372, 2532, 1708, 1075,
	1851, 1851, 1851, 1851, 1941, 2489, 1935, 3195, 2403, 779,
	778, 1075, 1851, 2543, 1694, 2255, 1693, 1496, 2482, 1217,
	2484, 2560, 3185, 729, 117, 2560, 1213, 3470, 1212, 117,
	1063, 1392, 2556, 1140, 1141, 1142, 1139, 846, 3328, 2481,
	3196, 3183, 610, 610, 3063, 3062, 2498, 2567, 1140, 1141,
	1142, 1139, 3061, 1429, 1429, 3033, 3029, 3027, 3026, 2524,
	3025, 2530, 3024, 3023, 3022, 8, 3018, 2568, 2569, 3016,
	1712, 7, 2572, 3000, 2990, 2989, 2769, 2975, 2579, 616,
	3184, 2542, 117, 2545, 2974, 2886, 3131, 2675, 2826, 2816,
	2558, 2564, 2786, 2779, 2771, 2594, 2595, 174, 191, 163,
	138, 2770, 2571, 191, 2764, 2561, 1140, 1141, 1142, 1139,
	2610, 2611, 1140, 1141, 1142, 1139, 2026, 2702, 2478, 2352,
	2534, 2348, 2347, 2533, 1643, 2537, 1643, 2602, 2059, 2736,
	2614, 2052, 2538, 2539, 2646, 2046, 2662, 2044, 2745, 2040,
	2039, 2697, 2698, 2037, 1392, 2028, 2025, 2752, 2662, 3014,
	1140, 1141, 1142, 1139, 2645, 2704, 2540, 2024, 2650, 2648,
	1940, 1677, 2663, 2664, 2665, 2666, 168, 2676, 1676, 1675,
	1646, 2674, 1645, 2677, 2678, 1140, 1141, 1142, 1139, 1636,
	1404, 1402, 2694, 174, 2555, 1455, 2710, 3495, 1207, 2691,
	3469, 2714, 967, 3410, 3398, 1456, 1457, 2784, 2020, 117,
	3393, 2687, 1545, 1546, 1547, 1548, 1549, 1683, 1140, 1141,
	1142, 1139, 2735, 1450, 117, 3294, 117, 3278, 1462, 1463,
	3274, 2733, 3252, 1140, 1141, 1142, 1139, 2739, 3236, 2774,
	1470, 2776, 3158, 3156, 3129, 2731, 3128, 3125, 1467, 3124,
	2708, 1471, 2738, 2711, 1075, 2754, 1590, 1591, 1592, 1593,
	2839, 2749, 168, 2712, 3090, 1627, 3087, 3085, 3052, 1461,
	2854, 1452, 1466, 1637, 2729, 610, 2742, 2734, 2741, 2727,
	2740, 2732, 1140, 1141, 1142, 1139, 2868, 1075, 1075, 1075,
	3383, 1469, 1458, 2748, 1301, 2641, 2566, 1851, 2124, 2518,
	2884, 2517, 2761, 2516, 2762, 2515, 2483, 2458, 2361, 969,
	2271, 2226, 2125, 2768, 2096, 2077, 969, 1575, 2185, 168,
	1684, 2772, 2773, 1903, 2777, 2778, 1702, 1690, 1518, 2862,
	2909, 1482, 2912, 2818, 2912, 2912, 1459, 1261, 1246, 1075,
	3486, 2783, 2775, 1154, 1153, 1163, 1164, 1156, 1157, 1158,
	1159, 1160, 1161, 1162, 1155, 2782, 2825, 1242, 2933, 2513,
	2929, 1241, 1240, 1239, 1238, 1392, 1392, 1140, 1141, 1142,
	1139, 1237, 2820, 1236, 2860, 1235, 1234, 2931, 2824, 2793,
	2794, 1140, 1141, 1142, 1139, 2795, 2796, 2797, 2798, 1233,
	2799, 2800, 2801, 2802, 2803, 2804, 2805, 2806, 2934, 2935,
	2855, 1232, 2873, 1756, 1231, 1230, 1229, 2861, 1390, 1390,
	1228, 1227, 610, 1226, 2883, 1225, 2882, 2839, 1224, 1223,
	2879, 1222, 2917, 2908, 2457, 1221, 1220, 2892, 1708, 1708,
	1216, 1215, 1214, 2907, 1211, 2896, 2898, 2891, 1204, 2155,
	2154, 2870, 2871, 2872, 1203, 1201, 1200, 2913, 2914, 1199,
	1140, 1141, 1142, 1139, 2456, 1684, 1198, 2918, 1197, 1196,
	1684, 1684, 1195, 1194, 1193, 1192, 969, 1191, 1190, 1185,
	1166, 1184, 1170, 1183, 1075, 1182, 1105, 1061, 2426, 2455,
	1140, 1141, 1142, 1139, 3484, 2018, 3482, 2988, 1167, 1169,
	1165, 969, 1168, 1154, 1153, 1163, 1164, 1156, 1157, 1158,
	1159, 1160, 1161, 1162, 1155, 1140, 1141, 1142, 1139, 1921,
	3480, 1892, 1924, 2960, 2961, 1927, 3126, 2130, 1929, 2111,
	2915, 2966, 1093, 3590, 2454, 3588, 2944, 2943, 2887, 610,
	2949, 2948, 2939, 2888, 2889, 2953, 2954, 2453, 3546, 2964,
	2946, 2890, 1354, 1355, 2963, 1357, 2504, 1361, 1362, 1363,
	1140, 1141, 1142, 1139, 2968, 2282, 2971, 2972, 2973, 1140,
	1141, 1142, 1139, 1140, 1141, 1142, 1139, 1965, 1943, 2671,
	1104, 2965, 2977, 2452, 2672, 3257, 2983, 2668, 2667, 1408,
	1409, 1410, 1411, 1412, 1295, 1414, 1415, 1416, 1417, 1418,
	2451, 2669, 2370, 1424, 1425, 2364, 2670, 3001, 102, 1140,
	1141, 1142, 1139, 2450, 3002, 3160, 2673, 3003, 2247, 2248,
	2857, 2289, 2447, 3161, 3007, 2744, 1140, 1141, 1142, 1139,
	2446, 1730, 1731, 54, 3006, 607, 3012, 3020, 3009, 1140,
	1141, 1142, 1139, 1725, 1726, 1727, 3056, 3136, 1140, 1141,
	1142, 1139, 2194, 3004, 3005, 2410, 1140, 1141, 1142, 1139,
	2255, 1851, 3075, 53, 612, 2955, 2445, 117, 117, 967,
	2013, 2978, 3159, 2017, 1825, 2243, 2246, 2247, 2248, 2244,
	2967, 2245, 2249, 2905, 3093, 2906, 1444, 1075, 611, 613,
	2590, 3030, 1140, 1141, 1142, 1139, 2909, 2591, 2592, 2593,
	1075, 1163, 1164, 1156, 1157, 1158, 1159, 1160, 1161, 1162,
	1155, 1075, 2359, 3140, 2029, 2375, 2376, 1392, 2394, 614,
	3032, 1491, 2036, 1476, 2102, 1905, 3047, 3035, 1099, 2834,
	2827, 3077, 2544, 1708, 2519, 2439, 2147, 1075, 2120, 1171,
	3084, 2050, 3086, 2429, 1734, 1701, 2055, 2056, 2057, 2405,
	3142, 2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 3080,
	1390, 1140, 1141, 1142, 1139, 3116, 191, 3123, 3559, 1140,
	1141, 1142, 1139, 1585, 3395, 1140, 1141, 1142, 1139, 1075,
	3074, 2936, 3162, 3132, 969, 3152, 3053, 3054, 3055, 3130,
	3135, 969, 3059, 3060, 3139, 2235, 3073, 1632, 1631, 1140,
	1141, 1142, 1139, 2231, 3144, 1836, 3146, 1353, 3149, 1257,
	1258, 1255, 1256, 1253, 1254, 1075, 1352, 3153, 1251, 1252,
	1131, 2970, 2128, 3154, 3094, 3151, 2696, 1967, 1306, 1286,
	1329, 3524, 2238, 1075, 1392, 1392, 3502, 3133, 3500, 2868,
	3446, 3423, 3422, 3420, 3148, 3411, 3308, 3307, 2579, 3247,
	3231, 3173, 3231, 3021, 3167, 3177, 2997, 2996, 3178, 2981,
	2180, 2150, 3165, 3227, 3228, 3246, 1075, 3221, 1075, 2243,
	2246, 2247, 2248, 2244, 2662, 2245, 2249, 1390, 3223, 1250,
	1493, 2980, 3249, 2706, 3251, 1392, 3203, 3076, 3202, 3201,
	1738, 3592, 3591, 3592, 2747, 3079, 2113, 2027, 1090, 3591,
	3276, 2976, 3194, 610, 1072, 1075, 1075, 178, 3, 1075,
	1075, 3226, 1321, 3235, 3234, 62, 2662, 3198, 2, 3605,
	3606, 1, 3077, 3245, 2464, 3296, 1688, 1259, 3223, 837,
	838, 839, 840, 841, 1072, 3254, 836, 1736, 3291, 3305,
	3255, 1684, 3258, 1684, 1369, 3260, 2264, 3282, 3283, 3309,
	3310, 3292, 3293, 3262, 3116, 1883, 3123, 1396, 1692, 843,
	2680, 1684, 1684, 2681, 2969, 3302, 3186, 2683, 3187, 1985,
	3219, 2651, 2229, 2100, 2853, 1296, 884, 1638, 1503, 3297,
	990, 1084, 1500, 1083, 1081, 1587, 731, 1946, 2642, 2616,
	3304, 3301, 3334, 1429, 3303, 3558, 3598, 3494, 3561, 1516,
	715, 3414, 3281, 1539, 3319, 1539, 3498, 3321, 3180, 1401,
	1990, 1136, 2728, 616, 906, 3316, 769, 3364, 742, 3358,
	1202, 1484, 1477, 2791, 2789, 3329, 3333, 992, 741, 1897,
	3046, 2494, 2699, 1075, 3366, 989, 907, 1930, 3317, 1445,
	1449, 2146, 3219, 3219, 117, 3387, 3219, 3219, 3353, 3381,
	3374, 3465, 3256, 2901, 2552, 3460, 3088, 3190, 3359, 3188,
	3189, 3298, 650, 3361, 1862, 3299, 3360, 587, 951, 3295,
	1942, 651, 2129, 3373, 3377, 1075, 3515, 3397, 3243, 3244,
	1392, 1655, 1656, 1657, 1658, 864, 2110, 1662, 1663, 1664,
	1665, 1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674, 865,
	2407, 3394, 857, 2413, 2511, 2510, 1556, 1145, 117, 1573,
	2427, 2428, 117, 3405, 2807, 2808, 1180, 3403, 2430, 2431,
	3435, 688, 2014, 1390, 117, 2491, 3111, 2692, 61, 60,
	59, 2436, 3429, 1075, 117, 58, 3412, 1912, 199, 733,
	3419, 198, 3417, 3214, 3491, 3563, 3447, 713, 712, 711,
	710, 709, 708, 2242, 2240, 2239, 1846, 1545, 1684, 1845,
	1910, 3442, 2866, 2582, 2577, 1777, 1775, 3438, 2570, 3441,
	1539, 2175, 2182, 1774, 3464, 3543, 3475, 3449, 3476, 1075,
	3250, 3273, 2626, 1724, 2171, 1794, 3458, 1392, 2597, 1791,
	3489, 3492, 3479, 3481, 3483, 3485, 1790, 3463, 2589, 3269,
	3263, 1822, 3362, 3230, 3472, 3095, 3096, 3102, 2119, 1015,
	1011, 1013, 3219, 1014, 1012, 2415, 3493, 2152, 2829, 2092,
	3488, 3478, 2535, 2536, 3406, 3501, 3499, 3503, 3504, 1392,
	1390, 3497, 3364, 1154, 1153, 1163, 1164, 1156, 1157, 1158,
	1159, 1160, 1161, 1162, 1155, 2091, 2089, 2088, 3534, 1270,
	3434, 3523, 3525, 3511, 3542, 3197, 3528, 3529, 3527, 2287,
	2285, 2962, 3526, 2958, 1954, 1963, 2743, 1847, 1843, 2112,
	3219, 3340, 1390, 1729, 858, 2108, 3565, 99, 152, 48,
	3564, 89, 88, 3448, 98, 150, 47, 183, 3452, 3453,
	3555, 3551, 182, 3552, 185, 3553, 184, 3554, 181, 2338,
	2339, 180, 1433, 179, 3505, 1075, 3233, 3569, 3571, 3429,
	831, 38, 37, 33, 12, 11, 3219, 34, 21, 3473,
	22, 20, 1507, 3387, 19, 3580, 25, 31, 30, 110,
	109, 3581, 3583, 3582, 29, 3586, 3589, 108, 3597, 3587,
	107, 3600, 106, 894, 3593, 3594, 3595, 3596, 105, 104,
	28, 18, 42, 41, 40, 9, 97, 95, 3610, 27,
	1075, 96, 93, 94, 92, 90, 73, 72, 71, 86,
	85, 3464, 3612, 84, 83, 3614, 3611, 82, 81, 79,
	3620, 80, 905, 3565, 3624, 70, 69, 3564, 3623, 174,
	51, 163, 138, 68, 67, 66, 3628, 91, 77, 87,
	78, 76, 75, 3600, 3632, 74, 65, 164, 1850, 64,
	63, 136, 893, 1616, 156, 135, 3636, 134, 165, 133,
	132, 130, 933, 131, 129, 2713, 128, 2715, 127, 126,
	125, 124, 43, 44, 45, 46, 146, 115, 145, 147,
	3573, 3574, 3578, 149, 151, 1684, 148, 153, 143, 141,
	1684, 144, 103, 142, 140, 56, 100, 1965, 168, 17,
	24, 4, 661, 660, 667, 657, 0, 0, 0, 0,
	0, 0, 0, 0, 664, 665, 0, 666, 670, 0,
	117, 652, 0, 117, 117, 0, 117, 0, 0, 0,
	0, 675, 2763, 0, 0, 0, 0, 1539, 0, 0,
	0, 3248, 0, 0, 0, 935, 0, 0, 934, 0,
	0, 0, 0, 0, 0, 0, 2785, 0, 0, 0,
	0, 0, 0, 0, 967, 0, 0, 0, 0, 0,
	0, 967, 0, 0, 120, 121, 0, 122, 123, 0,
	0, 0, 117, 0, 0, 919, 0, 0, 0, 0,
	0, 0, 0, 895, 1154, 1153, 1163, 1164, 1156, 1157,
	1158, 1159, 1160, 1161, 1162, 1155, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1612, 0, 0, 0, 0,
	897, 1609, 0, 0, 0, 1611, 1608, 1610, 1614, 1615,
	0, 0, 0, 1613, 0, 0, 0, 0, 2787, 0,
	0, 0, 0, 0, 0, 137, 162, 172, 0, 101,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1171,
	0, 0, 0, 0, 0, 0, 0, 161, 155, 154,
	0, 0, 0, 0, 57, 0, 0, 0, 0, 0,
	0, 0, 0, 918, 917, 0, 0, 0, 0, 0,
	2916, 1154, 1153, 1163, 1164, 1156, 1157, 1158, 1159, 1160,
	1161, 1162, 1155, 0, 916, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 892, 0, 0, 653, 655,
	654, 0, 0, 0, 0, 0, 896, 928, 659, 0,
	0, 0, 0, 0, 0, 157, 158, 159, 0, 0,
	663, 0, 0, 0, 0, 0, 0, 678, 0, 0,
	924, 0, 0, 0, 656, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 166, 1597, 1598, 1599, 1600,
	1601, 1602, 1603, 1604, 1605, 1606, 1607, 1619, 1620, 1621,
	1622, 1623, 1624, 1617, 1618, 111, 925, 929, 0, 160,
	0, 112, 1154, 1153, 1163, 1164, 1156, 1157, 1158, 1159,
	1160, 1161, 1162, 1155, 0, 0, 913, 0, 911, 915,
	932, 0, 0, 0, 912, 909, 908, 0, 914, 899,
	900, 898, 901, 902, 903, 904, 0, 930, 0, 931,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	926, 927, 0, 0, 0, 0, 0, 0, 113, 1823,
	0, 0, 0, 0, 1784, 0, 0, 0, 0, 0,
	0, 50, 658, 662, 668, 0, 669, 671, 0, 0,
	672, 673, 674, 0, 0, 676, 677, 922, 0, 0,
	0, 0, 0, 921, 1825, 1793, 0, 0, 0, 0,
	0, 0, 0, 0, 1826, 1827, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3013, 0, 0, 0, 0,
	52, 0, 3015, 0, 0, 0, 0, 0, 0, 0,
	1792, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2402, 0, 2258, 0, 0, 1800, 0, 0, 0, 0,
	0, 3028, 0, 0, 0, 169, 170, 0, 171, 0,
	0, 0, 0, 139, 1154, 1153, 1163, 1164, 1156, 1157,
	1158, 1159, 1160, 1161, 1162, 1155, 0, 0, 920, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1823,
	0, 0, 0, 0, 1784, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1850, 0, 0, 0, 0,
	0, 0, 1816, 0, 117, 0, 0, 0, 0, 0,
	0, 2012, 0, 0, 1825, 1793, 114, 39, 0, 0,
	0, 0, 0, 49, 1826, 1827, 0, 0, 0, 0,
	0, 0, 0, 118, 119, 1154, 1153, 1163, 1164, 1156,
	1157, 1158, 1159, 1160, 1161, 1162, 1155, 0, 0, 0,
	1792, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1800, 0, 0, 0, 0,
	1684, 0, 0, 1783, 1785, 1782, 0, 1779, 0, 0,
	0, 1684, 1804, 0, 3155, 0, 0, 3157, 0, 0,
	0, 0, 0, 1810, 0, 0, 0, 0, 0, 0,
	0, 1795, 0, 1778, 3164, 0, 0, 0, 0, 0,
	0, 0, 0, 1798, 1832, 0, 0, 1799, 1801, 1803,
	0, 1805, 1806, 1807, 1811, 1812, 1813, 1815, 1818, 1819,
	1820, 0, 1816, 0, 0, 0, 0, 0, 1808, 1817,
	1809, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1787, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1824, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1780, 1781, 0,
	0, 0, 0, 1783, 2547, 1782, 0, 2546, 0, 117,
	0, 0, 1804, 0, 0, 1821, 0, 0, 0, 0,
	0, 0, 0, 1810, 0, 0, 0, 0, 0, 0,
	0, 0, 1797, 0, 0, 0, 0, 0, 0, 1796,
	0, 0, 0, 1798, 1832, 0, 0, 1799, 1801, 1803,
	0, 1805, 1806, 1807, 1811, 1812, 1813, 1815, 1818, 1819,
	1820, 0, 0, 1814, 0, 0, 0, 0, 1808, 1817,
	1809, 0, 1802, 0, 0, 0, 0, 0, 0, 0,
	1787, 0, 0, 0, 0, 1829, 1828, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1824, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1033, 0, 0, 0, 0,
	0, 0, 0, 1850, 1850, 1850, 1850, 1780, 1781, 0,
	0, 0, 0, 0, 0, 1850, 0, 0, 1789, 0,
	0, 0, 0, 0, 3354, 1821, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1797, 0, 1140, 1141, 1142, 1139, 0, 1796,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1831, 0, 0, 1830, 0, 1033, 0, 0, 0, 0,
	0, 0, 0, 1814, 0, 0, 0, 0, 0, 0,
	0, 0, 1802, 0, 0, 0, 0, 0, 0, 0,
	1823, 0, 0, 0, 0, 1829, 1828, 0, 0, 0,
	0, 117, 0, 0, 0, 0, 117, 0, 0, 0,
	0, 0, 0, 0, 0, 1019, 0, 0, 0, 1009,
	0, 0, 0, 1616, 0, 1825, 117, 0, 0, 0,
	0, 0, 0, 117, 0, 1041, 1045, 1047, 1049, 1051,
	1052, 1054, 1189, 1059, 1055, 1056, 1057, 1058, 1789, 1036,
	1037, 1038, 1039, 1017, 1018, 1042, 0, 1020, 0, 1021,
	1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1032, 1034,
	1030, 1031, 1040, 0, 0, 0, 1800, 0, 0, 0,
	1044, 1046, 1048, 1050, 1053, 1019, 0, 0, 0, 0,
	1831, 0, 0, 1830, 0, 0, 0, 3471, 0, 0,
	0, 0, 0, 0, 0, 1041, 1045, 1047, 1049, 1051,
	1052, 1054, 0, 1059, 1055, 1056, 1057, 1058, 1035, 1036,
	1037, 1038, 1039, 1017, 1018, 1042, 0, 1020, 0, 1021,
	1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1032, 1034,
	1030, 1031, 1040, 1816, 0, 0, 0, 0, 0, 0,
	1044, 1046, 1048, 1050, 1053, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3539, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 117, 0, 1612, 0, 0, 1035, 0,
	1850, 1609, 0, 0, 0, 1611, 1608, 1610, 1614, 1615,
	0, 0, 0, 1613, 0, 0, 0, 0, 117, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1804, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1810, 0, 0, 0, 0, 0,
	3539, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1798, 1832, 0, 0, 1799, 1801,
	1803, 0, 1805, 1806, 1807, 1811, 1812, 1813, 1815, 1818,
	1819, 1820, 0, 0, 0, 0, 0, 0, 0, 1808,
	1817, 1809, 0, 0, 0, 0, 0, 0, 0, 3539,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1824, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3634, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1597, 1598, 1599, 1600,
	1601, 1602, 1603, 1604, 1605, 1606, 1607, 1619, 1620, 1621,
	1622, 1623, 1624, 1617, 1618, 0, 1821, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1797, 0, 0, 0, 0, 0, 0,
	1796, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1043,
	0, 0, 0, 0, 1814, 0, 0, 0, 0, 0,
	0, 0, 0, 1802, 749, 0, 0, 0, 0, 0,
	0, 0, 0, 358, 0, 481, 514, 503, 586, 469,
	0, 0, 0, 0, 0, 0, 702, 0, 0, 0,
	298, 0, 0, 328, 518, 500, 510, 501, 486, 487,
	488, 495, 308, 489, 490, 491, 463, 492, 464, 493,
	494, 740, 517, 468, 389, 342, 535, 534, 0, 1043,
	802, 810, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 695, 0, 0, 730, 779, 778, 717, 727,
	0, 117, 271, 197, 465, 582, 466, 718, 117, 726,
	719, 723, 722, 720, 721, 0, 794, 0, 0, 0,
	0, 0, 0, 687, 699, 0, 703, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	696, 697, 0, 0, 1850, 0, 750, 0, 698, 0,
	0, 745, 724, 728, 0, 0, 0, 0, 261, 394,
	411, 272, 385, 424, 277, 392, 267, 357, 381, 0,
	0, 263, 409, 391, 339, 318, 319, 262, 0, 376,
	296, 310, 293, 355, 725, 748, 752, 292, 816, 746,
	419, 265, 0, 418, 354, 405, 410, 340, 334, 264,
	407, 338, 333, 322, 300, 817, 323, 324, 314, 366,
	332, 367, 315, 344, 343, 345, 0, 0, 0, 0,
	0, 447, 448, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 576, 743, 0, 579, 0,
	421, 0, 0, 800, 0, 0, 0, 393, 0, 117,
	325, 0, 0, 0, 747, 0, 379, 360, 813, 0,
	0, 377, 330, 406, 368, 412, 395, 420, 373, 369,
	256, 396, 295, 341, 268, 270, 290, 297, 299, 301,
	302, 350, 351, 363, 384, 397, 398, 399, 294, 278,
	378, 279, 312, 280, 257, 286, 284, 287, 386, 288,
	259, 364, 403, 0, 307, 374, 337, 260, 336, 365,
	402, 401, 269, 428, 434, 435, 522, 0, 440, 600,
	601, 602, 449, 454, 455, 456, 458, 459, 460, 461,
	523, 540, 507, 478, 442, 531, 474, 479, 543, 1640,
	1639, 1641, 433, 326, 327, 0, 305, 253, 254, 596,
	798, 356, 545, 578, 470, 0, 812, 793, 795, 796,
	799, 803, 804, 805, 806, 807, 809, 811, 815, 595,
	0, 524, 539, 598, 538, 592, 362, 0, 383, 536,
	483, 0, 528, 502, 0, 529, 498, 533, 0, 472,
	0, 390, 414, 426, 443, 446, 473, 558, 559, 560,
	258, 445, 562, 563, 564, 565, 566, 567, 568, 561,
	814, 505, 482, 508, 425, 485, 484, 0, 0, 519,
	751, 520, 521, 346, 347, 348, 349, 801, 546, 276,
	444, 372, 0, 506, 0, 0, 0, 0, 0, 0,
	0, 0, 511, 512, 509, 603, 0, 569, 570, 0,
	0, 438, 439, 304, 311, 457, 313, 275, 361, 306,
	423, 320, 0, 450, 513, 451, 572, 575, 573, 574,
	353, 316, 317, 387, 321, 331, 375, 422, 359, 380,
	273, 413, 388, 335, 499, 526, 823, 797, 822, 824,
	825, 821, 826, 827, 808, 707, 0, 755, 819, 818,
	820, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 554, 553, 552, 551, 550, 549, 548, 547,
	0, 0, 496, 400, 285, 250, 281, 282, 289, 593,
	590, 404, 594, 0, 255, 477, 329, 0, 370, 303,
	541, 542, 786, 762, 763, 764, 704, 765, 759, 760,
	705, 761, 787, 753, 783, 784, 732, 756, 766, 782,
	767, 785, 788, 789, 828, 829, 773, 757, 222, 830,
	770, 790, 781, 780, 768, 754, 791, 792, 739, 734,
	771, 772, 758, 774, 775, 776, 706, 735, 736, 737,
	738, 0, 0, 0, 429, 430, 431, 453, 415, 475,
	591, 0, 0, 0, 0, 0, 0, 0, 525, 537,
	571, 0, 580, 581, 583, 585, 777, 749, 597, 467,
	577, 0, 0, 0, 0, 0, 358, 0, 481, 514,
	503, 586, 469, 0, 0, 0, 0, 0, 0, 702,
	0, 0, 0, 298, 1685, 0, 328, 518, 500, 510,
	501, 486, 487, 488, 495, 308, 489, 490, 491, 463,
	492, 464, 493, 494, 740, 517, 468, 389, 342, 535,
	534, 0, 0, 802, 810, 0, 0, 0, 0, 0,
	0, 0, 1874, 0, 0, 695, 0, 0, 730, 779,
	778, 717, 727, 0, 0, 271, 197, 465, 582, 466,
	718, 0, 726, 719, 723, 722, 720, 721, 0, 794,
	0, 0, 0, 0, 0, 0, 687, 699, 0, 703,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 696, 697, 0, 0, 0, 0, 750,
	0, 698, 0, 0, 1875, 724, 728, 0, 0, 0,
	0, 261, 394, 411, 272, 385, 424, 277, 392, 267,
	357, 381, 0, 0, 263, 409, 391, 339, 318, 319,
	262, 0, 376, 296, 310, 293, 355, 725, 748, 752,
	292, 816, 746, 419, 265, 0, 418, 354, 405, 410,
	340, 334, 264, 407, 338, 333, 322, 300, 817, 323,
	324, 314, 366, 332, 367, 315, 344, 343, 345, 0,
	0, 0, 0, 0, 447, 448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 576, 743,
	0, 579, 0, 421, 0, 0, 800, 0, 0, 0,
	393, 0, 0, 325, 0, 0, 0, 747, 0, 379,
	360, 813, 0, 0, 377, 330, 406, 368, 412, 395,
	420, 373, 369, 256, 396, 295, 341, 268, 270, 290,
	297, 299, 301, 302, 350, 351, 363, 384, 397, 398,
	399, 294, 278, 378, 279, 312, 280, 257, 286, 284,
	287, 386, 288, 259, 364, 403, 0, 307, 374, 337,
	260, 336, 365, 402, 401, 269, 428, 434, 435, 522,
	0, 440, 600, 601, 602, 449, 454, 455, 456, 458,
	459, 460, 461, 523, 540, 507, 478, 442, 531, 474,
	479, 543, 0, 0, 0, 433, 326, 327, 0, 305,
	253, 254, 596, 798, 356, 545, 578, 470, 0, 812,
	793, 795, 796, 799, 803, 804, 805, 806, 807, 809,
	811, 815, 595, 0, 524, 539, 598, 538, 592, 362,
	0, 383, 536, 483, 0, 528, 502, 0, 529, 498,
	533, 0, 472, 0, 390, 414, 426, 443, 446, 473,
	558, 559, 560, 258, 445, 562, 563, 564, 565, 566,
	567, 568, 561, 814, 505, 482, 508, 425, 485, 484,
	0, 0, 519, 751, 520, 521, 346, 347, 348, 349,
	801, 546, 276, 444, 372, 0, 506, 0, 0, 0,
	0, 0, 0, 0, 0, 511, 512, 509, 603, 0,
	569, 570, 0, 0, 438, 439, 304, 311, 457, 313,
	275, 361, 306, 423, 320, 0, 450, 513, 451, 572,
	575, 573, 574, 353, 316, 317, 387, 321, 331, 375,
	422, 359, 380, 273, 413, 388, 335, 499, 526, 823,
	797, 822, 824, 825, 821, 826, 827, 808, 707, 0,
	755, 819, 818, 820, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 554, 553, 552, 551, 550,
	549, 548, 547, 0, 0, 496, 400, 285, 250, 281,
	282, 289, 593, 590, 404, 594, 0, 255, 477, 329,
	0, 370, 303, 541, 542, 786, 762, 763, 764, 704,
	765, 759, 760, 705, 761, 787, 753, 783, 784, 732,
	756, 766, 782, 767, 785, 788, 789, 828, 829, 773,
	757, 222, 830, 770, 790, 781, 780, 768, 754, 791,
	792, 739, 734, 771, 772, 758, 774, 775, 776, 706,
	735, 736, 737, 738, 0, 0, 0, 429, 430, 431,
	453, 415, 475, 591, 0, 0, 0, 0, 0, 0,
	0, 525, 537, 571, 0, 580, 581, 583, 585, 777,
	0, 597, 467, 577, 174, 749, 0, 0, 0, 0,
	0, 0, 0, 0, 358, 0, 481, 514, 503, 586,
	469, 0, 0, 0, 0, 0, 0, 702, 0, 0,
	0, 298, 0, 0, 328, 518, 500, 510, 501, 486,
	487, 488, 495, 308, 489, 490, 491, 463, 492, 464,
	493, 494, 1174, 517, 468, 389, 342, 535, 534, 0,
	0, 802, 810, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 695, 0, 0, 730, 779, 778, 717,
	727, 0, 0, 271, 197, 465, 582, 466, 718, 0,
	726, 719, 723, 722, 720, 721, 0, 794, 0, 0,
	0, 0, 0, 0, 687, 699, 0, 703, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 696, 697, 0, 0, 0, 0, 750, 0, 698,
	0, 0, 745, 724, 728, 0, 0, 0, 0, 261,
	394, 411, 272, 385, 424, 277, 392, 267, 357, 381,
	0, 0, 263, 409, 391, 339, 318, 319, 262, 0,
	376, 296, 310, 293, 355, 725, 748, 752, 292, 816,
	746, 419, 265, 0, 418, 354, 405, 410, 340, 334,
	264, 407, 338, 333, 322, 300, 817, 323, 324, 314,
	366, 332, 367, 315, 344, 343, 345, 0, 0, 0,
	0, 0, 447, 448, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 576, 743, 0, 579,
	0, 421, 0, 0, 800, 0, 0, 0, 393, 0,
	0, 325, 0, 0, 0, 747, 0, 379, 360, 813,
	0, 0, 377, 330, 406, 368, 412, 395, 420, 373,
	369, 256, 396, 295, 341, 268, 270, 290, 297, 299,
	301, 302, 350, 351, 363, 384, 397, 398, 399, 294,
	278, 378, 279, 312, 280, 257, 286, 284, 287, 386,
	288, 259, 364, 403, 0, 307, 374, 337, 260, 336,
	365, 402, 401, 269, 428, 434, 435, 522, 0, 440,
	600, 601, 602, 449, 454, 455, 456, 458, 459, 460,
	461, 523, 540, 507, 478, 442, 531, 474, 479, 543,
	0, 0, 0, 433, 326, 327, 0, 305, 253, 254,
	596, 798, 356, 545, 578, 470, 0, 812, 793, 795,
	796, 799, 803, 804, 805, 806, 807, 809, 811, 815,
	595, 0, 524, 539, 598, 538, 592, 362, 0, 383,
	536, 483, 0, 528, 502, 0, 529, 498, 533, 0,
	472, 0, 390, 414, 426, 443, 446, 473, 558, 559,
	560, 258, 445, 562, 563, 564, 565, 566, 567, 568,
	561, 814, 505, 482, 508, 425, 485, 484, 0, 0,
	519, 751, 520, 521, 346, 347, 348, 349, 801, 546,
	276, 444, 372, 0, 506, 0, 0, 0, 0, 0,
	0, 0, 0, 511, 512, 509, 603, 0, 569, 570,
	0, 0, 438, 439, 304, 311, 457, 313, 275, 361,
	306, 423, 320, 0, 450, 513, 451, 572, 575, 573,
	574, 353, 316, 317, 387, 321, 331, 375, 422, 359,
	380, 273, 413, 388, 335, 499, 526, 823, 797, 822,
	824, 825, 821, 826, 827, 808, 707, 0, 755, 819,
	818, 820, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 554, 553, 552, 551, 550, 549, 548,
	547, 0, 0, 496, 400, 285, 250, 281, 282, 289,
	593, 590, 404, 594, 0, 255, 477, 329, 139, 370,
	303, 541, 542, 786, 762, 763, 764, 704, 765, 759,
	760, 705, 761, 787, 753, 783, 784, 732, 756, 766,
	782, 767, 785, 788, 789, 828, 829, 773, 757, 222,
	830, 770, 790, 781, 780, 768, 754, 791, 792, 739,
	734, 771, 772, 758, 774, 775, 776, 706, 735, 736,
	737, 738, 0, 0, 0, 429, 430, 431, 453, 415,
	475, 591, 0, 0, 0, 0, 0, 0, 0, 525,
	537, 571, 0, 580, 581, 583, 585, 777, 749, 597,
	467, 577, 0, 0, 0, 0, 0, 358, 0, 481,
	514, 503, 586, 469, 0, 0, 0, 0, 0, 0,
	702, 0, 0, 0, 298, 3633, 0, 328, 518, 500,
	510, 501, 486, 487, 488, 495, 308, 489, 490, 491,
	463, 492, 464, 493, 494, 740, 517, 468, 389, 342,
	535, 534, 0, 0, 802, 810, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 695, 0, 0, 730,
	779, 778, 717, 727, 0, 0, 271, 197, 465, 582,
	466, 718, 0, 726, 719, 723, 722, 720, 721, 0,
	794, 0, 0, 0, 0, 0, 0, 687, 699, 0,
	703, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 696, 697, 0, 0, 0, 0,
	750, 0, 698, 0, 0, 745, 724, 728, 0, 0,
	0, 0, 261, 394, 411, 272, 385, 424, 277, 392,
	267, 357, 381, 0, 0, 263, 409, 391, 339, 318,
	319, 262, 0, 376, 296, 310, 293, 355, 725, 748,
	752, 292, 816, 746, 419, 265, 0, 418, 354, 405,
	410, 340, 334, 264, 407, 338, 333, 322, 300, 817,
	323, 324, 314, 366, 332, 367, 315, 344, 343, 345,
	0, 0, 0, 0, 0, 447, 448, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 576,
	743, 0, 579, 0, 421, 0, 0, 800, 0, 0,
	0, 393, 0, 0, 325, 0, 0, 0, 747, 0,
	379, 360, 813, 0, 0, 377, 330, 406, 368, 412,
	395, 420, 373, 369, 256, 396, 295, 341, 268, 270,
	290, 297, 299, 301, 302, 350, 351, 363, 384, 397,
	398, 399, 294, 278, 378, 279, 312, 280, 257, 286,
	284, 287, 386, 288, 259, 364, 403, 0, 307, 374,
	337, 260, 336, 365, 402, 401, 269, 428, 434, 435,
	522, 0, 440, 600, 601, 602, 449, 454, 455, 456,
	458, 459, 460, 461, 523, 540, 507, 478, 442, 531,
	474, 479, 543, 0, 0, 0, 433, 326, 327, 0,
	305, 253, 254, 596, 798, 356, 545, 578, 470, 0,
	812, 793, 795, 796, 799, 803, 804, 805, 806, 807,
	809, 811, 815, 595, 0, 524, 539, 598, 538, 592,
	362, 0, 383, 536, 483, 0, 528, 502, 0, 529,
	498, 533, 0, 472, 0, 390, 414, 426, 443, 446,
	473, 558, 559, 560, 258, 445, 562, 563, 564, 565,
	566, 567, 568, 561, 814, 505, 482, 508, 425, 485,
	484, 0, 0, 519, 751, 520, 521, 346, 347, 348,
	349, 801, 546, 276, 444, 372, 0, 506, 0, 0,
	0, 0, 0, 0, 0, 0, 511, 512, 509, 603,
	0, 569, 570, 0, 0, 438, 439, 304, 311, 457,
	313, 275, 361, 306, 423, 320, 0, 450, 513, 451,
	572, 575, 573, 574, 353, 316, 317, 387, 321, 331,
	375, 422, 359, 380, 273, 413, 388, 335, 499, 526,
	823, 797, 822, 824, 825, 821, 826, 827, 808, 707,
	0, 755, 819, 818, 820, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 554, 553, 552, 551,
	550, 549, 548, 547, 0, 0, 496, 400, 285, 250,
	281, 282, 289, 593, 590, 404, 594, 0, 255, 477,
	329, 0, 370, 303, 541, 542, 786, 762, 763, 764,
	704, 765, 759, 760, 705, 761, 787, 753, 783, 784,
	732, 756, 766, 782, 767, 785, 788, 789, 828, 829,
	773, 757, 222, 830, 770, 790, 781, 780, 768, 754,
	791, 792, 739, 734, 771, 772, 758, 774, 775, 776,
	706, 735, 736, 737, 738, 0, 0, 0, 429, 430,
	431, 453, 415, 475, 591, 0, 0, 0, 0, 0,
	0, 0, 525, 537, 571, 0, 580, 581, 583, 585,
	777, 749, 597, 467, 577, 0, 0, 0, 0, 0,
	358, 0, 481, 514, 503, 586, 469, 0, 0, 0,
	0, 0, 0, 702, 0, 0, 0, 298, 0, 0,
	328, 518, 500, 510, 501, 486, 487, 488, 495, 308,
	489, 490, 491, 463, 492, 464, 493, 494, 740, 517,
	468, 389, 342, 535, 534, 0, 0, 802, 810, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 695,
	0, 0, 730, 779, 778, 717, 727, 0, 0, 271,
	197, 465, 582, 466, 718, 0, 726, 719, 723, 722,
	720, 721, 0, 794, 0, 0, 0, 0, 0, 0,
	687, 699, 0, 703, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 696, 697, 0,
	0, 0, 0, 750, 0, 698, 0, 0, 745, 724,
	728, 0, 0, 0, 0, 261, 394, 411, 272, 385,
	424, 277, 392, 267, 357, 381, 0, 0, 263, 409,
	391, 339, 318, 319, 262, 0, 376, 296, 310, 293,
	355, 725, 748, 752, 292, 816, 746, 419, 265, 0,
	418, 354, 405, 410, 340, 334, 264, 407, 338, 333,
	322, 300, 817, 323, 324, 314, 366, 332, 367, 315,
	344, 343, 345, 0, 0, 0, 0, 0, 447, 448,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 576, 743, 0, 579, 0, 421, 0, 0,
	800, 0, 0, 0, 393, 0, 0, 325, 0, 0,
	0, 747, 0, 379, 360, 813, 3540, 0, 377, 330,
	406, 368, 412, 395, 420, 373, 369, 256, 396, 295,
	341, 268, 270, 290, 297, 299, 301, 302, 350, 351,
	363, 384, 397, 398, 399, 294, 278, 378, 279, 312,
	280, 257, 286, 284, 287, 386, 288, 259, 364, 403,
	0, 307, 374, 337, 260, 336, 365, 402, 401, 269,
	428, 434, 435, 522, 0, 440, 600, 601, 602, 449,
	454, 455, 456, 458, 459, 460, 461, 523, 540, 507,
	478, 442, 531, 474, 479, 543, 0, 0, 0, 433,
	326, 327, 0, 305, 253, 254, 596, 798, 356, 545,
	578, 470, 0, 812, 793, 795, 796, 799, 803, 804,
	805, 806, 807, 809, 811, 815, 595, 0, 524, 539,
	598, 538, 592, 362, 0, 383, 536, 483, 0, 528,
	502, 0, 529, 498, 533, 0, 472, 0, 390, 414,
	426, 443, 446, 473, 558, 559, 560, 258, 445, 562,
	563, 564, 565, 566, 567, 568, 561, 814, 505, 482,
	508, 425, 485, 484, 0, 0, 519, 751, 520, 521,
	346, 347, 348, 349, 801, 546, 276, 444, 372, 0,
	506, 0, 0, 0, 0, 0, 0, 0, 0, 511,
	512, 509, 603, 0, 569, 570, 0, 0, 438, 439,
	304, 311, 457, 313, 275, 361, 306, 423, 320, 0,
	450, 513, 451, 572, 575, 573, 574, 353, 316, 317,
	387, 321, 331, 375, 422, 359, 380, 273, 413, 388,
	335, 499, 526, 823, 797, 822, 824, 825, 821, 826,
	827, 808, 707, 0, 755, 819, 818, 820, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 554,
	553, 552, 551, 550, 549, 548, 547, 0, 0, 496,
	400, 285, 250, 281, 282, 289, 593, 590, 404, 594,
	0, 255, 477, 329, 0, 370, 303, 541, 542, 786,
	762, 763, 764, 704, 765, 759, 760, 705, 761, 787,
	753, 783, 784, 732, 756, 766, 782, 767, 785, 788,
	789, 828, 829, 773, 757, 222, 830, 770, 790, 781,
	780, 768, 754, 791, 792, 739, 734, 771, 772, 758,
	774, 775, 776, 706, 735, 736, 737, 738, 0, 0,
	0, 429, 430, 431, 453, 415, 475, 591, 0, 0,
	0, 0, 0, 0, 0, 525, 537, 571, 0, 580,
	581, 583, 585, 777, 749, 597, 467, 577, 0, 0,
	0, 0, 0, 358, 0, 481, 514, 503, 586, 469,
	0, 0, 0, 0, 0, 0, 702, 0, 0, 0,
	298, 1685, 0, 328, 518, 500, 510, 501, 486, 487,
	488, 495, 308, 489, 490, 491, 463, 492, 464, 493,
	494, 740, 517, 468, 389, 342, 535, 534, 0, 0,
	802, 810, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 695, 0, 0, 730, 779, 778, 717, 727,
	0, 0, 271, 197, 465, 582, 466, 718, 0, 726,
	719, 723, 722, 720, 721, 0, 794, 0, 0, 0,
	0, 0, 0, 687, 699, 0, 703, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	696, 697, 0, 0, 0, 0, 750, 0, 698, 0,
	0, 745, 724, 728, 0, 0, 0, 0, 261, 394,
	411, 272, 385, 424, 277, 392, 267, 357, 381, 0,
	0, 263, 409, 391, 339, 318, 319, 262, 0, 376,
	296, 310, 293, 355, 725, 748, 752, 292, 816, 746,
	419, 265, 0, 418, 354, 405, 410, 340, 334, 264,
	407, 338, 333, 322, 300, 817, 323, 324, 314, 366,
	332, 367, 315, 344, 343, 345, 0, 0, 0, 0,
	0, 447, 448, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 576, 743, 0, 579, 0,
	421, 0, 0, 800, 0, 0, 0, 393, 0, 0,
	325, 0, 0, 0, 747, 0, 379, 360, 813, 0,
	0, 377, 330, 406, 368, 412, 395, 420, 373, 369,
	256, 396, 295, 341, 268, 270, 290, 297, 299, 301,
	302, 350, 351, 363, 384, 397, 398, 399, 294, 278,
	378, 279, 312, 280, 257, 286, 284, 287, 386, 288,
	259, 364, 403, 0, 307, 374, 337, 260, 336, 365,
	402, 401, 269, 428, 434, 435, 522, 0, 440, 600,
	601, 602, 449, 454, 455, 456, 458, 459, 460, 461,
	523, 540, 507, 478, 442, 531, 474, 479, 543, 0,
	0, 0, 433, 326, 327, 0, 305, 253, 254, 596,
	798, 356, 545, 578, 470, 0, 812, 793, 795, 796,
	799, 803, 804, 805, 806, 807, 809, 811, 815, 595,
	0, 524, 539, 598, 538, 592, 362, 0, 383, 536,
	483, 0, 528, 502, 0, 529, 498, 533, 0, 472,
	0, 390, 414, 426, 443, 446, 473, 558, 559, 560,
	258, 445, 562, 563, 564, 565, 566, 567, 568, 561,
	814, 505, 482, 508, 425, 485, 484, 0, 0, 519,
	751, 520, 521, 346, 347, 348, 349, 801, 546, 276,
	444, 372, 0, 506, 0, 0, 0, 0, 0, 0,
	0, 0, 511, 512, 509, 603, 0, 569, 570, 0,
	0, 438, 439, 304, 311, 457, 313, 275, 361, 306,
	423, 320, 0, 450, 513, 451, 572, 575, 573, 574,
	353, 316, 317, 387, 321, 331, 375, 422, 359, 380,
	273, 413, 388, 335, 499, 526, 823, 797, 822, 824,
	825, 821, 826, 827, 808, 707, 0, 755, 819, 818,
	820, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 554, 553, 552, 551, 550, 549, 548, 547,
	0, 0, 496, 400, 285, 250, 281, 282, 289, 593,
	590, 404, 594, 0, 255, 477, 329, 0, 370, 303,
	541, 542, 786, 762, 763, 764, 704, 765, 759, 760,
	705, 761, 787, 753, 783, 784, 732, 756, 766, 782,
	767, 785, 788, 789, 828, 829, 773, 757, 222, 830,
	770, 790, 781, 780, 768, 754, 791, 792, 739, 734,
	771, 772, 758, 774, 775, 776, 706, 735, 736, 737,
	738, 0, 0, 0, 429, 430, 431, 453, 415, 475,
	591, 0, 0, 0, 0, 0, 0, 0, 525, 537,
	571, 0, 580, 581, 583, 585, 777, 749, 597, 467,
	577, 0, 0, 0, 0, 0, 358, 0, 481, 514,
	503, 586, 469, 0, 0, 0, 0, 0, 0, 702,
	0, 0, 0, 298, 0, 0, 328, 518, 500, 510,
	501, 486, 487, 488, 495, 308, 489, 490, 491, 463,
	492, 464, 493, 494, 740, 517, 468, 389, 342, 535,
	534, 0, 0, 802, 810, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 695, 0, 0, 730, 779,
	778, 717, 727, 0, 0, 271, 197, 465, 582, 466,
	718, 0, 726, 719, 723, 722, 720, 721, 0, 794,
	0, 0, 0, 0, 0, 0, 687, 699, 0, 703,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 696, 697, 1428, 0, 0, 0, 750,
	0, 698, 0, 0, 745, 724, 728, 0, 0, 0,
	0, 261, 394, 411, 272, 385, 424, 277, 392, 267,
	357, 381, 0, 0, 263, 409, 391, 339, 318, 319,
	262, 0, 376, 296, 310, 293, 355, 725, 748, 752,
	292, 816, 746, 419, 265, 0, 418, 354, 405, 410,
	340, 334, 264, 407, 338, 333, 322, 300, 817, 323,
	324, 314, 366, 332, 367, 315, 344, 343, 345, 0,
	0, 0, 0, 0, 447, 448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 576, 743,
	0, 579, 0, 421, 0, 0, 800, 0, 0, 0,
	393, 0, 0, 325, 0, 0, 0, 747, 0, 379,
	360, 813, 0, 0, 377, 330, 406, 368, 412, 395,
	420, 373, 369, 256, 396, 295, 341, 268, 270, 290,
	297, 299, 301, 302, 350, 351, 363, 384, 397, 398,
	399, 294, 278, 378, 279, 312, 280, 257, 286, 284,
	287, 386, 288, 259, 364, 403, 0, 307, 374, 337,
	260, 336, 365, 402, 401, 269, 428, 434, 435, 522,
	0, 440, 600, 601, 602, 449, 454, 455, 456, 458,
	459, 460, 461, 523, 540, 507, 478, 442, 531, 474,
	479, 543, 0, 0, 0, 433, 326, 327, 0, 305,
	253, 254, 596, 798, 356, 545, 578, 470, 0, 812,
	793, 795, 796, 799, 803, 804, 805, 806, 807, 809,
	811, 815, 595, 0, 524, 539, 598, 538, 592, 362,
	0, 383, 536, 483, 0, 528, 502, 0, 529, 498,
	533, 0, 472, 0, 390, 414, 426, 443, 446, 473,
	558, 559, 560, 258, 445, 562, 563, 564, 565, 566,
	567, 568, 561, 814, 505, 482, 508, 425, 485, 484,
	0, 0, 519, 751, 520, 521, 346, 347, 348, 349,
	801, 546, 276, 444, 372, 0, 506, 0, 0, 0,
	0, 0, 0, 0, 0, 511, 512, 509, 603, 0,
	569, 570, 0, 0, 438, 439, 304, 311, 457, 313,
	275, 361, 306, 423, 320, 0, 450, 513, 451, 572,
	575, 573, 574, 353, 316, 317, 387, 321, 331, 375,
	422, 359, 380, 273, 413, 388, 335, 499, 526, 823,
	797, 822, 824, 825, 821, 826, 827, 808, 707, 0,
	755, 819, 818, 820, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 554, 553, 552, 551, 550,
	549, 548, 547, 0, 0, 496, 400, 285, 250, 281,
	282, 289, 593, 590, 404, 594, 0, 255, 477, 329,
	0, 370, 303, 541, 542, 786, 762, 763, 764, 704,
	765, 759, 760, 705, 761, 787, 753, 783, 784, 732,
	756, 766, 782, 767, 785, 788, 789, 828, 829, 773,
	757, 222, 830, 770, 790, 781, 780, 768, 754, 791,
	792, 739, 734, 771, 772, 758, 774, 775, 776, 706,
	735, 736, 737, 738, 0, 0, 0, 429, 430, 431,
	453, 415, 475, 591, 0, 0, 0, 0, 0, 0,
	0, 525, 537, 571, 0, 580, 581, 583, 585, 777,
	0, 597, 467, 577, 749, 0, 0, 2035, 0, 0,
	0, 0, 0, 358, 0, 481, 514, 503, 586, 469,
	0, 0, 0, 0, 0, 0, 702, 0, 0, 0,
	298, 0, 0, 328, 518, 500, 510, 501, 486, 487,
	488, 495, 308, 489, 490, 491, 463, 492, 464, 493,
	494, 740, 517, 468, 389, 342, 535, 534, 0, 0,
	802, 810, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 695, 0, 0, 730, 779, 778, 717, 727,
	0, 0, 271, 197, 465, 582, 466, 718, 0, 726,
	719, 723, 722, 720, 721, 0, 794, 0, 0, 0,
	0, 0, 0, 687, 699, 0, 703, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	696, 697, 0, 0, 0, 0, 750, 0, 698, 0,
	0, 745, 724, 728, 0, 0, 0, 0, 261, 394,
	411, 272, 385, 424, 277, 392, 267, 357, 381, 0,
	0, 263, 409, 391, 339, 318, 319, 262, 0, 376,
	296, 310, 293, 355, 725, 748, 752, 292, 816, 746,
	419, 265, 0, 418, 354, 405, 410, 340, 334, 264,
	407, 338, 333, 322, 300, 817, 323, 324, 314, 366,
	332, 367, 315, 344, 343, 345, 0, 0, 0, 0,
	0, 447, 448, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 576, 743, 0, 579, 0,
	421, 0, 0, 800, 0, 0, 0, 393, 0, 0,
	325, 0, 0, 0, 747, 0, 379, 360, 813, 0,
	0, 377, 330, 406, 368, 412, 395, 420, 373, 369,
	256, 396, 295, 341, 268, 270, 290, 297, 299, 301,
	302, 350, 351, 363, 384, 397, 398, 399, 294, 278,
	378, 279, 312, 280, 257, 286, 284, 287, 386, 288,
	259, 364, 403, 0, 307, 374, 337, 260, 336, 365,
	402, 401, 269, 428, 434, 435, 522, 0, 440, 600,
	601, 602, 449, 454, 455, 456, 458, 459, 460, 461,
	523, 540, 507, 478, 442, 531, 474, 479, 543, 0,
	0, 0, 433, 326, 327, 0, 305, 253, 254, 596,
	798, 356, 545, 578, 470, 0, 812, 793, 795, 796,
	799, 803, 804, 805, 806, 807, 809, 811, 815, 595,
	0, 524, 539, 598, 538, 592, 362, 0, 383, 536,
	483, 0, 528, 502, 0, 529, 498, 533, 0, 472,
	0, 390, 414, 426, 443, 446, 473, 558, 559, 560,
	258, 445, 562, 563, 564, 565, 566, 567, 568, 561,
	814, 505, 482, 508, 425, 485, 484, 0, 0, 519,
	751, 520, 521, 346, 347, 348, 349, 801, 546, 276,
	444, 372, 0, 506, 0, 0, 0, 0, 0, 0,
	0, 0, 511, 512, 509, 603, 0, 569, 570, 0,
	0, 438, 439, 304, 311, 457, 313, 275, 361, 306,
	423, 320, 0, 450, 513, 451, 572, 575, 573, 574,
	353, 316, 317, 387, 321, 331, 375, 422, 359, 380,
	273, 413, 388, 335, 499, 526, 823, 797, 822, 824,
	825, 821, 826, 827, 808, 707, 0, 755, 819, 818,
	820, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 554, 553, 552, 551, 550, 549, 548, 547,
	0, 0, 496, 400, 285, 250, 281, 282, 289, 593,
	590, 404, 594, 0, 255, 477, 329, 0, 370, 303,
	541, 542, 786, 762, 763, 764, 704, 765, 759, 760,
	705, 761, 787, 753, 783, 784, 732, 756, 766, 782,
	767, 785, 788, 789, 828, 829, 773, 757, 222, 830,
	770, 790, 781, 780, 768, 754, 791, 792, 739, 734,
	771, 772, 758, 774, 775, 776, 706, 735, 736, 737,
	738, 0, 0, 0, 429, 430, 431, 453, 415, 475,
	591, 0, 0, 0, 0, 0, 0, 0, 525, 537,
	571, 0, 580, 581, 583, 585, 777, 749, 597, 467,
	577, 0, 0, 0, 0, 0, 358, 0, 481, 514,
	503, 586, 469, 0, 0, 0, 0, 0, 0, 702,
	0, 0, 0, 298, 0, 0, 328, 518, 500, 510,
	501, 486, 487, 488, 495, 308, 489, 490, 491, 463,
	492, 464, 493, 494, 740, 517, 468, 389, 342, 535,
	534, 0, 0, 802, 810, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 695, 0, 0, 730, 779,
	778, 717, 727, 0, 0, 271, 197, 465, 582, 466,
	718, 0, 726, 719, 723, 722, 720, 721, 0, 794,
	0, 0, 0, 0, 0, 0, 687, 699, 0, 703,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 696, 697, 1678, 0, 0, 0, 750,
	0, 698, 0, 0, 745, 724, 728, 0, 0, 0,
	0, 261, 394, 411, 272, 385, 424, 277, 392, 267,
	357, 381, 0, 0, 263, 409, 391, 339, 318, 319,
	262, 0, 376, 296, 310, 293, 355, 725, 748, 752,
	292, 816, 746, 419, 265, 0, 418, 354, 405, 410,
	340, 334, 264, 407, 338, 333, 322, 300, 817, 323,
	324, 314, 366, 332, 367, 315, 344, 343, 345, 0,
	0, 0, 0, 0, 447, 448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 576, 743,
	0, 579, 0, 421, 0, 0, 800, 0, 0, 0,
	393, 0, 0, 325, 0, 0, 0, 747, 0, 379,
	360, 813, 0, 0, 377, 330, 406, 368, 412, 395,
	420, 373, 369, 256, 396, 295, 341, 268, 270, 290,
	297, 299, 301, 302, 350, 351, 363, 384, 397, 398,
	399, 294, 278, 378, 279, 312, 280, 257, 286, 284,
	287, 386, 288, 259, 364, 403, 0, 307, 374, 337,
	260, 336, 365, 402, 401, 269, 428, 434, 435, 522,
	0, 440, 600, 601, 602, 449, 454, 455, 456, 458,
	459, 460, 461, 523, 540, 507, 478, 442, 531, 474,
	479, 543, 0, 0, 0, 433, 326, 327, 0, 305,
	253, 254, 596, 798, 356, 545, 578, 470, 0, 812,
	793, 795, 796, 799, 803, 804, 805, 806, 807, 809,
	811, 815, 595, 0, 524, 539, 598, 538, 592, 362,
	0, 383, 536, 483, 0, 528, 502, 0, 529, 498,
	533, 0, 472, 0, 390, 414, 426, 443, 446, 473,
	558, 559, 560, 258, 445, 562, 563, 564, 565, 566,
	567, 568, 561, 814, 505, 482, 508, 425, 485, 484,
	0, 0, 519, 751, 520, 521, 346, 347, 348, 349,
	801, 546, 276, 444, 372, 0, 506, 0, 0, 0,
	0, 0, 0, 0, 0, 511, 512, 509, 603, 0,
	569, 570, 0, 0, 438, 439, 304, 311, 457, 313,
	275, 361, 306, 423, 320, 0, 450, 513, 451, 572,
	575, 573, 574, 353, 316, 317, 387, 321, 331, 375,
	422, 359, 380, 273, 413, 388, 335, 499, 526, 823,
	797, 822, 824, 825, 821, 826, 827, 808, 707, 0,
	755, 819, 818, 820, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 554, 553, 552, 551, 550,
	549, 548, 547, 0, 0, 496, 400, 285, 250, 281,
	282, 289, 593, 590, 404, 594, 0, 255, 477, 329,
	0, 370, 303, 541, 542, 786, 762, 763, 764, 704,
	765, 759, 760, 705, 761, 787, 753, 783, 784, 732,
	756, 766, 782, 767, 785, 788, 789, 828, 829, 773,
	757, 222, 830, 770, 790, 781, 780, 768, 754, 791,
	792, 739, 734, 771, 772, 758, 774, 775, 776, 706,
	735, 736, 737, 738, 0, 0, 0, 429, 430, 431,
	453, 415, 475, 591, 0, 0, 0, 0, 0, 0,
	0, 525, 537, 571, 0, 580, 581, 583, 585, 777,
	749, 597, 467, 577, 0, 0, 0, 0, 0, 358,
	0, 481, 514, 503, 586, 469, 0, 0, 0, 0,
	0, 0, 702, 0, 0, 0, 298, 0, 0, 328,
	518, 500, 510, 501, 486, 487, 488, 495, 308, 489,
	490, 491, 463, 492, 464, 493, 494, 740, 517, 468,
	389, 342, 535, 534, 0, 0, 802, 810, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 695, 0,
	0, 730, 779, 778, 717, 727, 0, 0, 271, 197,
	465, 582, 466, 718, 0, 726, 719, 723, 722, 720,
	721, 0, 794, 0, 0, 0, 0, 0, 0, 687,
	699, 0, 703, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 696, 697, 0, 0,
	0, 0, 750, 0, 698, 0, 0, 745, 724, 728,
	0, 0, 0, 0, 261, 394, 411, 272, 385, 424,
	277, 392, 267, 357, 381, 0, 0, 263, 409, 391,
	339, 318, 319, 262, 0, 376, 296, 310, 293, 355,
	725, 748, 752, 292, 816, 746, 419, 265, 0, 418,
	354, 405, 410, 340, 334, 264, 407, 338, 333, 322,
	300, 817, 323, 324, 314, 366, 332, 367, 315, 344,
	343, 345, 0, 0, 0, 0, 0, 447, 448, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 576, 743, 0, 579, 0, 421, 0, 0, 800,
	0, 0, 0, 393, 0, 0, 325, 0, 0, 0,
	747, 0, 379, 360, 813, 0, 0, 377, 330, 406,
	368, 412, 395, 420, 373, 369, 256, 396, 295, 341,
	268, 270, 290, 297, 299, 301, 302, 350, 351, 363,
	384, 397, 398, 399, 294, 278, 378, 279, 312, 280,
	257, 286, 284, 287, 386, 288, 259, 364, 403, 0,
	307, 374, 337, 260, 336, 365, 402, 401, 269, 428,
	434, 435, 522, 0, 440, 600, 601, 602, 449, 454,
	455, 456, 458, 459, 460, 461, 523, 540, 507, 478,
	442, 531, 474, 479, 543, 0, 0, 0, 433, 326,
	327, 0, 305, 253, 254, 596, 798, 356, 545, 578,
	470, 0, 812, 793, 795, 796, 799, 803, 804, 805,
	806, 807, 809, 811, 815, 595, 0, 524, 539, 598,
	538, 592, 362, 0, 383, 536, 483, 0, 528, 502,
	0, 529, 498, 533, 0, 472, 0, 390, 414, 426,
	443, 446, 473, 558, 559, 560, 258, 445, 562, 563,
	564, 565, 566, 567, 568, 561, 814, 505, 482, 508,
	425, 485, 484, 0, 0, 519, 751, 520, 521, 346,
	347, 348, 349, 801, 546, 276, 444, 372, 0, 506,
	0, 0, 0, 0, 0, 0, 0, 0, 511, 512,
	509, 603, 0, 569, 570, 0, 0, 438, 439, 304,
	311, 457, 313, 275, 361, 306, 423, 320, 0, 450,
	513, 451, 572, 575, 573, 574, 353, 316, 317, 387,
	321, 331, 375, 422, 359, 380, 273, 413, 388, 335,
	499, 526, 823, 797, 822, 824, 825, 821, 826, 827,
	808, 707, 0, 755, 819, 818, 820, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 554, 553,
	552, 551, 550, 549, 548, 547, 0, 0, 496, 400,
	285, 250, 281, 282, 289, 593, 590, 404, 594, 0,
	255, 477, 329, 0, 370, 303, 541, 542, 786, 762,
	763, 764, 704, 765, 759, 760, 705, 761, 787, 753,
	783, 784, 732, 756, 766, 782, 767, 785, 788, 789,
	828, 829, 773, 757, 222, 830, 770, 790, 781, 780,
	768, 754, 791, 792, 739, 734, 771, 772, 758, 774,
	775, 776, 706, 735, 736, 737, 738, 0, 0, 0,
	429, 430, 431, 453, 415, 475, 591, 0, 0, 0,
	0, 0, 0, 0, 525, 537, 571, 0, 580, 581,
	583, 585, 777, 749, 597, 467, 577, 0, 0, 0,
	0, 0, 358, 0, 481, 514, 503, 586, 469, 0,
	0, 0, 0, 0, 0, 702, 0, 0, 0, 298,
	0, 0, 328, 518, 500, 510, 501, 486, 487, 488,
	495, 308, 489, 490, 491, 463, 492, 464, 493, 494,
	740, 517, 468, 389, 342, 535, 534, 0, 0, 802,
	810, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 695, 0, 0, 730, 779, 778, 717, 727, 0,
	0, 271, 197, 465, 582, 466, 2461, 0, 726, 2462,
	723, 722, 720, 721, 0, 794, 0, 0, 0, 0,
	0, 0, 687, 699, 0, 703, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 696,
	697, 0, 0, 0, 0, 750, 0, 698, 0, 0,
	745, 724, 728, 0, 0, 0, 0, 261, 394, 411,
	272, 385, 424, 277, 392, 267, 357, 381, 0, 0,
	263, 409, 391, 339, 318, 319, 262, 0, 376, 296,
	310, 293, 355, 725, 748, 752, 292, 816, 746, 419,
	265, 0, 418, 354, 405, 410, 340, 334, 264, 407,
	338, 333, 322, 300, 817, 323, 324, 314, 366, 332,
	367, 315, 344, 343, 345, 0, 0, 0, 0, 0,
	447, 448, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 576, 743, 0, 579, 0, 421,
	0, 0, 800, 0, 0, 0, 393, 0, 0, 325,
	0, 0, 0, 747, 0, 379, 360, 813, 0, 0,
	377, 330, 406, 368, 412, 395, 420, 373, 369, 256,
	396, 295, 341, 268, 270, 290, 297, 299, 301, 302,
	350, 351, 363, 384, 397, 398, 399, 294, 278, 378,
	279, 312, 280, 257, 286, 284, 287, 386, 288, 259,
	364, 403, 0, 307, 374, 337, 260, 336, 365, 402,
	401, 269, 428, 434, 435, 522, 0, 440, 600, 601,
	602, 449, 454, 455, 456, 458, 459, 460, 461, 523,
	540, 507, 478, 442, 531, 474, 479, 543, 0, 0,
	0, 433, 326, 327, 0, 305, 253, 254, 596, 798,
	356, 545, 578, 470, 0, 812, 793, 795, 796, 799,
	803, 804, 805, 806, 807, 809, 811, 815, 595, 0,
	524, 539, 598, 538, 592, 362, 0, 383, 536, 483,
	0, 528, 502, 0, 529, 498, 533, 0, 472, 0,
	390, 414, 426, 443, 446, 473, 558, 559, 560, 258,
	445, 562, 563, 564, 565, 566, 567, 568, 561, 814,
	505, 482, 508, 425, 485, 484, 0, 0, 519, 751,
	520, 521, 346, 347, 348, 349, 801, 546, 276, 444,
	372, 0, 506, 0, 0, 0, 0, 0, 0, 0,
	0, 511, 512, 509, 603, 0, 569, 570, 0, 0,
	438, 439, 304, 311, 457, 313, 275, 361, 306, 423,
	320, 0, 450, 513, 451, 572, 575, 573, 574, 353,
	316, 317, 387, 321, 331, 375, 422, 359, 380, 273,
	413, 388, 335, 499, 526, 823, 797, 822, 824, 825,
	821, 826, 827, 808, 707, 0, 755, 819, 818, 820,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 554, 553, 552, 551, 550, 549, 548, 547, 0,
	0, 496, 400, 285, 250, 281, 282, 289, 593, 590,
	404, 594, 0, 255, 477, 329, 0, 370, 303, 541,
	542, 786, 762, 763, 764, 704, 765, 759, 760, 705,
	761, 787, 753, 783, 784, 732, 756, 766, 782, 767,
	785, 788, 789, 828, 829, 773, 757, 222, 830, 770,
	790, 781, 780, 768, 754, 791, 792, 739, 734, 771,
	772, 758, 774, 775, 776, 706, 735, 736, 737, 738,
	0, 0, 0, 429, 430, 431, 453, 415, 475, 591,
	0, 0, 0, 0, 0, 0, 0, 525, 537, 571,
	0, 580, 581, 583, 585, 777, 749, 597, 467, 577,
	0, 0, 0, 0, 0, 358, 0, 481, 514, 503,
	586, 469, 0, 0, 1557, 0, 0, 0, 702, 0,
	0, 0, 298, 0, 0, 328, 518, 500, 510, 501,
	486, 487, 488, 495, 308, 489, 490, 491, 463, 492,
	464, 493, 494, 740, 517, 468, 389, 342, 535, 534,
	0, 0, 802, 810, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 695, 0, 0, 730, 779, 778,
	717, 727, 0, 0, 271, 197, 465, 582, 466, 718,
	0, 726, 719, 723, 722, 720, 721, 0, 794, 0,
	0, 0, 0, 0, 0, 0, 699, 0, 703, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 696, 697, 0, 0, 0, 0, 750, 0,
	698, 0, 0, 745, 724, 728, 0, 0, 0, 0,
	261, 394, 411, 272, 385, 424, 277, 392, 267, 357,
	381, 0, 0, 263, 409, 391, 339, 318, 319, 262,
	0, 376, 296, 310, 293, 355, 725, 748, 752, 292,
	816, 746, 419, 265, 0, 418, 354, 405, 410, 340,
	334, 264, 407, 338, 333, 322, 300, 817, 323, 324,
	314, 366, 332, 367, 315, 344, 343, 345, 0, 0,
	0, 0, 0, 447, 448, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 576, 743, 0,
	579, 0, 421, 0, 0, 800, 0, 0, 0, 393,
	0, 0, 325, 0, 0, 0, 747, 0, 379, 360,
	813, 0, 0, 377, 330, 406, 368, 412, 395, 420,
	373, 369, 256, 396, 295, 341, 268, 270, 290, 297,
	299, 301, 302, 350, 351, 363, 384, 397, 398, 399,
	294, 278, 378, 279, 312, 280, 257, 286, 284, 287,
	386, 288, 259, 364, 403, 0, 307, 374, 337, 260,
	336, 365, 402, 401, 269, 428, 1558, 1559, 522, 0,
	440, 600, 601, 602, 449, 454, 455, 456, 458, 459,
	460, 461, 523, 540, 507, 478, 442, 531, 474, 479,
	543, 0, 0, 0, 433, 326, 327, 0, 305, 253,
	254, 596, 798, 356, 545, 578, 470, 0, 812, 793,
	795, 796, 799, 803, 804, 805, 806, 807, 809, 811,
	815, 595, 0, 524, 539, 598, 538, 592, 362, 0,
	383, 536, 483, 0, 528, 502, 0, 529, 498, 533,
	0, 472, 0, 390, 414, 426, 443, 446, 473, 558,
	559, 560, 258, 445, 562, 563, 564, 565, 566, 567,
	568, 561, 814, 505, 482, 508, 425, 485, 484, 0,
	0, 519, 751, 520, 521, 346, 347, 348, 349, 801,
	546, 276, 444, 372, 0, 506, 0, 0, 0, 0,
	0, 0, 0, 0, 511, 512, 509, 603, 0, 569,
	570, 0, 0, 438, 439, 304, 311, 457, 313, 275,
	361, 306, 423, 320, 0, 450, 513, 451, 572, 575,
	573, 574, 353, 316, 317, 387, 321, 331, 375, 422,
	359, 380, 273, 413, 388, 335, 499, 526, 823, 797,
	822, 824, 825, 821, 826, 827, 808, 707, 0, 755,
	819, 818, 820, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 554, 553, 552, 551, 550, 549,
	548, 547, 0, 0, 496, 400, 285, 250, 281, 282,
	289, 593, 590, 404, 594, 0, 255, 477, 329, 0,
	370, 303, 541, 542, 786, 762, 763, 764, 704, 765,
	759, 760, 705, 761, 787, 753, 783, 784, 732, 756,
	766, 782, 767, 785, 788, 789, 828, 829, 773, 757,
	222, 830, 770, 790, 781, 780, 768, 754, 791, 792,
	739, 734, 771, 772, 758, 774, 775, 776, 706, 735,
	736, 737, 738, 0, 0, 0, 429, 430, 431, 453,
	415, 475, 591, 0, 0, 0, 0, 0, 0, 0,
	525, 537, 571, 0, 580, 581, 583, 585, 777, 749,
	597, 467, 577, 0, 0, 0, 0, 0, 358, 0,
	481, 514, 503, 586, 469, 0, 0, 0, 0, 0,
	0, 702, 0, 0, 0, 298, 0, 0, 328, 518,
	500, 510, 501, 486, 487, 488, 495, 308, 489, 490,
	491, 463, 492, 464, 493, 494, 740, 517, 468, 389,
	342, 535, 534, 0, 0, 802, 810, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 695, 0, 0,
	730, 779, 778, 717, 727, 0, 0, 271, 197, 465,
	582, 466, 718, 0, 726, 719, 723, 722, 720, 721,
	0, 794, 0, 0, 0, 0, 0, 0, 0, 699,
	0, 703, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 696, 697, 0, 0, 0,
	0, 750, 0, 698, 0, 0, 745, 724, 728, 0,
	0, 0, 0, 261, 394, 411, 272, 385, 424, 277,
	392, 267, 357, 381, 0, 0, 263, 409, 391, 339,
	318, 319, 262, 0, 376, 296, 310, 293, 355, 725,
	748, 752, 292, 816, 746, 419, 265, 0, 418, 354,
	405, 410, 340, 334, 264, 407, 338, 333, 322, 300,
	817, 323, 324, 314, 366, 332, 367, 315, 344, 343,
	345, 0, 0, 0, 0, 0, 447, 448, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	576, 743, 0, 579, 0, 421, 0, 0, 800, 0,
	0, 0, 393, 0, 0, 325, 0, 0, 0, 747,
	0, 379, 360, 813, 0, 0, 377, 330, 406, 368,
	412, 395, 420, 373, 369, 256, 396, 295, 341, 268,
	270, 290, 297, 299, 301, 302, 350, 351, 363, 384,
	397, 398, 399, 294, 278, 378, 279, 312, 280, 257,
	286, 284, 287, 386, 288, 259, 364, 403, 0, 307,
	374, 337, 260, 336, 365, 402, 401, 269, 428, 434,
	435, 522, 0, 440, 600, 601, 602, 449, 454, 455,
	456, 458, 459, 460, 461, 523, 540, 507, 478, 442,
	531, 474, 479, 543, 0, 0, 0, 433, 326, 327,
	0, 305, 253, 254, 596, 798, 356, 545, 578, 470,
	0, 812, 793, 795, 796, 799, 803, 804, 805, 806,
	807, 809, 811, 815, 595, 0, 524, 539, 598, 538,
	592, 362, 0, 383, 536, 483, 0, 528, 502, 0,
	529, 498, 533, 0, 472, 0, 390, 414, 426, 443,
	446, 473, 558, 559, 560, 258, 445, 562, 563, 564,
	565, 566, 567, 568, 561, 814, 505, 482, 508, 425,
	485, 484, 0, 0, 519, 751, 520, 521, 346, 347,
	348, 349, 801, 546, 276, 444, 372, 0, 506, 0,
	0, 0, 0, 0, 0, 0, 0, 511, 512, 509,
	603, 0, 569, 570, 0, 0, 438, 439, 304, 311,
	457, 313, 275, 361, 306, 423, 320, 0, 450, 513,
	451, 572, 575, 573, 574, 353, 316, 317, 387, 321,
	331, 375, 422, 359, 380, 273, 413, 388, 335, 499,
	526, 823, 797, 822, 824, 825, 821, 826, 827, 808,
	707, 0, 755, 819, 818, 820, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 554, 553, 552,
	551, 550, 549, 548, 547, 0, 0, 496, 400, 285,
	250, 281, 282, 289, 593, 590, 404, 594, 0, 255,
	477, 329, 0, 370, 303, 541, 542, 786, 762, 763,
	764, 704, 765, 759, 760, 705, 761, 787, 753, 783,
	784, 732, 756, 766, 782, 767, 785, 788, 789, 828,
	829, 773, 757, 222, 830, 770, 790, 781, 780, 768,
	754, 791, 792, 739, 734, 771, 772, 758, 774, 775,
	776, 706, 735, 736, 737, 738, 0, 0, 0, 429,
	430, 431, 453, 415, 475, 591, 0, 0, 0, 0,
	0, 0, 0, 525, 537, 571, 0, 580, 581, 583,
	585, 777, 749, 597, 467, 577, 0, 0, 0, 0,
	0, 358, 0, 481, 514, 503, 586, 469, 0, 0,
	0, 0, 0, 0, 702, 0, 0, 0, 298, 0,
	0, 328, 518, 500, 510, 501, 486, 487, 488, 495,
	308, 489, 490, 491, 463, 492, 464, 493, 494, 740,
	517, 468, 389, 342, 535, 534, 0, 0, 802, 810,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 730, 779, 778, 717, 727, 0, 0,
	271, 197, 465, 582, 466, 718, 0, 726, 719, 723,
	722, 720, 721, 0, 794, 0, 0, 0, 0, 0,
	0, 687, 699, 0, 703, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 696, 697,
	0, 0, 0, 0, 750, 0, 698, 0, 0, 745,
	724, 728, 0, 0, 0, 0, 261, 394, 411, 272,
	385, 424, 277, 392, 267, 357, 381, 0, 0, 263,
	409, 391, 339, 318, 319, 262, 0, 376, 296, 310,
	293, 355, 725, 748, 752, 292, 816, 746, 419, 265,
	0, 418, 354, 405, 410, 340, 334, 264, 407, 338,
	333, 322, 300, 817, 323, 324, 314, 366, 332, 367,
	315, 344, 343, 345, 0, 0, 0, 0, 0, 447,
	448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 576, 743, 0, 579, 0, 421, 0,
	0, 800, 0, 0, 0, 393, 0, 0, 325, 0,
	0, 0, 747, 0, 379, 360, 813, 0, 0, 377,
	330, 406, 368, 412, 395, 420, 373, 369, 256, 396,
	295, 341, 268, 270, 290, 297, 299, 301, 302, 350,
	351, 363, 384, 397, 398, 399, 294, 278, 378, 279,
	312, 280, 257, 286, 284, 287, 386, 288, 259, 364,
	403, 0, 307, 374, 337, 260, 336, 365, 402, 401,
	269, 428, 434, 435, 522, 0, 440, 600, 601, 602,
	449, 454, 455, 456, 458, 459, 460, 461, 523, 540,
	507, 478, 442, 531, 474, 479, 543, 0, 0, 0,
	433, 326, 327, 0, 305, 253, 254, 596, 798, 356,
	545, 578, 470, 0, 812, 793, 795, 796, 799, 803,
	804, 805, 806, 807, 809, 811, 815, 595, 0, 524,
	539, 598, 538, 592, 362, 0, 383, 536, 483, 0,
	528, 502, 0, 529, 498, 533, 0, 472, 0, 390,
	414, 426, 443, 446, 473, 558, 559, 560, 258, 445,
	562, 563, 564, 565, 566, 567, 568, 561, 814, 505,
	482, 508, 425, 485, 484, 0, 0, 519, 751, 520,
	521, 346, 347, 348, 349, 801, 546, 276, 444, 372,
	0, 506, 0, 0, 0, 0, 0, 0, 0, 0,
	511, 512, 509, 603, 0, 569, 570, 0, 0, 438,
	439, 304, 311, 457, 313, 275, 361, 306, 423, 320,
	0, 450, 513, 451, 572, 575, 573, 574, 353, 316,
	317, 387, 321, 331, 375, 422, 359, 380, 273, 413,
	388, 335, 499, 526, 823, 797, 822, 824, 825, 821,
	826, 827, 808, 707, 0, 755, 819, 818, 820, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	554, 553, 552, 551, 550, 549, 548, 547, 0, 0,
	496, 400, 285, 250, 281, 282, 289, 593, 590, 404,
	594, 0, 255, 477, 329, 0, 370, 303, 541, 542,
	786, 762, 763, 764, 704, 765, 759, 760, 705, 761,
	787, 753, 783, 784, 732, 756, 766, 782, 767, 785,
	788, 789, 828, 829, 773, 757, 222, 830, 770, 790,
	781, 780, 768, 754, 791, 792, 739, 734, 771, 772,
	758, 774, 775, 776, 706, 735, 736, 737, 738, 0,
	0, 0, 429, 430, 431, 453, 415, 475, 591, 0,
	0, 0, 0, 0, 0, 0, 525, 537, 571, 0,
	580, 581, 583, 585, 777, 0, 597, 467, 577, 174,
	51, 163, 138, 0, 0, 0, 0, 0, 0, 358,
	0, 481, 514, 503, 586, 469, 0, 164, 0, 0,
	0, 0, 0, 0, 156, 0, 298, 0, 165, 328,
	518, 500, 510, 501, 486, 487, 488, 495, 308, 489,
	490, 491, 463, 492, 464, 493, 494, 115, 517, 468,
	389, 342, 535, 534, 0, 0, 0, 0, 0, 0,
	0, 0, 103, 0, 0, 0, 0, 0, 168, 0,
	0, 196, 0, 0, 0, 0, 0, 0, 271, 197,
	465, 582, 466, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 274, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 476, 0,
	0, 0, 0, 0, 261, 394, 411, 272, 385, 424,
	277, 392, 267, 357, 381, 0, 0, 263, 409, 391,
	339, 318, 319, 262, 0, 376, 296, 310, 293, 355,
	0, 408, 436, 292, 427, 0, 419, 265, 0, 418,
	354, 405, 410, 340, 334, 264, 407, 338, 333, 322,
	300, 452, 323, 324, 314, 366, 332, 367, 315, 344,
	343, 345, 0, 0, 0, 0, 0, 447, 448, 0,
	0, 0, 0, 0, 0, 137, 162, 172, 0, 101,
	0, 576, 0, 0, 579, 0, 421, 0, 0, 189,
	0, 0, 0, 393, 0, 0, 325, 161, 155, 154,
	437, 0, 379, 360, 201, 0, 0, 377, 330, 406,
	368, 412, 395, 420, 373, 369, 256, 396, 295, 341,
	268, 270, 290, 297, 299, 301, 302, 350, 351, 363,
	384, 397, 398, 399, 294, 278, 378, 279, 312, 280,
	257, 286, 284, 287, 386, 288, 259, 364, 403, 0,
	307, 374, 337, 260, 336, 365, 402, 401, 269, 428,
	434, 435, 522, 0, 440, 555, 556, 557, 449, 454,
	455, 456, 458, 459, 460, 461, 523, 540, 507, 478,
	442, 531, 474, 479, 543, 0, 0, 0, 433, 326,
	327, 0, 305, 253, 254, 416, 291, 356, 545, 578,
	470, 0, 532, 471, 480, 283, 504, 516, 515, 352,
	432, 192, 527, 530, 462, 202, 0, 524, 539, 497,
	538, 203, 362, 0, 383, 536, 483, 0, 528, 502,
	0, 529, 498, 533, 0, 472, 0, 390, 414, 426,
	443, 446, 473, 558, 559, 560, 258, 445, 562, 563,
	564, 565, 566, 567, 568, 561, 417, 505, 482, 508,
	425, 485, 484, 0, 0, 519, 441, 520, 521, 346,
	347, 348, 349, 309, 546, 276, 444, 372, 113, 506,
	0, 0, 0, 0, 0, 0, 0, 0, 511, 512,
	509, 200, 0, 569, 570, 0, 0, 438, 439, 304,
	311, 457, 313, 275, 361, 306, 423, 320, 0, 450,
	513, 451, 572, 575, 573, 574, 353, 316, 317, 387,
	321, 331, 375, 422, 359, 380, 273, 413, 388, 335,
	499, 526, 0, 0, 0, 0, 0, 0, 0, 0,
	52, 0, 0, 245, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 554, 553,
	552, 551, 550, 549, 548, 547, 0, 0, 496, 400,
	285, 250, 281, 282, 289, 371, 266, 404, 382, 0,
	255, 477, 329, 139, 370, 303, 541, 542, 206, 207,
	208, 209, 210, 211, 212, 213, 251, 214, 215, 216,
	217, 218, 219, 220, 223, 224, 225, 226, 227, 228,
	229, 230, 544, 221, 222, 231, 232, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 0,
	0, 0, 252, 246, 247, 248, 249, 0, 0, 0,
	429, 430, 431, 453, 415, 475, 204, 39, 190, 193,
	195, 194, 0, 49, 525, 537, 571, 5, 580, 581,
	583, 585, 584, 118, 205, 467, 577, 358, 0, 481,
	514, 503, 586, 469, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 298, 0, 0, 328, 518, 500,
	510, 501, 486, 487, 488, 495, 308, 489, 490, 491,
	463, 492, 464, 493, 494, 0, 517, 468, 389, 342,
	535, 534, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1208, 0, 0, 196,
	0, 0, 717, 727, 0, 0, 271, 197, 465, 582,
	466, 718, 0, 726, 719, 723, 722, 720, 721, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 724, 0, 0, 0,
	0, 0, 261, 394, 411, 272, 385, 424, 277, 392,
	267, 357, 381, 0, 0, 263, 409, 391, 339, 318,
	319, 262, 0, 376, 296, 310, 293, 355, 725, 408,
	436, 292, 427, 0, 419, 265, 0, 418, 354, 405,
	410, 340, 334, 264, 407, 338, 333, 322, 300, 452,
	323, 324, 314, 366, 332, 367, 315, 344, 343, 345,
	0, 0, 0, 0, 0, 447, 448, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 576,
	0, 0, 579, 0, 421, 0, 0, 0, 0, 0,
	0, 393, 0, 0, 325, 0, 0, 0, 437, 0,
	379, 360, 599, 0, 0, 377, 330, 406, 368, 412,
	395, 420, 373, 369, 256, 396, 295, 341, 268, 270,
	290, 297, 299, 301, 302, 350, 351, 363, 384, 397,
	398, 399, 294, 278, 378, 279, 312, 280, 257, 286,
	284, 287, 386, 288, 259, 364, 403, 0, 307, 374,
	337, 260, 336, 365, 402, 401, 269, 428, 434, 435,
	522, 0, 440, 600, 601, 602, 449, 454, 455, 456,
	458, 459, 460, 461, 523, 540, 507, 478, 442, 531,
	474, 479, 543, 0, 0, 0, 433, 326, 327, 0,
	305, 253, 254, 596, 291, 356, 545, 578, 470, 0,
	532, 471, 480, 283, 504, 516, 515, 352, 432, 0,
	527, 530, 462, 595, 0, 524, 539, 598, 538, 592,
	362, 0, 383, 536, 483, 0, 528, 502, 0, 529,
	498, 533, 0, 472, 0, 390, 414, 426, 443, 446,
	473, 558, 559, 560, 258, 445, 562, 563, 564, 565,
	566, 567, 568, 561, 417, 505, 482, 508, 425, 485,
	484, 0, 0, 519, 441, 520, 521, 346, 347, 348,
	349, 309, 546, 276, 444, 372, 0, 506, 0, 0,
	0, 0, 0, 0, 0, 0, 511, 512, 509, 603,
	0, 569, 570, 0, 0, 438, 439, 304, 311, 457,
	313, 275, 361, 306, 423, 320, 0, 450, 513, 451,
	572, 575, 573, 574, 353, 316, 317, 387, 321, 331,
	375, 422, 359, 380, 273, 413, 388, 335, 499, 526,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 245, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 554, 553, 552, 551,
	550, 549, 548, 547, 0, 0, 496, 400, 285, 250,
	281, 282, 289, 593, 590, 404, 594, 0, 255, 477,
	329, 0, 370, 303, 541, 542, 206, 207, 208, 209,
	210, 211, 212, 213, 251, 214, 215, 216, 217, 218,
	219, 220, 223, 224, 225, 226, 227, 228, 229, 230,
	544, 221, 222, 231, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 0, 0, 0,
	252, 246, 247, 248, 249, 0, 0, 0, 429, 430,
	431, 453, 415, 475, 591, 0, 0, 0, 0, 0,
	0, 0, 525, 537, 571, 0, 580, 581, 583, 585,
	584, 0, 597, 467, 577, 174, 51, 163, 138, 0,
	0, 0, 0, 0, 0, 358, 620, 481, 514, 503,
	586, 469, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 328, 518, 500, 510, 501,
	486, 487, 488, 495, 308, 489, 490, 491, 463, 492,
	464, 493, 494, 0, 517, 468, 389, 342, 535, 534,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 625, 0, 0, 196, 0, 0,
	0, 0, 0, 0, 271, 197, 465, 582, 466, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 476, 0, 0, 0, 0, 0,
	261, 394, 411, 272, 385, 424, 277, 392, 267, 357,
	381, 0, 0, 263, 409, 391, 339, 318, 319, 262,
	0, 376, 296, 310, 293, 355, 0, 408, 436, 292,
	427, 0, 419, 265, 0, 418, 354, 405, 410, 340,
	334, 264, 407, 338, 333, 322, 300, 452, 323, 324,
	314, 366, 332, 367, 315, 344, 343, 345, 0, 0,
	0, 0, 0, 447, 448, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 624, 0, 576, 0, 0,
	579, 0, 421, 0, 0, 0, 0, 0, 0, 393,
	0, 0, 325, 0, 0, 0, 437, 0, 379, 360,
	599, 0, 0, 377, 330, 406, 368, 412, 395, 420,
	373, 369, 256, 396, 295, 341, 268, 270, 290, 297,
	299, 301, 302, 350, 351, 363, 384, 397, 398, 399,
	294, 278, 378, 279, 312, 280, 257, 286, 284, 287,
	386, 288, 259, 364, 403, 0, 307, 374, 337, 260,
	336, 365, 402, 401, 269, 428, 434, 435, 522, 0,
	440, 600, 601, 602, 449, 454, 455, 456, 458, 459,
	460, 461, 523, 540, 507, 478, 442, 531, 474, 479,
	543, 0, 0, 0, 433, 326, 327, 0, 305, 253,
	254, 596, 291, 356, 545, 578, 470, 0, 532, 471,
	480, 283, 504, 516, 515, 352, 432, 0, 527, 530,
	462, 595, 0, 524, 539, 598, 538, 592, 362, 0,
	383, 536, 483, 0, 528, 502, 0, 529, 498, 533,
	0, 472, 0, 390, 414, 426, 443, 446, 473, 558,
	559, 560, 258, 445, 562, 563, 564, 565, 566, 567,
	568, 561, 417, 505, 482, 508, 425, 485, 484, 0,
	0, 519, 441, 520, 521, 346, 347, 348, 349, 621,
	623, 276, 444, 372, 633, 506, 0, 0, 0, 0,
	0, 0, 0, 0, 511, 512, 509, 603, 0, 569,
	570, 0, 0, 438, 439, 304, 311, 457, 313, 275,
	361, 306, 423, 320, 0, 450, 513, 451, 572, 575,
	573, 574, 353, 316, 317, 387, 321, 331, 375, 422,
	359, 380, 273, 413, 388, 335, 499, 526, 0, 0,
	0, 0, 0, 0, 0, 0, 52, 0, 0, 245,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 554, 553, 552, 551, 550, 549,
	548, 547, 0, 0, 496, 400, 285, 250, 281, 282,
	289, 593, 590, 404, 594, 0, 255, 477, 329, 139,
	370, 303, 541, 542, 206, 207, 208, 209, 210, 211,
	212, 213, 251, 214, 215, 216, 217, 218, 219, 220,
	223, 224, 225, 226, 227, 228, 229, 230, 544, 221,
	222, 231, 232, 233, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 0, 0, 0, 252, 246,
	247, 248, 249, 0, 0, 0, 429, 430, 431, 453,
	415, 475, 591, 0, 0, 0, 0, 0, 0, 0,
	525, 537, 571, 0, 580, 581, 583, 585, 584, 0,
	597, 467, 577, 358, 0, 481, 514, 503, 586, 469,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	298, 0, 0, 328, 518, 500, 510, 501, 486, 487,
	488, 495, 308, 489, 490, 491, 463, 492, 464, 493,
	494, 0, 517, 468, 389, 342, 535, 534, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 196, 0, 0, 0, 0,
	0, 0, 271, 197, 465, 582, 466, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 274, 2163, 2166, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 476, 0, 0, 0, 0, 0, 261, 394,
	411, 272, 385, 424, 277, 392, 267, 357, 381, 0,
	0, 263, 409, 391, 339, 318, 319, 262, 0, 376,
	296, 310, 293, 355, 0, 408, 436, 292, 427, 0,
	419, 265, 0, 418, 354, 405, 410, 340, 334, 264,
	407, 338, 333, 322, 300, 452, 323, 324, 314, 366,
	332, 367, 315, 344, 343, 345, 0, 0, 0, 0,
	0, 447, 448, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 576, 0, 0, 579, 2167,
	421, 0, 0, 0, 2162, 0, 2161, 393, 2159, 2164,
	325, 0, 0, 0, 437, 0, 379, 360, 599, 0,
	0, 377, 330, 406, 368, 412, 395, 420, 373, 369,
	256, 396, 295, 341, 268, 270, 290, 297, 299, 301,
	302, 350, 351, 363, 384, 397, 398, 399, 294, 278,
	378, 279, 312, 280, 257, 286, 284, 287, 386, 288,
	259, 364, 403, 2165, 307, 374, 337, 260, 336, 365,
	402, 401, 269, 428, 434, 435, 522, 0, 440, 600,
	601, 602, 449, 454, 455, 456, 458, 459, 460, 461,
	523, 540, 507, 478, 442, 531, 474, 479, 543, 0,
	0, 0, 433, 326, 327, 0, 305, 253, 254, 596,
	291, 356, 545, 578, 470, 0, 532, 471, 480, 283,
	504, 516, 515, 352, 432, 0, 527, 530, 462, 595,
	0, 524, 539, 598, 538, 592, 362, 0, 383, 536,
	483, 0, 528, 502, 0, 529, 498, 533, 0, 472,
	0, 390, 414, 426, 443, 446, 473, 558, 559, 560,
	258, 445, 562, 563, 564, 565, 566, 567, 568, 561,
	417, 505, 482, 508, 425, 485, 484, 0, 0, 519,
	441, 520, 521, 346, 347, 348, 349, 309, 546, 276,
	444, 372, 0, 506, 0, 0, 0, 0, 0, 0,
	0, 0, 511, 512, 509, 603, 0, 569, 570, 0,
	0, 438, 439, 304, 311, 457, 313, 275, 361, 306,
	423, 320, 0, 450, 513, 451, 572, 575, 573, 574,
	353, 316, 317, 387, 321, 331, 375, 422, 359, 380,
	273, 413, 388, 335, 499, 526, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 245, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 554, 553, 552, 551, 550, 549, 548, 547,
	0, 0, 496, 400, 285, 250, 281, 282, 289, 593,
	590, 404, 594, 0, 255, 477, 329, 0, 370, 303,
	541, 542, 206, 207, 208, 209, 210, 211, 212, 213,
	251, 214, 215, 216, 217, 218, 219, 220, 223, 224,
	225, 226, 227, 228, 229, 230, 544, 221, 222, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 0, 0, 0, 252, 246, 247, 248,
	249, 0, 0, 0, 429, 430, 431, 453, 415, 475,
	591, 0, 0, 0, 0, 0, 0, 0, 525, 537,
	571, 0, 580, 581, 583, 585, 584, 0, 597, 467,
	577, 358, 0, 481, 514, 503, 586, 469, 0, 1033,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 0,
	0, 328, 518, 500, 510, 501, 486, 487, 488, 495,
	308, 489, 490, 491, 463, 492, 464, 493, 494, 0,
	517, 468, 389, 342, 535, 534, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 196, 0, 0, 0, 0, 0, 0,
	271, 197, 465, 582, 466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1019,
	476, 0, 0, 0, 0, 0, 261, 394, 411, 272,
	385, 424, 277, 392, 267, 357, 381, 0, 0, 2311,
	2314, 2315, 2316, 2317, 2318, 2319, 0, 2324, 2320, 2321,
	2322, 2323, 0, 2306, 2307, 2308, 2309, 1017, 2290, 2312,
	0, 2291, 354, 2292, 2293, 2294, 2295, 2296, 2297, 2298,
	2299, 2300, 2303, 2304, 2301, 2302, 2310, 366, 332, 367,
	315, 344, 343, 345, 1044, 1046, 1048, 1050, 1053, 447,
	448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 576, 0, 0, 579, 0, 421, 0,
	0, 0, 0, 0, 0, 393, 0, 0, 325, 0,
	0, 0, 2305, 0, 379, 360, 599, 0, 0, 377,
	330, 406, 368, 412, 395, 420, 373, 369, 256, 396,
	295, 341, 268, 270, 290, 297, 299, 301, 302, 350,
	351, 363, 384, 397, 398, 399, 294, 278, 378, 279,
	312, 280, 257, 286, 284, 287, 386, 288, 259, 364,
	403, 0, 307, 374, 337, 260, 336, 365, 402, 401,
	269, 428, 434, 435, 522, 0, 440, 600, 601, 602,
	449, 454, 455, 456, 458, 459, 460, 461, 523, 540,
	507, 478, 442, 531, 474, 479, 543, 0, 0, 0,
	433, 326, 327, 0, 305, 253, 254, 596, 291, 356,
	545, 578, 470, 0, 532, 471, 480, 283, 504, 516,
	515, 352, 432, 0, 527, 530, 462, 595, 0, 524,
	539, 598, 538, 592, 362, 0, 383, 536, 483, 0,
	528, 502, 0, 529, 498, 533, 0, 472, 0, 390,
	414, 426, 443, 446, 473, 558, 559, 560, 258, 445,
	562, 563, 564, 565, 566, 567, 568, 561, 417, 505,
	482, 508, 425, 485, 484, 0, 0, 519, 441, 520,
	521, 346, 347, 348, 349, 309, 546, 276, 444, 372,
	0, 506, 0, 0, 0, 0, 0, 0, 0, 0,
	511, 512, 509, 603, 0, 569, 570, 0, 0, 438,
	439, 304, 311, 457, 313, 275, 361, 306, 423, 320,
	0, 450, 513, 451, 572, 575, 573, 574, 353, 316,
	317, 387, 321, 331, 375, 422, 359, 380, 273, 413,
	388, 335, 499, 526, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 245, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	554, 553, 552, 551, 550, 549, 548, 547, 0, 0,
	496, 400, 285, 250, 281, 282, 289, 593, 590, 404,
	594, 0, 255, 2313, 329, 0, 370, 303, 541, 542,
	206, 207, 208, 209, 210, 211, 212, 213, 251, 214,
	215, 216, 217, 218, 219, 220, 223, 224, 225, 226,
	227, 228, 229, 230, 544, 221, 222, 231, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 0, 0, 0, 252, 246, 247, 248, 249, 0,
	0, 0, 429, 430, 431, 453, 415, 475, 591, 0,
	0, 0, 0, 0, 0, 0, 525, 537, 571, 0,
	580, 581, 583, 585, 584, 0, 597, 467, 577, 358,
	0, 481, 514, 503, 586, 469, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 0, 0, 328,
	518, 500, 510, 501, 486, 487, 488, 495, 308, 489,
	490, 491, 463, 492, 464, 493, 494, 0, 517, 468,
	389, 342, 535, 534, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 196, 0, 0, 0, 0, 0, 0, 271, 197,
	465, 582, 466, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 274, 0, 2184, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 476, 0,
	0, 0, 0, 0, 261, 394, 411, 272, 385, 424,
	277, 392, 267, 357, 381, 0, 0, 263, 409, 391,
	339, 318, 319, 262, 0, 376, 296, 310, 293, 355,
	0, 408, 436, 292, 427, 0, 419, 265, 0, 418,
	354, 405, 410, 340, 334, 264, 407, 338, 333, 322,
	300, 452, 323, 324, 314, 366, 332, 367, 315, 344,
	343, 345, 0, 0, 0, 0, 0, 447, 448, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 576, 0, 0, 579, 2183, 421, 0, 0, 0,
	2188, 2186, 0, 393, 0, 2187, 325, 0, 0, 0,
	437, 0, 379, 360, 599, 0, 2181, 377, 330, 406,
	368, 412, 395, 420, 373, 369, 256, 396, 295, 341,
	268, 270, 290, 297, 299, 301, 302, 350, 351, 363,
	384, 397, 398, 399, 294, 278, 378, 279, 312, 280,
	257, 286, 284, 287, 386, 288, 259, 364, 403, 0,
	307, 374, 337, 260, 336, 365, 402, 401, 269, 428,
	434, 435, 522, 0, 440, 600, 601, 602, 449, 454,
	455, 456, 458, 459, 460, 461, 523, 540, 507, 478,
	442, 531, 474, 479, 543, 0, 0, 0, 433, 326,
	327, 0, 305, 253, 254, 596, 291, 356, 545, 578,
	470, 0, 532, 471, 480, 283, 504, 516, 515, 352,
	432, 0, 527, 530, 462, 595, 0, 524, 539, 598,
	538, 592, 362, 0, 383, 536, 483, 0, 528, 502,
	0, 529, 498, 533, 0, 472, 0, 390, 414, 426,
	443, 446, 473, 558, 559, 560, 258, 445, 562, 563,
	564, 565, 566, 567, 568, 561, 417, 505, 482, 508,
	425, 485, 484, 0, 0, 519, 441, 520, 521, 346,
	347, 348, 349, 309, 546, 276, 444, 372, 0, 506,
	0, 0, 0, 0, 0, 0, 0, 0, 511, 512,
	509, 603, 0, 569, 570, 0, 0, 438, 439, 304,
	311, 457, 313, 275, 361, 306, 423, 320, 0, 450,
	513, 451, 572, 575, 573, 574, 353, 316, 317, 387,
	321, 331, 375, 422, 359, 380, 273, 413, 388, 335,
	499, 526, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 245, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 554, 553,
	552, 551, 550, 549, 548, 547, 0, 0, 496, 400,
	285, 250, 281, 282, 289, 593, 590, 404, 594, 0,
	255, 477, 329, 0, 370, 303, 541, 542, 206, 207,
	208, 209, 210, 211, 212, 213, 251, 214, 215, 216,
	217, 218, 219, 220, 223, 224, 225, 226, 227, 228,
	229, 230, 544, 221, 222, 231, 232, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 0,
	0, 0, 252, 246, 247, 248, 249, 0, 0, 0,
	429, 430, 431, 453, 415, 475, 591, 0, 0, 0,
	0, 0, 0, 0, 525, 537, 571, 0, 580, 581,
	583, 585, 584, 0, 597, 467, 577, 358, 0, 481,
	514, 503, 586, 469, 0, 0, 0, 0, 0, 1914,
	0, 0, 0, 0, 298, 0, 0, 328, 518, 500,
	510, 501, 486, 487, 488, 495, 308, 489, 490, 491,
	463, 492, 464, 493, 494, 0, 517, 468, 389, 342,
	535, 534, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 196,
	0, 0, 1915, 0, 0, 0, 271, 197, 465, 582,
	466, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 0, 1140, 1141, 1142, 1139, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 476, 0, 0, 0,
	0, 0, 261, 394, 411, 272, 385, 424, 277, 392,
	267, 357, 381, 0, 0, 263, 409, 391, 339, 318,
	319, 262, 0, 376, 296, 310, 293, 355, 0, 408,
	436, 292, 427, 0, 419, 265, 0, 418, 354, 405,
	410, 340, 334, 264, 407, 338, 333, 322, 300, 452,
	323, 324, 314, 366, 332, 367, 315, 344, 343, 345,
	0, 0, 0, 0, 0, 447, 448, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 576,
	0, 0, 579, 0, 421, 0, 0, 0, 0, 0,
	0, 393, 0, 0, 325, 0, 0, 0, 437, 0,
	379, 360, 599, 0, 0, 377, 330, 406, 368, 412,
	395, 420, 373, 369, 256, 396, 295, 341, 268, 270,
	290, 297, 299, 301, 302, 350, 351, 363, 384, 397,
	398, 399, 294, 278, 378, 279, 312, 280, 257, 286,
	284, 287, 386, 288, 259, 364, 403, 0, 307, 374,
	337, 260, 336, 365, 402, 401, 269, 428, 434, 435,
	522, 0, 440, 600, 601, 602, 449, 454, 455, 456,
	458, 459, 460, 461, 523, 540, 507, 478, 442, 531,
	474, 479, 543, 0, 0, 0, 433, 326, 327, 0,
	305, 253, 254, 596, 291, 356, 545, 578, 470, 0,
	532, 471, 480, 283, 504, 516, 515, 352, 432, 0,
	527, 530, 462, 595, 0, 524, 539, 598, 538, 592,
	362, 0, 383, 536, 483, 0, 528, 502, 0, 529,
	498, 533, 0, 472, 0, 390, 414, 426, 443, 446,
	473, 558, 559, 560, 258, 445, 562, 563, 564, 565,
	566, 567, 568, 561, 417, 505, 482, 508, 425, 485,
	484, 0, 0, 519, 441, 520, 521, 346, 347, 348,
	349, 309, 546, 276, 444, 372, 0, 506, 0, 0,
	0, 0, 0, 0, 0, 0, 511, 512, 509, 603,
	0, 569, 570, 0, 0, 438, 439, 304, 311, 457,
	313, 275, 361, 306, 423, 320, 0, 450, 513, 451,
	572, 575, 573, 574, 353, 316, 317, 387, 321, 331,
	375, 422, 359, 380, 273, 413, 388, 335, 499, 526,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 245, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 554, 553, 552, 551,
	550, 549, 548, 547, 0, 0, 496, 400, 285, 250,
	281, 282, 289, 593, 590, 404, 594, 0, 255, 477,
	329, 0, 370, 303, 541, 542, 206, 207, 208, 209,
	210, 211, 212, 213, 251, 214, 215, 216, 217, 218,
	219, 220, 223, 224, 225, 226, 227, 228, 229, 230,
	544, 221, 222, 231, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 0, 0, 0,
	252, 246, 247, 248, 249, 0, 0, 0, 429, 430,
	431, 453, 415, 475, 591, 0, 0, 0, 0, 0,
	0, 0, 525, 537, 571, 0, 580, 581, 583, 585,
	584, 0, 597, 467, 577, 358, 0, 481, 514, 503,
	586, 469, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 328, 518, 500, 510, 501,
	486, 487, 488, 495, 308, 489, 490, 491, 463, 492,
	464, 493, 494, 0, 517, 468, 389, 342, 535, 534,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 196, 0, 0,
	0, 0, 0, 0, 271, 197, 465, 582, 466, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 0,
	2184, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 476, 0, 0, 0, 0, 0,
	261, 394, 411, 272, 385, 424, 277, 392, 267, 357,
	381, 0, 0, 263, 409, 391, 339, 318, 319, 262,
	0, 376, 296, 310, 293, 355, 0, 408, 436, 292,
	427, 0, 419, 265, 0, 418, 354, 405, 410, 340,
	334, 264, 407, 338, 333, 322, 300, 452, 323, 324,
	314, 366, 332, 367, 315, 344, 343, 345, 0, 0,
	0, 0, 0, 447, 448, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 576, 0, 0,
	579, 2183, 421, 0, 0, 0, 2188, 2186, 0, 393,
	0, 2187, 325, 0, 0, 0, 437, 0, 379, 360,
	599, 0, 0, 377, 330, 406, 368, 412, 395, 420,
	373, 369, 256, 396, 295, 341, 268, 270, 290, 297,
	299, 301, 302, 350, 351, 363, 384, 397, 398, 399,
	294, 278, 378, 279, 312, 280, 257, 286, 284, 287,
	386, 288, 259, 364, 403, 0, 307, 374, 337, 260,
	336, 365, 402, 401, 269, 428, 434, 435, 522, 0,
	440, 600, 601, 602, 449, 454, 455, 456, 458, 459,
	460, 461, 523, 540, 507, 478, 442, 531, 474, 479,
	543, 0, 0, 0, 433, 326, 327, 0, 305, 253,
	254, 596, 291, 356, 545, 578, 470, 0, 532, 471,
	480, 283, 504, 516, 515, 352, 432, 0, 527, 530,
	462, 595, 0, 524, 539, 598, 538, 592, 362, 0,
	383, 536, 483, 0, 528, 502, 0, 529, 498, 533,
	0, 472, 0, 390, 414, 426, 443, 446, 473, 558,
	559, 560, 258, 445, 562, 563, 564, 565, 566, 567,
	568, 561, 417, 505, 482, 508, 425, 485, 484, 0,
	0, 519, 441, 520, 521, 346, 347, 348, 349, 309,
	546, 276, 444, 372, 0, 506, 0, 0, 0, 0,
	0, 0, 0, 0, 511, 512, 509, 603, 0, 569,
	570, 0, 0, 438, 439, 304, 311, 457, 313, 275,
	361, 306, 423, 320, 0, 450, 513, 451, 572, 575,
	573, 574, 353, 316, 317, 387, 321, 331, 375, 422,
	359, 380, 273, 413, 388, 335, 499, 526, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 245,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 554, 553, 552, 551, 550, 549,
	548, 547, 0, 0, 496, 400, 285, 250, 281, 282,
	289, 593, 590, 404, 594, 0, 255, 477, 329, 0,
	370, 303, 541, 542, 206, 207, 208, 209, 210, 211,
	212, 213, 251, 214, 215, 216, 217, 218, 219, 220,
	223, 224, 225, 226, 227, 228, 229, 230, 544, 221,
	222, 231, 232, 233, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 0, 0, 0, 252, 246,
	247, 248, 249, 0, 0, 0, 429, 430, 431, 453,
	415, 475, 591, 0, 0, 0, 0, 0, 0, 0,
	525, 537, 571, 174, 580, 581, 583, 585, 584, 0,
	597, 467, 577, 358, 0, 481, 514, 503, 586, 469,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	298, 0, 0, 328, 518, 500, 510, 501, 486, 487,
	488, 495, 308, 489, 490, 491, 463, 492, 464, 493,
	494, 115, 517, 468, 389, 342, 535, 534, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 168, 1958, 0, 196, 0, 0, 0, 0,
	0, 0, 271, 197, 465, 582, 466, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 274, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 476, 0, 0, 0, 0, 0, 261, 394,
	411, 272, 385, 424, 277, 392, 267, 357, 381, 0,
	0, 263, 409, 391, 339, 318, 319, 262, 0, 376,
	296, 310, 293, 355, 0, 408, 436, 292, 427, 0,
	419, 265, 0, 418, 354, 405, 410, 340, 334, 264,
	407, 338, 333, 322, 300, 452, 323, 324, 314, 366,
	332, 367, 315, 344, 343, 345, 0, 0, 0, 0,
	0, 447, 448, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 576, 0, 0, 579, 0,
	421, 0, 0, 0, 0, 0, 0, 393, 0, 0,
	325, 0, 0, 0, 437, 0, 379, 360, 599, 0,
	0, 377, 330, 406, 368, 412, 395, 420, 373, 369,
	256, 396, 295, 341, 268, 270, 290, 297, 299, 301,
	302, 350, 351, 363, 384, 397, 398, 399, 294, 278,
	378, 279, 312, 280, 257, 286, 284, 287, 386, 288,
	259, 364, 403, 0, 307, 374, 337, 260, 336, 365,
	402, 401, 269, 428, 434, 435, 522, 0, 440, 600,
	601, 602, 449, 454, 455, 456, 458, 459, 460, 461,
	523, 540, 507, 478, 442, 531, 474, 479, 543, 0,
	0, 0, 433, 326, 327, 0, 305, 253, 254, 596,
	291, 356, 545, 578, 470, 0, 532, 471, 480, 283,
	504, 516, 515, 352, 432, 0, 527, 530, 462, 595,
	0, 524, 539, 598, 538, 592, 362, 0, 383, 536,
	483, 0, 528, 502, 0, 529, 498, 533, 0, 472,
	0, 390, 414, 426, 443, 446, 473, 558, 559, 560,
	258, 445, 562, 563, 564, 565, 566, 567, 568, 561,
	417, 505, 482, 508, 425, 485, 484, 0, 0, 519,
	441, 520, 521, 346, 347, 348, 349, 309, 546, 276,
	444, 372, 0, 506, 0, 0, 0, 0, 0, 0,
	0, 0, 511, 512, 509, 603, 0, 569, 570, 0,
	0, 438, 439, 304, 311, 457, 313, 275, 361, 306,
	423, 320, 0, 450, 513, 451, 572, 575, 573, 574,
	353, 316, 317, 387, 321, 331, 375, 422, 359, 380,
	273, 413, 388, 335, 499, 526, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 245, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 554, 553, 552, 551, 550, 549, 548, 547,
	0, 0, 496, 400, 285, 250, 281, 282, 289, 593,
	590, 404, 594, 0, 255, 477, 329, 139, 370, 303,
	541, 542, 206, 207, 208, 209, 210, 211, 212, 213,
	251, 214, 215, 216, 217, 218, 219, 220, 223, 224,
	225, 226, 227, 228, 229, 230, 544, 221, 222, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 0, 0, 0, 252, 246, 247, 248,
	249, 0, 0, 0, 429, 430, 431, 453, 415, 475,
	591, 0, 0, 0, 0, 0, 0, 0, 525, 537,
	571, 174, 580, 581, 583, 585, 584, 0, 597, 467,
	577, 358, 0, 481, 514, 503, 586, 469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 0,
	0, 328, 518, 500, 510, 501, 486, 487, 488, 495,
	308, 489, 490, 491, 463, 492, 464, 493, 494, 115,
	517, 468, 389, 342, 535, 534, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	168, 1949, 0, 196, 0, 0, 0, 0, 0, 0,
	271, 197, 465, 582, 466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	476, 0, 0, 0, 0, 0, 261, 394, 411, 272,
	385, 424, 277, 392, 267, 357, 381, 0, 0, 263,
	409, 391, 339, 318, 319, 262, 0, 376, 296, 310,
	293, 355, 0, 408, 436, 292, 427, 0, 419, 265,
	0, 418, 354, 405, 410, 340, 334, 264, 407, 338,
	333, 322, 300, 452, 323, 324, 314, 366, 332, 367,
	315, 344, 343, 345, 0, 0, 0, 0, 0, 447,
	448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 576, 0, 0, 579, 0, 421, 0,
	0, 0, 0, 0, 0, 393, 0, 0, 325, 0,
	0, 0, 437, 0, 379, 360, 599, 0, 0, 377,
	330, 406, 368, 412, 395, 420, 373, 369, 256, 396,
	295, 341, 268, 270, 290, 297, 299, 301, 302, 350,
	351, 363, 384, 397, 398, 399, 294, 278, 378, 279,
	312, 280, 257, 286, 284, 287, 386, 288, 259, 364,
	403, 0, 307, 374, 337, 260, 336, 365, 402, 401,
	269, 428, 434, 435, 522, 0, 440, 600, 601, 602,
	449, 454, 455, 456, 458, 459, 460, 461, 523, 540,
	507, 478, 442, 531, 474, 479, 543, 0, 0, 0,
	433, 326, 327, 0, 305, 253, 254, 596, 291, 356,
	545, 578, 470, 0, 532, 471, 480, 283, 504, 516,
	515, 352, 432, 0, 527, 530, 462, 595, 0, 524,
	539, 598, 538, 592, 362, 0, 383, 536, 483, 0,
	528, 502, 0, 529, 498, 533, 0, 472, 0, 390,
	414, 426, 443, 446, 473, 558, 559, 560, 258, 445,
	562, 563, 564, 565, 566, 567, 568, 561, 417, 505,
	482, 508, 425, 485, 484, 0, 0, 519, 441, 520,
	521, 346, 347, 348, 349, 309, 546, 276, 444, 372,
	0, 506, 0, 0, 0, 0, 0, 0, 0, 0,
	511, 512, 509, 603, 0, 569, 570, 0, 0, 438,
	439, 304, 311, 457, 313, 275, 361, 306, 423, 320,
	0, 450, 513, 451, 572, 575, 573, 574, 353, 316,
	317, 387, 321, 331, 375, 422, 359, 380, 273, 413,
	388, 335, 499, 526, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 245, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	554, 553, 552, 551, 550, 549, 548, 547, 0, 0,
	496, 400, 285, 250, 281, 282, 289, 593, 590, 404,
	594, 0, 255, 477, 329, 139, 370, 303, 541, 542,
	206, 207, 208, 209, 210, 211, 212, 213, 251, 214,
	215, 216, 217, 218, 219, 220, 223, 224, 225, 226,
	227, 228, 229, 230, 544, 221, 222, 231, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 0, 0, 0, 252, 246, 247, 248, 249, 0,
	0, 0, 429, 430, 431, 453, 415, 475, 591, 0,
	0, 0, 0, 0, 0, 0, 525, 537, 571, 0,
	580, 581, 583, 585, 584, 0, 597, 467, 577, 358,
	0, 481, 514, 503, 586, 469, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 950, 0, 328,
	518, 500, 510, 501, 486, 487, 488, 495, 308, 489,
	490, 491, 463, 492, 464, 493, 494, 0, 517, 468,
	389, 342, 535, 534, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 196, 957, 958, 0, 0, 0, 0, 271, 197,
	465, 582, 466, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 961, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 476, 0,
	0, 0, 0, 0, 261, 394, 945, 272, 385, 424,
	277, 392, 267, 357, 381, 0, 0, 263, 409, 391,
	339, 318, 319, 262, 0, 376, 296, 310, 293, 355,
	0, 408, 436, 292, 427, 935, 419, 265, 934, 418,
	354, 405, 410, 340, 334, 264, 407, 338, 333, 322,
	300, 452, 323, 324, 314, 366, 332, 367, 315, 344,
	343, 345, 0, 0, 0, 0, 0, 447, 448, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 576, 0, 0, 579, 0, 421, 0, 0, 0,
	0, 0, 0, 393, 0, 0, 325, 0, 0, 0,
	437, 0, 379, 360, 599, 0, 0, 377, 330, 406,
	368, 412, 395, 420, 948, 369, 256, 396, 295, 341,
	268, 270, 290, 297, 299, 301, 302, 350, 351, 363,
	384, 397, 398, 399, 294, 278, 378, 279, 312, 280,
	257, 286, 284, 287, 386, 288, 259, 364, 403, 0,
	307, 374, 337, 260, 336, 365, 402, 401, 269, 428,
	434, 435, 522, 0, 440, 600, 601, 602, 449, 454,
	455, 456, 458, 459, 460, 461, 523, 540, 507, 478,
	442, 531, 474, 479, 543, 0, 0, 0, 433, 326,
	327, 0, 305, 253, 254, 596, 291, 356, 545, 578,
	470, 0, 532, 471, 480, 283, 504, 516, 515, 352,
	432, 0, 527, 530, 462, 595, 0, 524, 539, 598,
	538, 592, 362, 0, 383, 536, 483, 0, 528, 502,
	0, 529, 498, 533, 0, 472, 0, 390, 414, 426,
	443, 446, 473, 558, 559, 560, 258, 445, 562, 563,
	564, 565, 566, 567, 949, 561, 417, 505, 482, 508,
	425, 485, 484, 0, 0, 519, 952, 520, 521, 346,
	347, 348, 349, 309, 546, 276, 444, 372, 0, 506,
	0, 0, 0, 0, 0, 0, 0, 0, 511, 512,
	509, 603, 0, 569, 570, 0, 0, 438, 439, 304,
	311, 457, 313, 275, 361, 306, 423, 320, 0, 450,
	513, 451, 572, 575, 573, 574, 959, 946, 955, 947,
	321, 331, 375, 422, 359, 380, 273, 413, 388, 956,
	499, 526, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 245, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 554, 553,
	552, 551, 550, 549, 548, 547, 0, 0, 496, 400,
	285, 250, 281, 282, 289, 593, 590, 404, 594, 0,
	255, 477, 329, 0, 370, 303, 541, 542, 206, 207,
	208, 209, 210, 211, 212, 213, 251, 214, 215, 216,
	217, 218, 219, 220, 223, 224, 225, 226, 227, 228,
	229, 230, 544, 221, 222, 231, 232, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 0,
	0, 0, 252, 246, 247, 248, 249, 0, 0, 0,
	429, 430, 431, 453, 415, 475, 591, 0, 0, 0,
	0, 0, 0, 0, 525, 537, 571, 174, 580, 581,
	583, 585, 584, 0, 597, 467, 577, 358, 0, 481,
	514, 503, 586, 469, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 298, 0, 0, 328, 518, 500,
	510, 501, 486, 487, 488, 495, 308, 489, 490, 491,
	463, 492, 464, 493, 494, 115, 517, 468, 389, 342,
	535, 534, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1848, 0, 0, 196,
	0, 0, 0, 0, 0, 0, 271, 197, 465, 582,
	466, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 476, 0, 0, 0,
	0, 0, 261, 394, 411, 272, 385, 424, 277, 392,
	267, 357, 381, 0, 0, 263, 409, 391, 339, 318,
	319, 262, 0, 376, 296, 310, 293, 355, 0, 408,
	436, 292, 427, 0, 419, 265, 0, 418, 354, 405,
	410, 340, 334, 264, 407, 338, 333, 322, 300, 452,
	323, 324, 314, 366, 332, 367, 315, 344, 343, 345,
	0, 0, 0, 0, 0, 447, 448, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 576,
	0, 0, 579, 0, 421, 0, 0, 0, 0, 0,
	0, 393, 0, 0, 325, 0, 0, 0, 437, 0,
	379, 360, 599, 0, 0, 377, 330, 406, 368, 412,
	395, 420, 373, 369, 256, 396, 295, 341, 268, 270,
	290, 297, 299, 301, 302, 350, 351, 363, 384, 397,
	398, 399, 294, 278, 378, 279, 312, 280, 257, 286,
	284, 287, 386, 288, 259, 364, 403, 0, 307, 374,
	337, 260, 336, 365, 402, 401, 269, 428, 434, 435,
	522, 0, 440, 600, 601, 602, 449, 454, 455, 456,
	458, 459, 460, 461, 523, 540, 507, 478, 442, 531,
	474, 479, 543, 0, 0, 0, 433, 326, 327, 0,
	305, 253, 254, 596, 291, 356, 545, 578, 470, 0,
	532, 471, 480, 283, 504, 516, 515, 352, 432, 0,
	527, 530, 462, 595, 0, 524, 539, 598, 538, 592,
	362, 0, 383, 536, 483, 0, 528, 502, 0, 529,
	498, 533, 0, 472, 0, 390, 414, 426, 443, 446,
	473, 558, 559, 560, 258, 445, 562, 563, 564, 565,
	566, 567, 568, 561, 417, 505, 482, 508, 425, 485,
	484, 0, 0, 519, 441, 520, 521, 346, 347, 348,
	349, 309, 546, 276, 444, 372, 0, 506, 0, 0,
	0, 0, 0, 0, 0, 0, 511, 512, 509, 603,
	0, 569, 570, 0, 0, 438, 439, 304, 311, 457,
	313, 275, 361, 306, 423, 320, 0, 450, 513, 451,
	572, 575, 573, 574, 353, 316, 317, 387, 321, 331,
	375, 422, 359, 380, 273, 413, 388, 335, 499, 526,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 245, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 554, 553, 552, 551,
	550, 549, 548, 547, 0, 0, 496, 400, 285, 250,
	281, 282, 289, 593, 590, 404, 594, 0, 255, 477,
	329, 139, 370, 303, 541, 542, 206, 207, 208, 209,
	210, 211, 212, 213, 251, 214, 215, 216, 217, 218,
	219, 220, 223, 224, 225, 226, 227, 228, 229, 230,
	544, 221, 222, 231, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 0, 0, 0,
	252, 246, 247, 248, 249, 0, 0, 0, 429, 430,
	431, 453, 415, 475, 591, 0, 0, 0, 0, 0,
	0, 0, 525, 537, 571, 0, 580, 581, 583, 585,
	584, 0, 597, 467, 577, 358, 0, 481, 514, 503,
	586, 469, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 328, 518, 500, 510, 501,
	486, 487, 488, 495, 308, 489, 490, 491, 463, 492,
	464, 493, 494, 0, 517, 468, 389, 342, 535, 534,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 196, 957, 958,
	0, 0, 0, 0, 271, 197, 465, 582, 466, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 961, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 476, 0, 0, 0, 0, 0,
	261, 394, 411, 272, 385, 424, 277, 392, 267, 357,
	381, 0, 0, 263, 409, 391, 339, 318, 319, 262,
	0, 376, 296, 310, 293, 355, 0, 408, 436, 292,
	427, 935, 419, 265, 934, 418, 354, 405, 410, 340,
	334, 264, 407, 338, 333, 322, 300, 452, 323, 324,
	314, 366, 332, 367, 315, 344, 343, 345, 0, 0,
	0, 0, 0, 447, 448, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 576, 0, 0,
	579, 0, 421, 0, 0, 0, 0, 0, 0, 393,
	0, 0, 325, 0, 0, 0, 437, 0, 379, 360,
	599, 0, 0, 377, 330, 406, 368, 412, 395, 420,
	373, 369, 256, 396, 295, 341, 268, 270, 290, 297,
	299, 301, 302, 350, 351, 363, 384, 397, 398, 399,
	294, 278, 378, 279, 312, 280, 257, 286, 284, 287,
	386, 288, 259, 364, 403, 0, 307, 374, 337, 260,
	336, 365, 402, 401, 269, 428, 434, 435, 522, 0,
	440, 600, 601, 602, 449, 454, 455, 456, 458, 459,
	460, 461, 523, 540, 507, 478, 442, 531, 474, 479,
	543, 0, 0, 0, 433, 326, 327, 0, 305, 253,
	254, 596, 291, 356, 545, 578, 470, 0, 532, 471,
	480, 283, 504, 516, 515, 352, 432, 0, 527, 530,
	462, 595, 0, 524, 539, 598, 538, 592, 362, 0,
	383, 536, 483, 0, 528, 502, 0, 529, 498, 533,
	0, 472, 0, 390, 414, 426, 443, 446, 473, 558,
	559, 560, 258, 445, 562, 563, 564, 565, 566, 567,
	568, 561, 417, 505, 482, 508, 425, 485, 484, 0,
	0, 519, 441, 520, 521, 346, 347, 348, 349, 309,
	546, 276, 444, 372, 0, 506, 0, 0, 0, 0,
	0, 0, 0, 0, 511, 512, 509, 603, 0, 569,
	570, 0, 0, 438, 439, 304, 311, 457, 313, 275,
	361, 306, 423, 320, 0, 450, 513, 451, 572, 575,
	573, 574, 959, 1867, 955, 1868, 321, 331, 375, 422,
	359, 380, 273, 413, 388, 956, 499, 526, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 245,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 554, 553, 552, 551, 550, 549,
	548, 547, 0, 0, 496, 400, 285, 250, 281, 282,
	289, 593, 590, 404, 594, 0, 255, 477, 329, 0,
	370, 303, 541, 542, 206, 207, 208, 209, 210, 211,
	212, 213, 251, 214, 215, 216, 217, 218, 219, 220,
	223, 224, 225, 226, 227, 228, 229, 230, 544, 221,
	222, 231, 232, 233, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 0, 0, 0, 252, 246,
	247, 248, 249, 0, 0, 0, 429, 430, 431, 453,
	415, 475, 591, 0, 0, 0, 0, 0, 0, 0,
	525, 537, 571, 0, 580, 581, 583, 585, 584, 0,
	597, 467, 577, 358, 0, 481, 514, 503, 586, 469,
	0, 0, 2655, 0, 0, 0, 0, 0, 0, 0,
	298, 0, 0, 328, 518, 500, 510, 501, 486, 487,
	488, 495, 308, 489, 490, 491, 463, 492, 464, 493,
	494, 0, 517, 468, 389, 342, 535, 534, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 196, 0, 0, 0, 0,
	0, 0, 271, 197, 465, 582, 466, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 274, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 476, 0, 0, 0, 0, 0, 261, 394,
	411, 272, 385, 424, 277, 392, 267, 357, 381, 0,
	0, 263, 409, 391, 339, 318, 319, 262, 0, 376,
	296, 310, 293, 355, 0, 408, 436, 292, 427, 0,
	419, 265, 0, 418, 354, 405, 410, 340, 334, 264,
	407, 338, 333, 322, 300, 452, 323, 324, 314, 366,
	332, 367, 315, 344, 343, 345, 0, 0, 0, 0,
	0, 447, 448, 0, 0, 0, 0, 0, 0, 0,
	0, 2658, 0, 0, 2657, 576, 0, 0, 579, 0,
	421, 0, 0, 0, 0, 0, 0, 393, 0, 0,
	325, 0, 0, 0, 437, 0, 379, 360, 599, 0,
	0, 377, 330, 406, 368, 412, 395, 420, 373, 369,
	256, 396, 295, 341, 268, 270, 290, 297, 299, 301,
	302, 350, 351, 363, 384, 397, 398, 399, 294, 278,
	378, 279, 312, 280, 257, 286, 284, 287, 386, 288,
	259, 364, 403, 0, 307, 374, 337, 260, 336, 365,
	402, 401, 269, 428, 434, 435, 522, 0, 440, 600,
	601, 602, 449, 454, 455, 456, 458, 459, 460, 461,
	523, 540, 507, 478, 442, 531, 474, 479, 543, 0,
	0, 0, 433, 326, 327, 0, 305, 253, 254, 596,
	291, 356, 545, 578, 470, 0, 532, 471, 480, 283,
	504, 516, 515, 352, 432, 0, 527, 530, 462, 595,
	0, 524, 539, 598, 538, 592, 362, 0, 383, 536,
	483, 0, 528, 502, 0, 529, 498, 533, 0, 472,
	0, 390, 414, 426, 443, 446, 473, 558, 559, 560,
	258, 445, 562, 563, 564, 565, 566, 567, 568, 561,
	417, 505, 482, 508, 425, 485, 484, 0, 0, 519,
	441, 520, 521, 346, 347, 348, 349, 309, 546, 276,
	444, 372, 0, 506, 0, 0, 0, 0, 0, 0,
	0, 0, 511, 512, 509, 603, 0, 569, 570, 0,
	0, 438, 439, 304, 311, 457, 313, 275, 361, 306,
	423, 320, 0, 450, 513, 451, 572, 575, 573, 574,
	353, 316, 317, 387, 321, 331, 375, 422, 359, 380,
	273, 413, 388, 335, 499, 526, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 245, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 554, 553, 552, 551, 550, 549, 548, 547,
	0, 0, 496, 400, 285, 250, 281, 282, 289, 593,
	590, 404, 594, 0, 255, 477, 329, 0, 370, 303,
	541, 542, 206, 207, 208, 209, 210, 211, 212, 213,
	251, 214, 215, 216, 217, 218, 219, 220, 223, 224,
	225, 226, 227, 228, 229, 230, 544, 221, 222, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 0, 0, 0, 252, 246, 247, 248,
	249, 0, 0, 0, 429, 430, 431, 453, 415, 475,
	591, 0, 0, 0, 0, 0, 0, 0, 525, 537,
	571, 0, 580, 581, 583, 585, 584, 0, 597, 467,
	577, 358, 0, 481, 514, 503, 586, 469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 1395,
	0, 328, 518, 500, 510, 501, 486, 487, 488, 495,
	308, 489, 490, 491, 463, 492, 464, 493, 494, 0,
	517, 468, 389, 342, 535, 534, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 196, 0, 0, 1393, 0, 0, 0,
	271, 197, 465, 582, 466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1391,
	476, 0, 0, 0, 0, 0, 261, 394, 411, 272,
	385, 424, 277, 392, 267, 357, 381, 0, 0, 263,
	409, 391, 339, 318, 319, 262, 0, 376, 296, 310,
	293, 355, 0, 408, 436, 292, 427, 0, 419, 265,
	0, 418, 354, 405, 410, 340, 334, 264, 407, 338,
	333, 322, 300, 452, 323, 324, 314, 366, 332, 367,
	315, 344, 343, 345, 0, 0, 0, 0, 0, 447,
	448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 576, 0, 0, 579, 0, 421, 0,
	0, 0, 0, 0, 0, 393, 0, 0, 325, 0,
	0, 0, 437, 0, 379, 360, 599, 0, 0, 377,
	330, 406, 368, 412, 395, 420, 373, 369, 256, 396,
	295, 341, 268, 270, 290, 297, 299, 301, 302, 350,
	351, 363, 384, 397, 398, 399, 294, 278, 378, 279,
	312, 280, 257, 286, 284, 287, 386, 288, 259, 364,
	403, 0, 307, 374, 337, 260, 336, 365, 402, 401,
	269, 428, 434, 435, 522, 0, 440, 600, 601, 602,
	449, 454, 455, 456, 458, 459, 460, 461, 523, 540,
	507, 478, 442, 531, 474, 479, 543, 0, 0, 0,
	433, 326, 327, 0, 305, 253, 254, 596, 291, 356,
	545, 578, 470, 0, 532, 471, 480, 283, 504, 516,
	515, 352, 432, 0, 527, 530, 462, 595, 0, 524,
	539, 598, 538, 592, 362, 0, 383, 536, 483, 0,
	528, 502, 0, 529, 498, 533, 0, 472, 0, 390,
	414, 426, 443, 446, 473, 558, 559, 560, 258, 445,
	562, 563, 564, 565, 566, 567, 568, 561, 417, 505,
	482, 508, 425, 485, 484, 0, 0, 519, 441, 520,
	521, 346, 347, 348, 349, 309, 546, 276, 444, 372,
	0, 506, 0, 0, 0, 0, 0, 0, 0, 0,
	511, 512, 509, 603, 0, 569, 570, 0, 0, 438,
	439, 304, 311, 457, 313, 275, 361, 306, 423, 320,
	0, 450, 513, 451, 572, 575, 573, 574, 353, 316,
	317, 387, 321, 331, 375, 422, 359, 380, 273, 413,
	388, 335, 499, 526, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 245, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	554, 553, 552, 551, 550, 549, 548, 547, 0, 0,
	496, 400, 285, 250, 281, 282, 289, 593, 590, 404,
	594, 0, 255, 477, 329, 0, 370, 303, 541, 542,
	206, 207, 208, 209, 210, 211, 212, 213, 251, 214,
	215, 216, 217, 218, 219, 220, 223, 224, 225, 226,
	227, 228, 229, 230, 544, 221, 222, 231, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 0, 0, 0, 252, 246, 247, 248, 249, 0,
	0, 0, 429, 430, 431, 453, 415, 475, 591, 0,
	0, 0, 0, 0, 0, 0, 525, 537, 571, 0,
	580, 581, 583, 585, 584, 0, 597, 467, 577, 358,
	0, 481, 514, 503, 586, 469, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 1389, 0, 328,
	518, 500, 510, 501, 486, 487, 488, 495, 308, 489,
	490, 491, 463, 492, 464, 493, 494, 0, 517, 468,
	389, 342, 535, 534, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 196, 0, 0, 1393, 0, 0, 0, 271, 197,
	465, 582, 466, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 274, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1391, 476, 0,
	0, 0, 0, 0, 261, 394, 411, 272, 385, 424,
	277, 392, 267, 357, 381, 0, 0, 263, 409, 391,
	339, 318, 319, 262, 0, 376, 296, 310, 293, 355,
	0, 408, 436, 292, 427, 0, 419, 265, 0, 418,
	354, 405, 410, 340, 334, 264, 407, 338, 333, 322,
	300, 452, 323, 324, 314, 366, 332, 367, 315, 344,
	343, 345, 0, 0, 0, 0, 0, 447, 448, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 576, 0, 0, 579, 0, 421, 0, 0, 0,
	0, 0, 0, 393, 0, 0, 325, 0, 0, 0,
	437, 0, 379, 360, 599, 0, 0, 377, 330, 406,
	368, 412, 395, 420, 373, 369, 256, 396, 295, 341,
	268, 270, 290, 297, 299, 301, 302, 350, 351, 363,
	384, 397, 398, 399, 294, 278, 378, 279, 312, 280,
	257, 286, 284, 287, 386, 288, 259, 364, 403, 0,
	307, 374, 337, 260, 336, 365, 402, 401, 269, 428,
	434, 435, 522, 0, 440, 600, 601, 602, 449, 454,
	455, 456, 458, 459, 460, 461, 523, 540, 507, 478,
	442, 531, 474, 479, 543, 0, 0, 0, 433, 326,
	327, 0, 305, 253, 254, 596, 291, 356, 545, 578,
	470, 0, 532, 471, 480, 283, 504, 516, 515, 352,
	432, 0, 527, 530, 462, 595, 0, 524, 539, 598,
	538, 592, 362, 0, 383, 536, 483, 0, 528, 502,
	0, 529, 498, 533, 0, 472, 0, 390, 414, 426,
	443, 446, 473, 558, 559, 560, 258, 445, 562, 563,
	564, 565, 566, 567, 568, 561, 417, 505, 482, 508,
	425, 485, 484, 0, 0, 519, 441, 520, 521, 346,
	347, 348, 349, 309, 546, 276, 444, 372, 0, 506,
	0, 0, 0, 0, 0, 0, 0, 0, 511, 512,
	509, 603, 0, 569, 570, 0, 0, 438, 439, 304,
	311, 457, 313, 275, 361, 306, 423, 320, 0, 450,
	513, 451, 572, 575, 573, 574, 353, 316, 317, 387,
	321, 331, 375, 422, 359, 380, 273, 413, 388, 335,
	499, 526, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 245, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 554, 553,
	552, 551, 550, 549, 548, 547, 0, 0, 496, 400,
	285, 250, 281, 282, 289, 593, 590, 404, 594, 0,
	255, 477, 329, 0, 370, 303, 541, 542, 206, 207,
	208, 209, 210, 211, 212, 213, 251, 214, 215, 216,
	217, 218, 219, 220, 223, 224, 225, 226, 227, 228,
	229, 230, 544, 221, 222, 231, 232, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 0,
	0, 0, 252, 246, 247, 248, 249, 0, 0, 0,
	429, 430, 431, 453, 415, 475, 591, 0, 0, 0,
	0, 0, 0, 0, 525, 537, 571, 0, 580, 581,
	583, 585, 584, 0, 597, 467, 577, 358, 0, 481,
	514, 503, 586, 469, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 298, 0, 0, 328, 518, 500,
	510, 501, 486, 487, 488, 495, 308, 489, 490, 491,
	463, 492, 464, 493, 494, 0, 517, 468, 389, 342,
	535, 534, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3560, 0, 196,
	779, 0, 0, 0, 0, 0, 271, 197, 465, 582,
	466, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 476, 0, 0, 0,
	0, 0, 261, 394, 411, 272, 385, 424, 277, 392,
	267, 357, 381, 0, 0, 263, 409, 391, 339, 318,
	319, 262, 0, 376, 296, 310, 293, 355, 0, 408,
	436, 292, 427, 0, 419, 265, 0, 418, 354, 405,
	410, 340, 334, 264, 407, 338, 333, 322, 300, 452,
	323, 324, 314, 366, 332, 367, 315, 344, 343, 345,
	0, 0, 0, 0, 0, 447, 448, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 576,
	0, 0, 579, 0, 421, 0, 0, 0, 0, 0,
	0, 393, 0, 0, 325, 0, 0, 0, 437, 0,
	379, 360, 599, 0, 0, 377, 330, 406, 368, 412,
	395, 420, 373, 369, 256, 396, 295, 341, 268, 270,
	290, 297, 299, 301, 302, 350, 351, 363, 384, 397,
	398, 399, 294, 278, 378, 279, 312, 280, 257, 286,
	284, 287, 386, 288, 259, 364, 403, 0, 307, 374,
	337, 260, 336, 365, 402, 401, 269, 428, 434, 435,
	522, 0, 440, 600, 601, 602, 449, 454, 455, 456,
	458, 459, 460, 461, 523, 540, 507, 478, 442, 531,
	474, 479, 543, 0, 0, 0, 433, 326, 327, 0,
	305, 253, 254, 596, 291, 356, 545, 578, 470, 0,
	532, 471, 480, 283, 504, 516, 515, 352, 432, 0,
	527, 530, 462, 595, 0, 524, 539, 598, 538, 592,
	362, 0, 383, 536, 483, 0, 528, 502, 0, 529,
	498, 533, 0, 472, 0, 390, 414, 426, 443, 446,
	473, 558, 559, 560, 258, 445, 562, 563, 564, 565,
	566, 567, 568, 561, 417, 505, 482, 508, 425, 485,
	484, 0, 0, 519, 441, 520, 521, 346, 347, 348,
	349, 309, 546, 276, 444, 372, 0, 506, 0, 0,
	0, 0, 0, 0, 0, 0, 511, 512, 509, 603,
	0, 569, 570, 0, 0, 438, 439, 304, 311, 457,
	313, 275, 361, 306, 423, 320, 0, 450, 513, 451,
	572, 575, 573, 574, 353, 316, 317, 387, 321, 331,
	375, 422, 359, 380, 273, 413, 388, 335, 499, 526,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 245, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 554, 553, 552, 551,
	550, 549, 548, 547, 0, 0, 496, 400, 285, 250,
	281, 282, 289, 593, 590, 404, 594, 0, 255, 477,
	329, 0, 370, 303, 541, 542, 206, 207, 208, 209,
	210, 211, 212, 213, 251, 214, 215, 216, 217, 218,
	219, 220, 223, 224, 225, 226, 227, 228, 229, 230,
	544, 221, 222, 231, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 0, 0, 0,
	252, 246, 247, 248, 249, 0, 0, 0, 429, 430,
	431, 453, 415, 475, 591, 0, 0, 0, 0, 0,
	0, 0, 525, 537, 571, 0, 580, 581, 583, 585,
	584, 0, 597, 467, 577, 358, 0, 481, 514, 503,
	586, 469, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 328, 518, 500, 510, 501,
	486, 487, 488, 495, 308, 489, 490, 491, 463, 492,
	464, 493, 494, 0, 517, 468, 389, 342, 535, 534,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 196, 0, 0,
	1393, 0, 0, 0, 271, 197, 465, 582, 466, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1391, 476, 0, 0, 0, 0, 0,
	261, 394, 411, 272, 385, 424, 277, 392, 267, 357,
	381, 0, 0, 263, 409, 391, 339, 318, 319, 262,
	0, 376, 296, 310, 293, 355, 0, 408, 436, 292,
	427, 0, 419, 265, 0, 418, 354, 405, 410, 340,
	334, 264, 407, 338, 333, 322, 300, 452, 323, 324,
	314, 366, 332, 367, 315, 344, 343, 345, 0, 0,
	0, 0, 0, 447, 448, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 576, 0, 0,
	579, 0, 421, 0, 0, 0, 0, 0, 0, 393,
	0, 0, 325, 0, 0, 0, 437, 0, 379, 360,
	599, 0, 0, 377, 330, 406, 368, 412, 395, 420,
	373, 369, 256, 396, 295, 341, 268, 270, 290, 297,
	299, 301, 302, 350, 351, 363, 384, 397, 398, 399,
	294, 278, 378, 279, 312, 280, 257, 286, 284, 287,
	386, 288, 259, 364, 403, 0, 307, 374, 337, 260,
	336, 365, 402, 401, 269, 428, 434, 435, 522, 0,
	440, 600, 601, 602, 449, 454, 455, 456, 458, 459,
	460, 461, 523, 540, 507, 478, 442, 531, 474, 479,
	543, 0, 0, 0, 433, 326, 327, 0, 305, 253,
	254, 596, 291, 356, 545, 578, 470, 0, 532, 471,
	480, 283, 504, 516, 515, 352, 432, 0, 527, 530,
	462, 595, 0, 524, 539, 598, 538, 592, 362, 0,
	383, 536, 483, 0, 528, 502, 0, 529, 498, 533,
	0, 472, 0, 390, 414, 426, 443, 446, 473, 558,
	559, 560, 258, 445, 562, 563, 564, 565, 566, 567,
	568, 561, 417, 505, 482, 508, 425, 485, 484, 0,
	0, 519, 441, 520, 521, 346, 347, 348, 349, 309,
	546, 276, 444, 372, 0, 506, 0, 0, 0, 0,
	0, 0, 0, 0, 511, 512, 509, 603, 0, 569,
	570, 0, 0, 438, 439, 304, 311, 457, 313, 275,
	361, 306, 423, 320, 0, 450, 513, 451, 572, 575,
	573, 574, 353, 316, 317, 387, 321, 331, 375, 422,
	359, 380, 273, 413, 388, 335, 499, 526, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 245,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 554, 553, 552, 551, 550, 549,
	548, 547, 0, 0, 496, 400, 285, 250, 281, 282,
	289, 593, 590, 404, 594, 0, 255, 477, 329, 0,
	370, 303, 541, 542, 206, 207, 208, 209, 210, 211,
	212, 213, 251, 214, 215, 216, 217, 218, 219, 220,
	223, 224, 225, 226, 227, 228, 229, 230, 544, 221,
	222, 231, 232, 233, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 0, 0, 0, 252, 246,
	247, 248, 249, 0, 0, 0, 429, 430, 431, 453,
	415, 475, 591, 0, 0, 0, 0, 0, 0, 0,
	525, 537, 571, 0, 580, 581, 583, 585, 584, 0,
	597, 467, 577, 358, 0, 481, 514, 503, 586, 469,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	298, 0, 0, 328, 518, 500, 510, 501, 486, 487,
	488, 495, 308, 489, 490, 491, 463, 492, 464, 493,
	494, 0, 517, 468, 389, 342, 535, 534, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 196, 0, 0, 1393, 0,
	0, 0, 271, 197, 465, 582, 466, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 274, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3224, 476, 0, 0, 0, 0, 0, 261, 394,
	411, 272, 385, 424, 277, 392, 267, 357, 381, 0,
	0, 263, 409, 391, 339, 318, 319, 262, 0, 376,
	296, 310, 293, 355, 0, 408, 436, 292, 427, 0,
	419, 265, 0, 418, 354, 405, 410, 340, 334, 264,
	407, 338, 333, 322, 300, 452, 323, 324, 314, 366,
	332, 367, 315, 344, 343, 345, 0, 0, 0, 0,
	0, 447, 448, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 576, 0, 0, 579, 0,
	421, 0, 0, 0, 0, 0, 0, 393, 0, 0,
	325, 0, 0, 0, 437, 0, 379, 360, 599, 0,
	0, 377, 330, 406, 368, 412, 395, 420, 373, 369,
	256, 396, 295, 341, 268, 270, 290, 297, 299, 301,
	302, 350, 351, 363, 384, 397, 398, 399, 294, 278,
	378, 279, 312, 280, 257, 286, 284, 287, 386, 288,
	259, 364, 403, 0, 307, 374, 337, 260, 336, 365,
	402, 401, 269, 428, 434, 435, 522, 0, 440, 600,
	601, 602, 449, 454, 455, 456, 458, 459, 460, 461,
	523, 540, 507, 478, 442, 531, 474, 479, 543, 0,
	0, 0, 433, 326, 327, 0, 305, 253, 254, 596,
	291, 356, 545, 578, 470, 0, 532, 471, 480, 283,
	504, 516, 515, 352, 432, 0, 527, 530, 462, 595,
	0, 524, 539, 598, 538, 592, 362, 0, 383, 536,
	483, 0, 528, 502, 0, 529, 498, 533, 0, 472,
	0, 390, 414, 426, 443, 446, 473, 558, 559, 560,
	258, 445, 562, 563, 564, 565, 566, 567, 568, 561,
	417, 505, 482, 508, 425, 485, 484, 0, 0, 519,
	441, 520, 521, 346, 347, 348, 349, 309, 546, 276,
	444, 372, 0, 506, 0, 0, 0, 0, 0, 0,
	0, 0, 511, 512, 509, 603, 0, 569, 570, 0,
	0, 438, 439, 304, 311, 457, 313, 275, 361, 306,
	423, 320, 0, 450, 513, 451, 572, 575, 573, 574,
	353, 316, 317, 387, 321, 331, 375, 422, 359, 380,
	273, 413, 388, 335, 499, 526, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 245, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 554, 553, 552, 551, 550, 549, 548, 547,
	0, 0, 496, 400, 285, 250, 281, 282, 289, 593,
	590, 404, 594, 0, 255, 477, 329, 0, 370, 303,
	541, 542, 206, 207, 208, 209, 210, 211, 212, 213,
	251, 214, 215, 216, 217, 218, 219, 220, 223, 224,
	225, 226, 227, 228, 229, 230, 544, 221, 222, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 0, 0, 0, 252, 246, 247, 248,
	249, 0, 0, 0, 429, 430, 431, 453, 415, 475,
	591, 0, 0, 0, 0, 0, 0, 0, 525, 537,
	571, 0, 580, 581, 583, 585, 584, 0, 597, 467,
	577, 358, 0, 481, 514, 503, 586, 469, 0, 0,
	0, 0, 0, 2254, 0, 0, 0, 0, 298, 0,
	0, 328, 518, 500, 510, 501, 486, 487, 488, 495,
	308, 489, 490, 491, 463, 492, 464, 493, 494, 0,
	517, 468, 389, 342, 535, 534, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 196, 0, 0, 2256, 0, 0, 0,
	271, 197, 465, 582, 466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	476, 0, 0, 0, 0, 0, 261, 394, 411, 272,
	385, 424, 277, 392, 267, 357, 381, 0, 0, 263,
	409, 391, 339, 318, 319, 262, 0, 376, 296, 310,
	293, 355, 0, 408, 436, 292, 427, 0, 419, 265,
	0, 418, 354, 405, 410, 340, 334, 264, 407, 338,
	333, 322, 300, 452, 323, 324, 314, 366, 332, 367,
	315, 344, 343, 345, 0, 0, 0, 0, 0, 447,
	448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 576, 0, 0, 579, 0, 421, 0,
	0, 0, 0, 0, 0, 393, 0, 0, 325, 0,
	0, 0, 437, 0, 379, 360, 599, 0, 0, 377,
	330, 406, 368, 412, 395, 420, 373, 369, 256, 396,
	295, 341, 268, 270, 290, 297, 299, 301, 302, 350,
	351, 363, 384, 397, 398, 399, 294, 278, 378, 279,
	312, 280, 257, 286, 284, 287, 386, 288, 259, 364,
	403, 0, 307, 374, 337, 260, 336, 365, 402, 401,
	269, 428, 434, 435, 522, 0, 440, 600, 601, 602,
	449, 454, 455, 456, 458, 459, 460, 461, 523, 540,
	507, 478, 442, 531, 474, 479, 543, 0, 0, 0,
	433, 326, 327, 0, 305, 253, 254, 596, 291, 356,
	545, 578, 470, 0, 532, 471, 480, 283, 504, 516,
	515, 352, 432, 0, 527, 530, 462, 595, 0, 524,
	539, 598, 538, 592, 362, 0, 383, 536, 483, 0,
	528, 502, 0, 529, 498, 533, 0, 472, 0, 390,
	414, 426, 443, 446, 473, 558, 559, 560, 258, 445,
	562, 563, 564, 565, 566, 567, 568, 561, 417, 505,
	482, 508, 425, 485, 484, 0, 0, 519, 441, 520,
	521, 346, 347, 348, 349, 309, 546, 276, 444, 372,
	0, 506, 0, 0, 0, 0, 0, 0, 0, 0,
	511, 512, 509, 603, 0, 569, 570, 0, 0, 438,
	439, 304, 311, 457, 313, 275, 361, 306, 423, 320,
	0, 450, 513, 451, 572, 575, 573, 574, 353, 316,
	317, 387, 321, 331, 375, 422, 359, 380, 273, 413,
	388, 335, 499, 526, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 245, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	554, 553, 552, 551, 550, 549, 548, 547, 0, 0,
	496, 400, 285, 250, 281, 282, 289, 593, 590, 404,
	594, 0, 255, 477, 329, 0, 370, 303, 541, 542,
	206, 207, 208, 209, 210, 211, 212, 213, 251, 214,
	215, 216, 217, 218, 219, 220, 223, 224, 225, 226,
	227, 228, 229, 230, 544, 221, 222, 231, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 0, 0, 0, 252, 246, 247, 248, 249, 0,
	0, 0, 429, 430, 431, 453, 415, 475, 591, 0,
	0, 0, 0, 0, 0, 0, 525, 537, 571, 0,
	580, 581, 583, 585, 584, 0, 597, 467, 577, 358,
	0, 481, 514, 503, 586, 469, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 2275, 0, 328,
	518, 500, 510, 501, 486, 487, 488, 495, 308, 489,
	490, 491, 463, 492, 464, 493, 494, 0, 517, 468,
	389, 342, 535, 534, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 196, 0, 0, 1393, 0, 0, 0, 271, 197,
	465, 582, 466, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 274, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 476, 0,
	0, 0, 0, 0, 261, 394, 411, 272, 385, 424,
	277, 392, 267, 357, 381, 0, 0, 263, 409, 391,
	339, 318, 319, 262, 0, 376, 296, 310, 293, 355,
	0, 408, 436, 292, 427, 0, 419, 265, 0, 418,
	354, 405, 410, 340, 334, 264, 407, 338, 333, 322,
	300, 452, 323, 324, 314, 366, 332, 367, 315, 344,
	343, 345, 0, 0, 0, 0, 0, 447, 448, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 576, 0, 0, 579, 0, 421, 0, 0, 0,
	0, 0, 0, 393, 0, 0, 325, 0, 0, 0,
	437, 0, 379, 360, 599, 0, 0, 377, 330, 406,
	368, 412, 395, 420, 373, 369, 256, 396, 295, 341,
	268, 270, 290, 297, 299, 301, 302, 350, 351, 363,
	384, 397, 398, 399, 294, 278, 378, 279, 312, 280,
	257, 286, 284, 287, 386, 288, 259, 364, 403, 0,
	307, 374, 337, 260, 336, 365, 402, 401, 269, 428,
	434, 435, 522, 0, 440, 600, 601, 602, 449, 454,
	455, 456, 458, 459, 460, 461, 523, 540, 507, 478,
	442, 531, 474, 479, 543, 0, 0, 0, 433, 326,
	327, 0, 305, 253, 254, 596, 291, 356, 545, 578,
	470, 0, 532, 471, 480, 283, 504, 516, 515, 352,
	432, 0, 527, 530, 462, 595, 0, 524, 539, 598,
	538, 592, 362, 0, 383, 536, 483, 0, 528, 502,
	0, 529, 498, 533, 0, 472, 0, 390, 414, 426,
	443, 446, 473, 558, 559, 560, 258, 445, 562, 563,
	564, 565, 566, 567, 568, 561, 417, 505, 482, 508,
	425, 485, 484, 0, 0, 519, 441, 520, 521, 346,
	347, 348, 349, 309, 546, 276, 444, 372, 0, 506,
	0, 0, 0, 0, 0, 0, 0, 0, 511, 512,
	509, 603, 0, 569, 570, 0, 0, 438, 439, 304,
	311, 457, 313, 275, 361, 306, 423, 320, 0, 450,
	513, 451, 572, 575, 573, 574, 353, 316, 317, 387,
	321, 331, 375, 422, 359, 380, 273, 413, 388, 335,
	499, 526, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 245, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 554, 553,
	552, 551, 550, 549, 548, 547, 0, 0, 496, 400,
	285, 250, 281, 282, 289, 593, 590, 404, 594, 0,
	255, 477, 329, 0, 370, 303, 541, 542, 206, 207,
	208, 209, 210, 211, 212, 213, 251, 214, 215, 216,
	217, 218, 219, 220, 223, 224, 225, 226, 227, 228,
	229, 230, 544, 221, 222, 231, 232, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 0,
	0, 0, 252, 246, 247, 248, 249, 0, 0, 0,
	429, 430, 431, 453, 415, 475, 591, 0, 0, 0,
	0, 0, 0, 0, 525, 537, 571, 0, 580, 581,
	583, 585, 584, 0, 597, 467, 577, 358, 0, 481,
	514, 503, 586, 469, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 298, 0, 0, 328, 518, 500,
	510, 501, 486, 487, 488, 495, 308, 489, 490, 491,
	463, 492, 464, 493, 494, 0, 517, 468, 389, 342,
	535, 534, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 196,
	779, 0, 0, 0, 0, 0, 271, 197, 465, 582,
	466, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 476, 0, 0, 0,
	0, 0, 261, 394, 411, 272, 385, 424, 277, 392,
	267, 357, 381, 0, 0, 263, 409, 391, 339, 318,
	319, 262, 0, 376, 296, 310, 293, 355, 0, 408,
	436, 292, 427, 0, 419, 265, 0, 418, 354, 405,
	410, 340, 334, 264, 407, 338, 333, 322, 300, 452,
	323, 324, 314, 366, 332, 367, 315, 344, 343, 345,
	0, 0, 0, 0, 0, 447, 448, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 576,
	0, 0, 579, 0, 421, 0, 0, 0, 0, 0,
	0, 393, 0, 0, 325, 0, 0, 0, 437, 0,
	379, 360, 599, 0, 0, 377, 330, 406, 368, 412,
	395, 420, 373, 369, 256, 396, 295, 341, 268, 270,
	290, 297, 299, 301, 302, 350, 351, 363, 384, 397,
	398, 399, 294, 278, 378, 279, 312, 280, 257, 286,
	284, 287, 386, 288, 259, 364, 403, 0, 307, 374,
	337, 260, 336, 365, 402, 401, 269, 428, 434, 435,
	522, 0, 440, 600, 601, 602, 449, 454, 455, 456,
	458, 459, 460, 461, 523, 540, 507, 478, 442, 531,
	474, 479, 543, 0, 0, 0, 433, 326, 327, 0,
	305, 253, 254, 596, 291, 356, 545, 578, 470, 0,
	532, 471, 480, 283, 504, 516, 515, 352, 432, 0,
	527, 530, 462, 595, 0, 524, 539, 598, 538, 592,
	362, 0, 383, 536, 483, 0, 528, 502, 0, 529,
	498, 533, 0, 472, 0, 390, 414, 426, 443, 446,
	473, 558, 559, 560, 258, 445, 562, 563, 564, 565,
	566, 567, 568, 561, 417, 505, 482, 508, 425, 485,
	484, 0, 0, 519, 441, 520, 521, 346, 347, 348,
	349, 309, 546, 276, 444, 372, 0, 506, 0, 0,
	0, 0, 0, 0, 0, 0, 511, 512, 509, 603,
	0, 569, 570, 0, 0, 438, 439, 304, 311, 457,
	313, 275, 361, 306, 423, 320, 0, 450, 513, 451,
	572, 575, 573, 574, 353, 316, 317, 387, 321, 331,
	375, 422, 359, 380, 273, 413, 388, 335, 499, 526,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 245, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 554, 553, 552, 551,
	550, 549, 548, 547, 0, 0, 496, 400, 285, 250,
	281, 282, 289, 593, 590, 404, 594, 0, 255, 477,
	329, 0, 370, 303, 541, 542, 206, 207, 208, 209,
	210, 211, 212, 213, 251, 214, 215, 216, 217, 218,
	219, 220, 223, 224, 225, 226, 227, 228, 229, 230,
	544, 221, 222, 231, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 0, 0, 0,
	252, 246, 247, 248, 249, 0, 0, 0, 429, 430,
	431, 453, 415, 475, 591, 0, 0, 0, 0, 0,
	0, 0, 525, 537, 571, 0, 580, 581, 583, 585,
	584, 0, 597, 467, 577, 358, 0, 481, 514, 503,
	586, 469, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 328, 518, 500, 510, 501,
	486, 487, 488, 495, 308, 489, 490, 491, 463, 492,
	464, 493, 494, 0, 517, 468, 389, 342, 535, 534,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3579, 0, 0, 196, 0, 0,
	0, 0, 0, 0, 271, 197, 465, 582, 466, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 476, 0, 0, 0, 0, 0,
	261, 394, 411, 272, 385, 424, 277, 392, 267, 357,
	381, 0, 0, 263, 409, 391, 339, 318, 319, 262,
	0, 376, 296, 310, 293, 355, 0, 408, 436, 292,
	427, 0, 419, 265, 0, 418, 354, 405, 410, 340,
	334, 264, 407, 338, 333, 322, 300, 452, 323, 324,
	314, 366, 332, 367, 315, 344, 343, 345, 0, 0,
	0, 0, 0, 447, 448, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 576, 0, 0,
	579, 0, 421, 0, 0, 0, 0, 0, 0, 393,
	0, 0, 325, 0, 0, 0, 437, 0, 379, 360,
	599, 0, 0, 377, 330, 406, 368, 412, 395, 420,
	373, 369, 256, 396, 295, 341, 268, 270, 290, 297,
	299, 301, 302, 350, 351, 363, 384, 397, 398, 399,
	294, 278, 378, 279, 312, 280, 257, 286, 284, 287,
	386, 288, 259, 364, 403, 0, 307, 374, 337, 260,
	336, 365, 402, 401, 269, 428, 434, 435, 522, 0,
	440, 600, 601, 602, 449, 454, 455, 456, 458, 459,
	460, 461, 523, 540, 507, 478, 442, 531, 474, 479,
	543, 0, 0, 0, 433, 326, 327, 0, 305, 253,
	254, 596, 291, 356, 545, 578, 470, 0, 532, 471,
	480, 283, 504, 516, 515, 352, 432, 0, 527, 530,
	462, 595, 0, 524, 539, 598, 538, 592, 362, 0,
	383, 536, 483, 0, 528, 502, 0, 529, 498, 533,
	0, 472, 0, 390, 414, 426, 443, 446, 473, 558,
	559, 560, 258, 445, 562, 563, 564, 565, 566, 567,
	568, 561, 417, 505, 482, 508, 425, 485, 484, 0,
	0, 519, 441, 520, 521, 346, 347, 348, 349, 309,
	546, 276, 444, 372, 0, 506, 0, 0, 0, 0,
	0, 0, 0, 0, 511, 512, 509, 603, 0, 569,
	570, 0, 0, 438, 439, 304, 311, 457, 313, 275,
	361, 306, 423, 320, 0, 450, 513, 451, 572, 575,
	573, 574, 353, 316, 317, 387, 321, 331, 375, 422,
	359, 380, 273, 413, 388, 335, 499, 526, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 245,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 554, 553, 552, 551, 550, 549,
	548, 547, 0, 0, 496, 400, 285, 250, 281, 282,
	289, 593, 590, 404, 594, 0, 255, 477, 329, 0,
	370, 303, 541, 542, 206, 207, 208, 209, 210, 211,
	212, 213, 251, 214, 215, 216, 217, 218, 219, 220,
	223, 224, 225, 226, 227, 228, 229, 230, 544, 221,
	222, 231, 232, 233, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 0, 0, 0, 252, 246,
	247, 248, 249, 0, 0, 0, 429, 430, 431, 453,
	415, 475, 591, 0, 0, 0, 0, 0, 0, 0,
	525, 537, 571, 0, 580, 581, 583, 585, 584, 0,
	597, 467, 577, 358, 0, 481, 514, 503, 586, 469,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	298, 0, 0, 328, 518, 500, 510, 501, 486, 487,
	488, 495, 308, 489, 490, 491, 463, 492, 464, 493,
	494, 0, 517, 468, 389, 342, 535, 534, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 196, 0, 0, 3365, 0,
	0, 0, 271, 197, 465, 582, 466, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 274, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 476, 0, 0, 0, 0, 0, 261, 394,
	411, 272, 385, 424, 277, 392, 267, 357, 381, 0,
	0, 263, 409, 391, 339, 318, 319, 262, 0, 376,
	296, 310, 293, 355, 0, 408, 436, 292, 427, 0,
	419, 265, 0, 418, 354, 405, 410, 340, 334, 264,
	407, 338, 333, 322, 300, 452, 323, 324, 314, 366,
	332, 367, 315, 344, 343, 345, 0, 0, 0, 0,
	0, 447, 448, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 576, 0, 0, 579, 0,
	421, 0, 0, 0, 0, 0, 0, 393, 0, 0,
	325, 0, 0, 0, 437, 0, 379, 360, 599, 0,
	0, 377, 330, 406, 368, 412, 395, 420, 373, 369,
	256, 396, 295, 341, 268, 270, 290, 297, 299, 301,
	302, 350, 351, 363, 384, 397, 398, 399, 294, 278,
	378, 279, 312, 280, 257, 286, 284, 287, 386, 288,
	259, 364, 403, 0, 307, 374, 337, 260, 336, 365,
	402, 401, 269, 428, 434, 435, 522, 0, 440, 600,
	601, 602, 449, 454, 455, 456, 458, 459, 460, 461,
	523, 540, 507, 478, 442, 531, 474, 479, 543, 0,
	0, 0, 433, 326, 327, 0, 305, 253, 254, 596,
	291, 356, 545, 578, 470, 0, 532, 471, 480, 283,
	504, 516, 515, 352, 432, 0, 527, 530, 462, 595,
	0, 524, 539, 598, 538, 592, 362, 0, 383, 536,
	483, 0, 528, 502, 0, 529, 498, 533, 0, 472,
	0, 390, 414, 426, 443, 446, 473, 558, 559, 560,
	258, 445, 562, 563, 564, 565, 566, 567, 568, 561,
	417, 505, 482, 508, 425, 485, 484, 0, 0, 519,
	441, 520, 521, 346, 347, 348, 349, 309, 546, 276,
	444, 372, 0, 506, 0, 0, 0, 0, 0, 0,
	0, 0, 511, 512, 509, 603, 0, 569, 570, 0,
	0, 438, 439, 304, 311, 457, 313, 275, 361, 306,
	423, 320, 0, 450, 513, 451, 572, 575, 573, 574,
	353, 316, 317, 387, 321, 331, 375, 422, 359, 380,
	273, 413, 388, 335, 499, 526, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 245, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 554, 553, 552, 551, 550, 549, 548, 547,
	0, 0, 496, 400, 285, 250, 281, 282, 289, 593,
	590, 404, 594, 0, 255, 477, 329, 0, 370, 303,
	541, 542, 206, 207, 208, 209, 210, 211, 212, 213,
	251, 214, 215, 216, 217, 218, 219, 220, 223, 224,
	225, 226, 227, 228, 229, 230, 544, 221, 222, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 0, 0, 0, 252, 246, 247, 248,
	249, 0, 0, 0, 429, 430, 431, 453, 415, 475,
	591, 0, 0, 0, 0, 0, 0, 0, 525, 537,
	571, 0, 580, 581, 583, 585, 584, 0, 597, 467,
	577, 358, 0, 481, 514, 503, 586, 469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 0,
	0, 328, 518, 500, 510, 501, 486, 487, 488, 495,
	308, 489, 490, 491, 463, 492, 464, 493, 494, 0,
	517, 468, 389, 342, 535, 534, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 196, 0, 0, 0, 0, 0, 0,
	271, 197, 465, 582, 466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	476, 0, 0, 0, 0, 0, 261, 394, 411, 272,
	385, 424, 277, 392, 267, 357, 381, 0, 0, 263,
	409, 391, 339, 318, 319, 262, 0, 376, 296, 310,
	293, 355, 0, 408, 436, 292, 427, 0, 419, 265,
	0, 418, 354, 405, 410, 340, 334, 264, 407, 338,
	333, 322, 300, 452, 323, 324, 314, 366, 332, 367,
	315, 344, 343, 345, 0, 0, 0, 0, 0, 447,
	448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 576, 0, 0, 579, 0, 421, 0,
	0, 0, 3490, 0, 0, 393, 0, 0, 325, 0,
	0, 0, 437, 0, 379, 360, 599, 0, 0, 377,
	330, 406, 368, 412, 395, 420, 373, 369, 256, 396,
	295, 341, 268, 270, 290, 297, 299, 301, 302, 350,
	351, 363, 384, 397, 398, 399, 294, 278, 378, 279,
	312, 280, 257, 286, 284, 287, 386, 288, 259, 364,
	403, 0, 307, 374, 337, 260, 336, 365, 402, 401,
	269, 428, 434, 435, 522, 0, 440, 600, 601, 602,
	449, 454, 455, 456, 458, 459, 460, 461, 523, 540,
	507, 478, 442, 531, 474, 479, 543, 0, 0, 0,
	433, 326, 327, 0, 305, 253, 254, 596, 291, 356,
	545, 578, 470, 0, 532, 471, 480, 283, 504, 516,
	515, 352, 432, 0, 527, 530, 462, 595, 0, 524,
	539, 598, 538, 592, 362, 0, 383, 536, 483, 0,
	528, 502, 0, 529, 498, 533, 0, 472, 0, 390,
	414, 426, 443, 446, 473, 558, 559, 560, 258, 445,
	562, 563, 564, 565, 566, 567, 568, 561, 417, 505,
	482, 508, 425, 485, 484, 0, 0, 519, 441, 520,
	521, 346, 347, 348, 349, 309, 546, 276, 444, 372,
	0, 506, 0, 0, 0, 0, 0, 0, 0, 0,
	511, 512, 509, 603, 0, 569, 570, 0, 0, 438,
	439, 304, 311, 457, 313, 275, 361, 306, 423, 320,
	0, 450, 513, 451, 572, 575, 573, 574, 353, 316,
	317, 387, 321, 331, 375, 422, 359, 380, 273, 413,
	388, 335, 499, 526, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 245, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	554, 553, 552, 551, 550, 549, 548, 547, 0, 0,
	496, 400, 285, 250, 281, 282, 289, 593, 590, 404,
	594, 0, 255, 477, 329, 0, 370, 303, 541, 542,
	206, 207, 208, 209, 210, 211, 212, 213, 251, 214,
	215, 216, 217, 218, 219, 220, 223, 224, 225, 226,
	227, 228, 229, 230, 544, 221, 222, 231, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 0, 0, 0, 252, 246, 247, 248, 249, 0,
	0, 0, 429, 430, 431, 453, 415, 475, 591, 0,
	0, 0, 0, 0, 0, 0, 525, 537, 571, 0,
	580, 581, 583, 585, 584, 0, 597, 467, 577, 358,
	0, 481, 514, 503, 586, 469, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 0, 0, 328,
	518, 500, 510, 501, 486, 487, 488, 495, 308, 489,
	490, 491, 463, 492, 464, 493, 494, 0, 517, 468,
	389, 342, 535, 534, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3220, 0,
	0, 196, 0, 0, 0, 0, 0, 0, 271, 197,
	465, 582, 466, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 274, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 476, 0,
	0, 0, 0, 0, 261, 394, 411, 272, 385, 424,
	277, 392, 267, 357, 381, 0, 0, 263, 409, 391,
	339, 318, 319, 262, 0, 376, 296, 310, 293, 355,
	0, 408, 436, 292, 427, 0, 419, 265, 0, 418,
	354, 405, 410, 340, 334, 264, 407, 338, 333, 322,
	300, 452, 323, 324, 314, 366, 332, 367, 315, 344,
	343, 345, 0, 0, 0, 0, 0, 447, 448, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 576, 0, 0, 579, 0, 421, 0, 0, 0,
	0, 0, 0, 393, 0, 0, 325, 0, 0, 0,
	437, 0, 379, 360, 599, 0, 0, 377, 330, 406,
	368, 412, 395, 420, 373, 369, 256, 396, 295, 341,
	268, 270, 290, 297, 299, 301, 302, 350, 351, 363,
	384, 397, 398, 399, 294, 278, 378, 279, 312, 280,
	257, 286, 284, 287, 386, 288, 259, 364, 403, 0,
	307, 374, 337, 260, 336, 365, 402, 401, 269, 428,
	434, 435, 522, 0, 440, 600, 601, 602, 449, 454,
	455, 456, 458, 459, 460, 461, 523, 540, 507, 478,
	442, 531, 474, 479, 543, 0, 0, 0, 433, 326,
	327, 0, 305, 253, 254, 596, 291, 356, 545, 578,
	470, 0, 532, 471, 480, 283, 504, 516, 515, 352,
	432, 0, 527, 530, 462, 595, 0, 524, 539, 598,
	538, 592, 362, 0, 383, 536, 483, 0, 528, 502,
	0, 529, 498, 533, 0, 472, 0, 390, 414, 426,
	443, 446, 473, 558, 559, 560, 258, 445, 562, 563,
	564, 565, 566, 567, 568, 561, 417, 505, 482, 508,
	425, 485, 484, 0, 0, 519, 441, 520, 521, 346,
	347, 348, 349, 309, 546, 276, 444, 372, 0, 506,
	0, 0, 0, 0, 0, 0, 0, 0, 511, 512,
	509, 603, 0, 569, 570, 0, 0, 438, 439, 304,
	311, 457, 313, 275, 361, 306, 423, 320, 0, 450,
	513, 451, 572, 575, 573, 574, 353, 316, 317, 387,
	321, 331, 375, 422, 359, 380, 273, 413, 388, 335,
	499, 526, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 245, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 554, 553,
	552, 551, 550, 549, 548, 547, 0, 0, 496, 400,
	285, 250, 281, 282, 289, 593, 590, 404, 594, 0,
	255, 477, 329, 0, 370, 303, 541, 542, 206, 207,
	208, 209, 210, 211, 212, 213, 251, 214, 215, 216,
	217, 218, 219, 220, 223, 224, 225, 226, 227, 228,
	229, 230, 544, 221, 222, 231, 232, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 0,
	0, 0, 252, 246, 247, 248, 249, 0, 0, 0,
	429, 430, 431, 453, 415, 475, 591, 0, 0, 0,
	0, 0, 0, 0, 525, 537, 571, 0, 580, 581,
	583, 585, 584, 0, 597, 467, 577, 358, 0, 481,
	514, 503, 586, 469, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 298, 0, 0, 328, 518, 500,
	510, 501, 486, 487, 488, 495, 308, 489, 490, 491,
	463, 492, 464, 493, 494, 0, 517, 468, 389, 342,
	535, 534, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3380, 0, 196,
	0, 0, 0, 0, 0, 0, 271, 197, 465, 582,
	466, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 476, 0, 0, 0,
	0, 0, 261, 394, 411, 272, 385, 424, 277, 392,
	267, 357, 381, 0, 0, 263, 409, 391, 339, 318,
	319, 262, 0, 376, 296, 310, 293, 355, 0, 408,
	436, 292, 427, 0, 419, 265, 0, 418, 354, 405,
	410, 340, 334, 264, 407, 338, 333, 322, 300, 452,
	323, 324, 314, 366, 332, 367, 315, 344, 343, 345,
	0, 0, 0, 0, 0, 447, 448, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 576,
	0, 0, 579, 0, 421, 0, 0, 0, 0, 0,
	0, 393, 0, 0, 325, 0, 0, 0, 437, 0,
	379, 360, 599, 0, 0, 377, 330, 406, 368, 412,
	395, 420, 373, 369, 256, 396, 295, 341, 268, 270,
	290, 297, 299, 301, 302, 350, 351, 363, 384, 397,
	398, 399, 294, 278, 378, 279, 312, 280, 257, 286,
	284, 287, 386, 288, 259, 364, 403, 0, 307, 374,
	337, 260, 336, 365, 402, 401, 269, 428, 434, 435,
	522, 0, 440, 600, 601, 602, 449, 454, 455, 456,
	458, 459, 460, 461, 523, 540, 507, 478, 442, 531,
	474, 479, 543, 0, 0, 0, 433, 326, 327, 0,
	305, 253, 254, 596, 291, 356, 545, 578, 470, 0,
	532, 471, 480, 283, 504, 516, 515, 352, 432, 0,
	527, 530, 462, 595, 0, 524, 539, 598, 538, 592,
	362, 0, 383, 536, 483, 0, 528, 502, 0, 529,
	498, 533, 0, 472, 0, 390, 414, 426, 443, 446,
	473, 558, 559, 560, 258, 445, 562, 563, 564, 565,
	566, 567, 568, 561, 417, 505, 482, 508, 425, 485,
	484, 0, 0, 519, 441, 520, 521, 346, 347, 348,
	349, 309, 546, 276, 444, 372, 0, 506, 0, 0,
	0, 0, 0, 0, 0, 0, 511, 512, 509, 603,
	0, 569, 570, 0, 0, 438, 439, 304, 311, 457,
	313, 275, 361, 306, 423, 320, 0, 450, 513, 451,
	572, 575, 573, 574, 353, 316, 317, 387, 321, 331,
	375, 422, 359, 380, 273, 413, 388, 335, 499, 526,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 245, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 554, 553, 552, 551,
	550, 549, 548, 547, 0, 0, 496, 400, 285, 250,
	281, 282, 289, 593, 590, 404, 594, 0, 255, 477,
	329, 0, 370, 303, 541, 542, 206, 207, 208, 209,
	210, 211, 212, 213, 251, 214, 215, 216, 217, 218,
	219, 220, 223, 224, 225, 226, 227, 228, 229, 230,
	544, 221, 222, 231, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 0, 0, 0,
	252, 246, 247, 248, 249, 0, 0, 0, 429, 430,
	431, 453, 415, 475, 591, 0, 0, 0, 0, 0,
	0, 0, 525, 537, 571, 0, 580, 581, 583, 585,
	584, 0, 597, 467, 577, 358, 0, 481, 514, 503,
	586, 469, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 328, 518, 500, 510, 501,
	486, 487, 488, 495, 308, 489, 490, 491, 463, 492,
	464, 493, 494, 0, 517, 468, 389, 342, 535, 534,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 196, 0, 0,
	0, 0, 0, 0, 271, 197, 465, 582, 466, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 476, 0, 0, 0, 0, 0,
	261, 394, 411, 272, 385, 424, 277, 392, 267, 357,
	381, 0, 0, 263, 409, 391, 339, 318, 319, 262,
	0, 376, 296, 310, 293, 355, 0, 408, 436, 292,
	427, 0, 419, 265, 0, 418, 354, 405, 410, 340,
	334, 264, 407, 338, 333, 322, 300, 452, 323, 324,
	314, 366, 332, 367, 315, 344, 343, 345, 0, 0,
	0, 0, 0, 447, 448, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 576, 0, 0,
	579, 0, 421, 0, 0, 0, 3306, 0, 0, 393,
	0, 0, 325, 0, 0, 0, 437, 0, 379, 360,
	599, 0, 0, 377, 330, 406, 368, 412, 395, 420,
	373, 369, 256, 396, 295, 341, 268, 270, 290, 297,
	299, 301, 302, 350, 351, 363, 384, 397, 398, 399,
	294, 278, 378, 279, 312, 280, 257, 286, 284, 287,
	386, 288, 259, 364, 403, 0, 307, 374, 337, 260,
	336, 365, 402, 401, 269, 428, 434, 435, 522, 0,
	440, 600, 601, 602, 449, 454, 455, 456, 458, 459,
	460, 461, 523, 540, 507, 478, 442, 531, 474, 479,
	543, 0, 0, 0, 433, 326, 327, 0, 305, 253,
	254, 596, 291, 356, 545, 578, 470, 0, 532, 471,
	480, 283, 504, 516, 515, 352, 432, 0, 527, 530,
	462, 595, 0, 524, 539, 598, 538, 592, 362, 0,
	383, 536, 483, 0, 528, 502, 0, 529, 498, 533,
	0, 472, 0, 390, 414, 426, 443, 446, 473, 558,
	559, 560, 258, 445, 562, 563, 564, 565, 566, 567,
	568, 561, 417, 505, 482, 508, 425, 485, 484, 0,
	0, 519, 441, 520, 521, 346, 347, 348, 349, 309,
	546, 276, 444, 372, 0, 506, 0, 0, 0, 0,
	0, 0, 0, 0, 511, 512, 509, 603, 0, 569,
	570, 0, 0, 438, 439, 304, 311, 457, 313, 275,
	361, 306, 423, 320, 0, 450, 513, 451, 572, 575,
	573, 574, 353, 316, 317, 387, 321, 331, 375, 422,
	359, 380, 273, 413, 388, 335, 499, 526, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 245,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 554, 553, 552, 551, 550, 549,
	548, 547, 0, 0, 496, 400, 285, 250, 281, 282,
	289, 593, 590, 404, 594, 0, 255, 477, 329, 0,
	370, 303, 541, 542, 206, 207, 208, 209, 210, 211,
	212, 213, 251, 214, 215, 216, 217, 218, 219, 220,
	223, 224, 225, 226, 227, 228, 229, 230, 544, 221,
	222, 231, 232, 233, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 0, 0, 0, 252, 246,
	247, 248, 249, 0, 0, 0, 429, 430, 431, 453,
	415, 475, 591, 0, 0, 0, 0, 0, 0, 0,
	525, 537, 571, 0, 580, 581, 583, 585, 584, 0,
	597, 467, 577, 358, 0, 481, 514, 503, 586, 469,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	298, 0, 0, 328, 518, 500, 510, 501, 486, 487,
	488, 495, 308, 489, 490, 491, 463, 492, 464, 493,
	494, 0, 517, 468, 389, 342, 535, 534, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 196, 0, 0, 2869, 0,
	0, 0, 271, 197, 465, 582, 466, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 274, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 476, 0, 0, 0, 0, 0, 261, 394,
	411, 272, 385, 424, 277, 392, 267, 357, 381, 0,
	0, 263, 409, 391, 339, 318, 319, 262, 0, 376,
	296, 310, 293, 355, 0, 408, 436, 292, 427, 0,
	419, 265, 0, 418, 354, 405, 410, 340, 334, 264,
	407, 338, 333, 322, 300, 452, 323, 324, 314, 366,
	332, 367, 315, 344, 343, 345, 0, 0, 0, 0,
	0, 447, 448, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 576, 0, 0, 579, 0,
	421, 0, 0, 0, 0, 0, 0, 393, 0, 0,
	325, 0, 0, 0, 437, 0, 379, 360, 599, 0,
	0, 377, 330, 406, 368, 412, 395, 420, 373, 369,
	256, 396, 295, 341, 268, 270, 290, 297, 299, 301,
	302, 350, 351, 363, 384, 397, 398, 399, 294, 278,
	378, 279, 312, 280, 257, 286, 284, 287, 386, 288,
	259, 364, 403, 0, 307, 374, 337, 260, 336, 365,
	402, 401, 269, 428, 434, 435, 522, 0, 440, 600,
	601, 602, 449, 454, 455, 456, 458, 459, 460, 461,
	523, 540, 507, 478, 442, 531, 474, 479, 543, 0,
	0, 0, 433, 326, 327, 0, 305, 253, 254, 596,
	291, 356, 545, 578, 470, 0, 532, 471, 480, 283,
	504, 516, 515, 352, 432, 0, 527, 530, 462, 595,
	0, 524, 539, 598, 538, 592, 362, 0, 383, 536,
	483, 0, 528, 502, 0, 529, 498, 533, 0, 472,
	0, 390, 414, 426, 443, 446, 473, 558, 559, 560,
	258, 445, 562, 563, 564, 565, 566, 567, 568, 561,
	417, 505, 482, 508, 425, 485, 484, 0, 0, 519,
	441, 520, 521, 346, 347, 348, 349, 309, 546, 276,
	444, 372, 0, 506, 0, 0, 0, 0, 0, 0,
	0, 0, 511, 512, 509, 603, 0, 569, 570, 0,
	0, 438, 439, 304, 311, 457, 313, 275, 361, 306,
	423, 320, 0, 450, 513, 451, 572, 575, 573, 574,
	353, 316, 317, 387, 321, 331, 375, 422, 359, 380,
	273, 413, 388, 335, 499, 526, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 245, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 554, 553, 552, 551, 550, 549, 548, 547,
	0, 0, 496, 400, 285, 250, 281, 282, 289, 593,
	590, 404, 594, 0, 255, 477, 329, 0, 370, 303,
	541, 542, 206, 207, 208, 209, 210, 211, 212, 213,
	251, 214, 215, 216, 217, 218, 219, 220, 223, 224,
	225, 226, 227, 228, 229, 230, 544, 221, 222, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 0, 0, 0, 252, 246, 247, 248,
	249, 0, 0, 0, 429, 430, 431, 453, 415, 475,
	591, 0, 0, 0, 0, 0, 0, 0, 525, 537,
	571, 0, 580, 581, 583, 585, 584, 0, 597, 467,
	577, 358, 0, 481, 514, 503, 586, 469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 0,
	0, 328, 518, 500, 510, 501, 486, 487, 488, 495,
	308, 489, 490, 491, 463, 492, 464, 493, 494, 0,
	517, 468, 389, 342, 535, 534, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 196, 0, 0, 0, 0, 0, 0,
	271, 197, 465, 582, 466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2885, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	476, 0, 0, 0, 0, 0, 261, 394, 411, 272,
	385, 424, 277, 392, 267, 357, 381, 0, 0, 263,
	409, 391, 339, 318, 319, 262, 0, 376, 296, 310,
	293, 355, 0, 408, 436, 292, 427, 0, 419, 265,
	0, 418, 354, 405, 410, 340, 334, 264, 407, 338,
	333, 322, 300, 452, 323, 324, 314, 366, 332, 367,
	315, 344, 343, 345, 0, 0, 0, 0, 0, 447,
	448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 576, 0, 0, 579, 0, 421, 0,
	0, 0, 0, 0, 0, 393, 0, 0, 325, 0,
	0, 0, 437, 0, 379, 360, 599, 0, 0, 377,
	330, 406, 368, 412, 395, 420, 373, 369, 256, 396,
	295, 341, 268, 270, 290, 297, 299, 301, 302, 350,
	351, 363, 384, 397, 398, 399, 294, 278, 378, 279,
	312, 280, 257, 286, 284, 287, 386, 288, 259, 364,
	403, 0, 307, 374, 337, 260, 336, 365, 402, 401,
	269, 428, 434, 435, 522, 0, 440, 600, 601, 602,
	449, 454, 455, 456, 458, 459, 460, 461, 523, 540,
	507, 478, 442, 531, 474, 479, 543, 0, 0, 0,
	433, 326, 327, 0, 305, 253, 254, 596, 291, 356,
	545, 578, 470, 0, 532, 471, 480, 283, 504, 516,
	515, 352, 432, 0, 527, 530, 462, 595, 0, 524,
	539, 598, 538, 592, 362, 0, 383, 536, 483, 0,
	528, 502, 0, 529, 498, 533, 0, 472, 0, 390,
	414, 426, 443, 446, 473, 558, 559, 560, 258, 445,
	562, 563, 564, 565, 566, 567, 568, 561, 417, 505,
	482, 508, 425, 485, 484, 0, 0, 519, 441, 520,
	521, 346, 347, 348, 349, 309, 546, 276, 444, 372,
	0, 506, 0, 0, 0, 0, 0, 0, 0, 0,
	511, 512, 509, 603, 0, 569, 570, 0, 0, 438,
	439, 304, 311, 457, 313, 275, 361, 306, 423, 320,
	0, 450, 513, 451, 572, 575, 573, 574, 353, 316,
	317, 387, 321, 331, 375, 422, 359, 380, 273, 413,
	388, 335, 499, 526, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 245, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	554, 553, 552, 551, 550, 549, 548, 547, 0, 0,
	496, 400, 285, 250, 281, 282, 289, 593, 590, 404,
	594, 0, 255, 477, 329, 0, 370, 303, 541, 542,
	206, 207, 208, 209, 210, 211, 212, 213, 251, 214,
	215, 216, 217, 218, 219, 220, 223, 224, 225, 226,
	227, 228, 229, 230, 544, 221, 222, 231, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 0, 0, 0, 252, 246, 247, 248, 249, 0,
	0, 0, 429, 430, 431, 453, 415, 475, 591, 0,
	0, 0, 0, 0, 0, 0, 525, 537, 571, 0,
	580, 581, 583, 585, 584, 0, 597, 467, 577, 358,
	0, 481, 514, 503, 586, 469, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 0, 0, 328,
	518, 500, 510, 501, 486, 487, 488, 495, 308, 489,
	490, 491, 463, 492, 464, 493, 494, 0, 517, 468,
	389, 342, 535, 534, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1848, 0,
	0, 196, 0, 0, 0, 0, 0, 0, 271, 197,
	465, 582, 466, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 274, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 476, 0,
	0, 0, 0, 0, 261, 394, 411, 272, 385, 424,
	277, 392, 267, 357, 381, 0, 0, 263, 409, 391,
	339, 318, 319, 262, 0, 376, 296, 310, 293, 355,
	0, 408, 436, 292, 427, 0, 419, 265, 0, 418,
	354, 405, 410, 340, 334, 264, 407, 338, 333, 322,
	300, 452, 323, 324, 314, 366, 332, 367, 315, 344,
	343, 345, 0, 0, 0, 0, 0, 447, 448, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 576, 0, 0, 579, 0, 421, 0, 0, 0,
	0, 0, 0, 393, 0, 0, 325, 0, 0, 0,
	437, 0, 379, 360, 599, 0, 0, 377, 330, 406,
	368, 412, 395, 420, 373, 369, 256, 396, 295, 341,
	268, 270, 290, 297, 299, 301, 302, 350, 351, 363,
	384, 397, 398, 399, 294, 278, 378, 279, 312, 280,
	257, 286, 284, 287, 386, 288, 259, 364, 403, 0,
	307, 374, 337, 260, 336, 365, 402, 401, 269, 428,
	434, 435, 522, 0, 440, 600, 601, 602, 449, 454,
	455, 456, 458, 459, 460, 461, 523, 540, 507, 478,
	442, 531, 474, 479, 543, 0, 0, 0, 433, 326,
	327, 0, 305, 253, 254, 596, 291, 356, 545, 578,
	470, 0, 532, 471, 480, 283, 504, 516, 515, 352,
	432, 0, 527, 530, 462, 595, 0, 524, 539, 598,
	538, 592, 362, 0, 383, 536, 483, 0, 528, 502,
	0, 529, 498, 533, 0, 472, 0, 390, 414, 426,
	443, 446, 473, 558, 559, 560, 258, 445, 562, 563,
	564, 565, 566, 567, 568, 561, 417, 505, 482, 508,
	425, 485, 484, 0, 0, 519, 441, 520, 521, 346,
	347, 348, 349, 309, 546, 276, 444, 372, 0, 506,
	0, 0, 0, 0, 0, 0, 0, 0, 511, 512,
	509, 603, 0, 569, 570, 0, 0, 438, 439, 304,
	311, 457, 313, 275, 361, 306, 423, 320, 0, 450,
	513, 451, 572, 575, 573, 574, 353, 316, 317, 387,
	321, 331, 375, 422, 359, 380, 273, 413, 388, 335,
	499, 526, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 245, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 554, 553,
	552, 551, 550, 549, 548, 547, 0, 0, 496, 400,
	285, 250, 281, 282, 289, 593, 590, 404, 594, 0,
	255, 477, 329, 0, 370, 303, 541, 542, 206, 207,
	208, 209, 210, 211, 212, 213, 251, 214, 215, 216,
	217, 218, 219, 220, 223, 224, 225, 226, 227, 228,
	229, 230, 544, 221, 222, 231, 232, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 0,
	0, 0, 252, 246, 247, 248, 249, 0, 0, 0,
	429, 430, 431, 453, 415, 475, 591, 0, 0, 0,
	0, 0, 0, 0, 525, 537, 571, 0, 580, 581,
	583, 585, 584, 0, 597, 467, 577, 358, 0, 481,
	514, 503, 586, 469, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 298, 0, 0, 328, 518, 500,
	510, 501, 486, 487, 488, 495, 308, 489, 490, 491,
	463, 492, 464, 493, 494, 0, 517, 468, 389, 342,
	535, 534, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 196,
	0, 0, 0, 0, 0, 0, 271, 197, 465, 582,
	466, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2982, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 476, 0, 0, 0,
	0, 0, 261, 394, 411, 272, 385, 424, 277, 392,
	267, 357, 381, 0, 0, 263, 409, 391, 339, 318,
	319, 262, 0, 376, 296, 310, 293, 355, 0, 408,
	436, 292, 427, 0, 419, 265, 0, 418, 354, 405,
	410, 340, 334, 264, 407, 338, 333, 322, 300, 452,
	323, 324, 314, 366, 332, 367, 315, 344, 343, 345,
	0, 0, 0, 0, 0, 447, 448, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 576,
	0, 0, 579, 0, 421, 0, 0, 0, 0, 0,
	0, 393, 0, 0, 325, 0, 0, 0, 437, 0,
	379, 360, 599, 0, 0, 377, 330, 406, 368, 412,
	395, 420, 373, 369, 256, 396, 295, 341, 268, 270,
	290, 297, 299, 301, 302, 350, 351, 363, 384, 397,
	398, 399, 294, 278, 378, 279, 312, 280, 257, 286,
	284, 287, 386, 288, 259, 364, 403, 0, 307, 374,
	337, 260, 336, 365, 402, 401, 269, 428, 434, 435,
	522, 0, 440, 600, 601, 602, 449, 454, 455, 456,
	458, 459, 460, 461, 523, 540, 507, 478, 442, 531,
	474, 479, 543, 0, 0, 0, 433, 326, 327, 0,
	305, 253, 254, 596, 291, 356, 545, 578, 470, 0,
	532, 471, 480, 283, 504, 516, 515, 352, 432, 0,
	527, 530, 462, 595, 0, 524, 539, 598, 538, 592,
	362, 0, 383, 536, 483, 0, 528, 502, 0, 529,
	498, 533, 0, 472, 0, 390, 414, 426, 443, 446,
	473, 558, 559, 560, 258, 445, 562, 563, 564, 565,
	566, 567, 568, 561, 417, 505, 482, 508, 425, 485,
	484, 0, 0, 519, 441, 520, 521, 346, 347, 348,
	349, 309, 546, 276, 444, 372, 0, 506, 0, 0,
	0, 0, 0, 0, 0, 0, 511, 512, 509, 603,
	0, 569, 570, 0, 0, 438, 439, 304, 311, 457,
	313, 275, 361, 306, 423, 320, 0, 450, 513, 451,
	572, 575, 573, 574, 353, 316, 317, 387, 321, 331,
	375, 422, 359, 380, 273, 413, 388, 335, 499, 526,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 245, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 554, 553, 552, 551,
	550, 549, 548, 547, 0, 0, 496, 400, 285, 250,
	281, 282, 289, 593, 590, 404, 594, 0, 255, 477,
	329, 0, 370, 303, 541, 542, 206, 207, 208, 209,
	210, 211, 212, 213, 251, 214, 215, 216, 217, 218,
	219, 220, 223, 224, 225, 226, 227, 228, 229, 230,
	544, 221, 222, 231, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 0, 0, 0,
	252, 246, 247, 248, 249, 0, 0, 0, 429, 430,
	431, 453, 415, 475, 591, 0, 0, 0, 0, 0,
	0, 0, 525, 537, 571, 0, 580, 581, 583, 585,
	584, 0, 597, 467, 577, 358, 0, 481, 514, 503,
	586, 469, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 328, 518, 500, 510, 501,
	486, 487, 488, 495, 308, 489, 490, 491, 463, 492,
	464, 493, 494, 0, 517, 468, 389, 342, 535, 534,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 196, 0, 0,
	2838, 0, 0, 0, 271, 197, 465, 582, 466, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 476, 0, 0, 0, 0, 0,
	261, 394, 411, 272, 385, 424, 277, 392, 267, 357,
	381, 0, 0, 263, 409, 391, 339, 318, 319, 262,
	0, 376, 296, 310, 293, 355, 0, 408, 436, 292,
	427, 0, 419, 265, 0, 418, 354, 405, 410, 340,
	334, 264, 407, 338, 333, 322, 300, 452, 323, 324,
	314, 366, 332, 367, 315, 344, 343, 345, 0, 0,
	0, 0, 0, 447, 448, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 576, 0, 0,
	579, 0, 421, 0, 0, 0, 0, 0, 0, 393,
	0, 0, 325, 0, 0, 0, 437, 0, 379, 360,
	599, 0, 0, 377, 330, 406, 368, 412, 395, 420,
	373, 369, 256, 396, 295, 341, 268, 270, 290, 297,
	299, 301, 302, 350, 351, 363, 384, 397, 398, 399,
	294, 278, 378, 279, 312, 280, 257, 286, 284, 287,
	386, 288, 259, 364, 403, 0, 307, 374, 337, 260,
	336, 365, 402, 401, 269, 428, 434, 435, 522, 0,
	440, 600, 601, 602, 449, 454, 455, 456, 458, 459,
	460, 461, 523, 540, 507, 478, 442, 531, 474, 479,
	543, 0, 0, 0, 433, 326, 327, 0, 305, 253,
	254, 596, 291, 356, 545, 578, 470, 0, 532, 471,
	480, 283, 504, 516, 515, 352, 432, 0, 527, 530,
	462, 595, 0, 524, 539, 598, 538, 592, 362, 0,
	383, 536, 483, 0, 528, 502, 0, 529, 498, 533,
	0, 472, 0, 390, 414, 426, 443, 446, 473, 558,
	559, 560, 258, 445, 562, 563, 564, 565, 566, 567,
	568, 561, 417, 505, 482, 508, 425, 485, 484, 0,
	0, 519, 441, 520, 521, 346, 347, 348, 349, 309,
	546, 276, 444, 372, 0, 506, 0, 0, 0, 0,
	0, 0, 0, 0, 511, 512, 509, 603, 0, 569,
	570, 0, 0, 438, 439, 304, 311, 457, 313, 275,
	361, 306, 423, 320, 0, 450, 513, 451, 572, 575,
	573, 574, 353, 316, 317, 387, 321, 331, 375, 422,
	359, 380, 273, 413, 388, 335, 499, 526, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 245,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 554, 553, 552, 551, 550, 549,
	548, 547, 0, 0, 496, 400, 285, 250, 281, 282,
	289, 593, 590, 404, 594, 0, 255, 477, 329, 0,
	370, 303, 541, 542, 206, 207, 208, 209, 210, 211,
	212, 213, 251, 214, 215, 216, 217, 218, 219, 220,
	223, 224, 225, 226, 227, 228, 229, 230, 544, 221,
	222, 231, 232, 233, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 0, 0, 0, 252, 246,
	247, 248, 249, 0, 0, 0, 429, 430, 431, 453,
	415, 475, 591, 0, 0, 0, 0, 0, 0, 0,
	525, 537, 571, 0, 580, 581, 583, 585, 584, 0,
	597, 467, 577, 358, 0, 481, 514, 503, 586, 469,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	298, 0, 0, 328, 518, 500, 510, 501, 486, 487,
	488, 495, 308, 489, 490, 491, 463, 492, 464, 493,
	494, 0, 517, 468, 389, 342, 535, 534, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 196, 0, 0, 0, 0,
	0, 0, 271, 197, 465, 582, 466, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 274, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2751, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 476, 0, 0, 0, 0, 0, 261, 394,
	411, 272, 385, 424, 277, 392, 267, 357, 381, 0,
	0, 263, 409, 391, 339, 318, 319, 262, 0, 376,
	296, 310, 293, 355, 0, 408, 436, 292, 427, 0,
	419, 265, 0, 418, 354, 405, 410, 340, 334, 264,
	407, 338, 333, 322, 300, 452, 323, 324, 314, 366,
	332, 367, 315, 344, 343, 345, 0, 0, 0, 0,
	0, 447, 448, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 576, 0, 0, 579, 0,
	421, 0, 0, 0, 0, 0, 0, 393, 0, 0,
	325, 0, 0, 0, 437, 0, 379, 360, 599, 0,
	0, 377, 330, 406, 368, 412, 395, 420, 373, 369,
	256, 396, 295, 341, 268, 270, 290, 297, 299, 301,
	302, 350, 351, 363, 384, 397, 398, 399, 294, 278,
	378, 279, 312, 280, 257, 286, 284, 287, 386, 288,
	259, 364, 403, 0, 307, 374, 337, 260, 336, 365,
	402, 401, 269, 428, 434, 435, 522, 0, 440, 600,
	601, 602, 449, 454, 455, 456, 458, 459, 460, 461,
	523, 540, 507, 478, 442, 531, 474, 479, 543, 0,
	0, 0, 433, 326, 327, 0, 305, 253, 254, 596,
	291, 356, 545, 578, 470, 0, 532, 471, 480, 283,
	504, 516, 515, 352, 432, 0, 527, 530, 462, 595,
	0, 524, 539, 598, 538, 592, 362, 0, 383, 536,
	483, 0, 528, 502, 0, 529, 498, 533, 0, 472,
	0, 390, 414, 426, 443, 446, 473, 558, 559, 560,
	258, 445, 562, 563, 564, 565, 566, 567, 568, 561,
	417, 505, 482, 508, 425, 485, 484, 0, 0, 519,
	441, 520, 521, 346, 347, 348, 349, 309, 546, 276,
	444, 372, 0, 506, 0, 0, 0, 0, 0, 0,
	0, 0, 511, 512, 509, 603, 0, 569, 570, 0,
	0, 438, 439, 304, 311, 457, 313, 275, 361, 306,
	423, 320, 0, 450, 513, 451, 572, 575, 573, 574,
	353, 316, 317, 387, 321, 331, 375, 422, 359, 380,
	273, 413, 388, 335, 499, 526, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 245, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 554, 553, 552, 551, 550, 549, 548, 547,
	0, 0, 496, 400, 285, 250, 281, 282, 289, 593,
	590, 404, 594, 0, 255, 477, 329, 0, 370, 303,
	541, 542, 206, 207, 208, 209, 210, 211, 212, 213,
	251, 214, 215, 216, 217, 218, 219, 220, 223, 224,
	225, 226, 227, 228, 229, 230, 544, 221, 222, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 0, 0, 0, 252, 246, 247, 248,
	249, 0, 0, 0, 429, 430, 431, 453, 415, 475,
	591, 0, 0, 0, 0, 0, 0, 0, 525, 537,
	571, 0, 580, 581, 583, 585, 584, 0, 597, 467,
	577, 358, 0, 481, 514, 503, 586, 469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 0,
	0, 328, 518, 500, 510, 501, 486, 487, 488, 495,
	308, 489, 490, 491, 463, 492, 464, 493, 494, 0,
	517, 468, 389, 342, 535, 534, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 196, 0, 0, 1393, 0, 0, 0,
	271, 197, 465, 582, 466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	476, 0, 0, 0, 0, 0, 261, 394, 411, 272,
	385, 424, 277, 392, 267, 357, 381, 0, 0, 263,
	409, 391, 339, 318, 319, 262, 0, 376, 296, 310,
	293, 355, 0, 408, 436, 292, 427, 0, 419, 265,
	0, 418, 354, 405, 410, 340, 334, 264, 407, 338,
	333, 322, 300, 452, 323, 324, 314, 366, 332, 367,
	315, 344, 343, 345, 0, 0, 0, 0, 0, 447,
	448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 576, 0, 0, 579, 0, 421, 0,
	0, 0, 0, 0, 0, 393, 0, 0, 325, 0,
	0, 0, 437, 0, 379, 360, 599, 0, 0, 377,
	330, 406, 368, 412, 395, 420, 373, 369, 256, 396,
	295, 341, 268, 270, 290, 297, 299, 301, 302, 350,
	351, 363, 384, 397, 398, 399, 294, 278, 378, 279,
	312, 280, 257, 286, 284, 287, 386, 288, 259, 364,
	403, 0, 307, 374, 337, 260, 336, 365, 402, 401,
	269, 428, 434, 435, 522, 0, 440, 600, 601, 602,
	449, 454, 455, 456, 458, 459, 460, 461, 523, 540,
	507, 478, 442, 531, 474, 479, 543, 0, 0, 0,
	433, 326, 327, 0, 305, 253, 254, 596, 291, 356,
	545, 578, 470, 0, 532, 471, 480, 283, 504, 516,
	515, 352, 432, 0, 527, 530, 462, 595, 0, 524,
	539, 598, 538, 592, 362, 0, 383, 536, 483, 0,
	528, 502, 0, 529, 498, 533, 0, 472, 0, 390,
	414, 426, 443, 446, 473, 558, 559, 560, 258, 445,
	562, 563, 564, 565, 566, 567, 568, 561, 417, 505,
	482, 508, 425, 485, 484, 0, 0, 519, 441, 520,
	521, 346, 347, 348, 349, 309, 546, 276, 444, 372,
	0, 506, 0, 0, 0, 0, 0, 0, 0, 0,
	511, 512, 509, 603, 0, 569, 570, 0, 0, 438,
	439, 304, 311, 457, 313, 275, 361, 306, 423, 320,
	0, 450, 513, 451, 572, 575, 573, 574, 353, 316,
	317, 387, 321, 331, 375, 422, 359, 380, 273, 413,
	388, 335, 499, 526, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 245, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	554, 553, 552, 551, 550, 549, 548, 547, 0, 0,
	496, 400, 285, 250, 281, 282, 289, 593, 590, 404,
	594, 0, 255, 477, 329, 0, 370, 303, 541, 542,
	206, 207, 208, 209, 210, 211, 212, 213, 251, 214,
	215, 216, 217, 218, 219, 220, 223, 224, 225, 226,
	227, 228, 229, 230, 544, 221, 222, 231, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 0, 0, 0, 252, 246, 247, 248, 249, 0,
	0, 0, 429, 430, 431, 453, 415, 475, 591, 0,
	0, 0, 0, 0, 0, 0, 525, 537, 571, 0,
	580, 581, 583, 585, 584, 0, 597, 467, 577, 358,
	0, 481, 514, 503, 586, 469, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 0, 0, 328,
	518, 500, 510, 501, 486, 487, 488, 495, 308, 489,
	490, 491, 463, 492, 464, 493, 494, 0, 517, 468,
	389, 342, 535, 534, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 196, 0, 0, 2256, 0, 0, 0, 271, 197,
	465, 582, 466, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 274, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 476, 0,
	0, 0, 0, 0, 261, 394, 411, 272, 385, 424,
	277, 392, 267, 357, 381, 0, 0, 263, 409, 391,
	339, 318, 319, 262, 0, 376, 296, 310, 293, 355,
	0, 408, 436, 292, 427, 0, 419, 265, 0, 418,
	354, 405, 410, 340, 334, 264, 407, 338, 333, 322,
	300, 452, 323, 324, 314, 366, 332, 367, 315, 344,
	343, 345, 0, 0, 0, 0, 0, 447, 448, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 576, 0, 0, 579, 0, 421, 0, 0, 0,
	0, 0, 0, 393, 0, 0, 325, 0, 0, 0,
	437, 0, 379, 360, 599, 0, 0, 377, 330, 406,
	368, 412, 395, 420, 373, 369, 256, 396, 295, 341,
	268, 270, 290, 297, 299, 301, 302, 350, 351, 363,
	384, 397, 398, 399, 294, 278, 378, 279, 312, 280,
	257, 286, 284, 287, 386, 288, 259, 364, 403, 0,
	307, 374, 337, 260, 336, 365, 402, 401, 269, 428,
	434, 435, 522, 0, 440, 600, 601, 602, 449, 454,
	455, 456, 458, 459, 460, 461, 523, 540, 507, 478,
	442, 531, 474, 479, 543, 0, 0, 0, 433, 326,
	327, 0, 305, 253, 254, 596, 291, 356, 545, 578,
	470, 0, 532, 471, 480, 283, 504, 516, 515, 352,
	432, 0, 527, 530, 462, 595, 0, 524, 539, 598,
	538, 592, 362, 0, 383, 536, 483, 0, 528, 502,
	0, 529, 498, 533, 0, 472, 0, 390, 414, 426,
	443, 446, 473, 558, 559, 560, 258, 445, 562, 563,
	564, 565, 566, 567, 568, 561, 417, 505, 482, 508,
	425, 485, 484, 0, 0, 519, 441, 520, 521, 346,
	347, 348, 349, 309, 546, 276, 444, 372, 0, 506,
	0, 0, 0, 0, 0, 0, 0, 0, 511, 512,
	509, 603, 0, 569, 570, 0, 0, 438, 439, 304,
	311, 457, 313, 275, 361, 306, 423, 320, 0, 450,
	513, 451, 572, 575, 573, 574, 353, 316, 317, 387,
	321, 331, 375, 422, 359, 380, 273, 413, 388, 335,
	499, 526, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 245, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 554, 553,
	552, 551, 550, 549, 548, 547, 0, 0, 496, 400,
	285, 250, 281, 282, 289, 593, 590, 404, 594, 0,
	255, 477, 329, 0, 370, 303, 541, 542, 206, 207,
	208, 209, 210, 211, 212, 213, 251, 214, 215, 216,
	217, 218, 219, 220, 223, 224, 225, 226, 227, 228,
	229, 230, 544, 221, 222, 231, 232, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 0,
	0, 0, 252, 246, 247, 248, 249, 0, 0, 0,
	429, 430, 431, 453, 415, 475, 591, 0, 0, 0,
	0, 0, 0, 0, 525, 537, 571, 0, 580, 581,
	583, 585, 584, 0, 597, 467, 577, 358, 0, 481,
	514, 503, 586, 469, 0, 0, 2581, 0, 0, 0,
	0, 0, 0, 0, 298, 0, 0, 328, 518, 500,
	510, 501, 486, 487, 488, 495, 308, 489, 490, 491,
	463, 492, 464, 493, 494, 0, 517, 468, 389, 342,
	535, 534, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 196,
	0, 0, 0, 0, 0, 0, 271, 197, 465, 582,
	466, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 476, 0, 0, 0,
	0, 0, 261, 394, 411, 272, 385, 424, 277, 392,
	267, 357, 381, 0, 0, 263, 409, 391, 339, 318,
	319, 262, 0, 376, 296, 310, 293, 355, 0, 408,
	436, 292, 427, 0, 419, 265, 0, 418, 354, 405,
	410, 340, 334, 264, 407, 338, 333, 322, 300, 452,
	323, 324, 314, 366, 332, 367, 315, 344, 343, 345,
	0, 0, 0, 0, 0, 447, 448, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 576,
	0, 0, 579, 0, 421, 0, 0, 0, 0, 0,
	0, 393, 0, 0, 325, 0, 0, 0, 437, 0,
	379, 360, 599, 0, 0, 377, 330, 406, 368, 412,
	395, 420, 373, 369, 256, 396, 295, 341, 268, 270,
	290, 297, 299, 301, 302, 350, 351, 363, 384, 397,
	398, 399, 294, 278, 378, 279, 312, 280, 257, 286,
	284, 287, 386, 288, 259, 364, 403, 0, 307, 374,
	337, 260, 336, 365, 402, 401, 269, 428, 434, 435,
	522, 0, 440, 600, 601, 602, 449, 454, 455, 456,
	458, 459, 460, 461, 523, 540, 507, 478, 442, 531,
	474, 479, 543, 0, 0, 0, 433, 326, 327, 0,
	305, 253, 254, 596, 291, 356, 545, 578, 470, 0,
	532, 471, 480, 283, 504, 516, 515, 352, 432, 0,
	527, 530, 462, 595, 0, 524, 539, 598, 538, 592,
	362, 0, 383, 536, 483, 0, 528, 502, 0, 529,
	498, 533, 0, 472, 0, 390, 414, 426, 443, 446,
	473, 558, 559, 560, 258, 445, 562, 563, 564, 565,
	566, 567, 568, 561, 417, 505, 482, 508, 425, 485,
	484, 0, 0, 519, 441, 520, 521, 346, 347, 348,
	349, 309, 546, 276, 444, 372, 0, 506, 0, 0,
	0, 0, 0, 0, 0, 0, 511, 512, 509, 603,
	0, 569, 570, 0, 0, 438, 439, 304, 311, 457,
	313, 275, 361, 306, 423, 320, 0, 450, 513, 451,
	572, 575, 573, 574, 353, 316, 317, 387, 321, 331,
	375, 422, 359, 380, 273, 413, 388, 335, 499, 526,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 245, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 554, 553, 552, 551,
	550, 549, 548, 547, 0, 0, 496, 400, 285, 250,
	281, 282, 289, 593, 590, 404, 594, 0, 255, 477,
	329, 0, 370, 303, 541, 542, 206, 207, 208, 209,
	210, 211, 212, 213, 251, 214, 215, 216, 217, 218,
	219, 220, 223, 224, 225, 226, 227, 228, 229, 230,
	544, 221, 222, 231, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 0, 0, 0,
	252, 246, 247, 248, 249, 0, 0, 0, 429, 430,
	431, 453, 415, 475, 591, 0, 0, 0, 0, 0,
	0, 0, 525, 537, 571, 0, 580, 581, 583, 585,
	584, 0, 597, 467, 577, 358, 0, 481, 514, 503,
	586, 469, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 328, 518, 500, 510, 501,
	486, 487, 488, 495, 308, 489, 490, 491, 463, 492,
	464, 493, 494, 0, 517, 468, 389, 342, 535, 534,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 196, 0, 0,
	0, 0, 0, 0, 271, 197, 465, 582, 466, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1977, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 476, 0, 0, 0, 0, 0,
	261, 394, 411, 272, 385, 424, 277, 392, 267, 357,
	381, 0, 0, 263, 409, 391, 339, 318, 319, 262,
	0, 376, 296, 310, 293, 355, 0, 408, 436, 292,
	427, 0, 419, 265, 0, 418, 354, 405, 410, 340,
	334, 264, 407, 338, 333, 322, 300, 452, 323, 324,
	314, 366, 332, 367, 315, 344, 343, 345, 0, 0,
	0, 0, 0, 447, 448, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 576, 0, 0,
	579, 0, 421, 0, 0, 0, 0, 0, 0, 393,
	0, 0, 325, 0, 0, 0, 437, 0, 379, 360,
	599, 0, 0, 377, 330, 406, 368, 412, 395, 420,
	373, 369, 256, 396, 295, 341, 268, 270, 290, 297,
	299, 301, 302, 350, 351, 363, 384, 397, 398, 399,
	294, 278, 378, 279, 312, 280, 257, 286, 284, 287,
	386, 288, 259, 364, 403, 0, 307, 374, 337, 260,
	336, 365, 402, 401, 269, 428, 434, 435, 522, 0,
	440, 600, 601, 602, 449, 454, 455, 456, 458, 459,
	460, 461, 523, 540, 507, 478, 442, 531, 474, 479,
	543, 0, 0, 0, 433, 326, 327, 0, 305, 253,
	254, 596, 291, 356, 545, 578, 470, 0, 532, 471,
	480, 283, 504, 516, 515, 352, 432, 0, 527, 530,
	462, 595, 0, 524, 539, 598, 538, 592, 362, 0,
	383, 536, 483, 0, 528, 502, 0, 529, 498, 533,
	0, 472, 0, 390, 414, 426, 443, 446, 473, 558,
	559, 560, 258, 445, 562, 563, 564, 565, 566, 567,
	568, 561, 417, 505, 482, 508, 425, 485, 484, 0,
	0, 519, 441, 520, 521, 346, 347, 348, 349, 309,
	546, 276, 444, 372, 0, 506, 0, 0, 0, 0,
	0, 0, 0, 0, 511, 512, 509, 603, 0, 569,
	570, 0, 0, 438, 439, 304, 311, 457, 313, 275,
	361, 306, 423, 320, 0, 450, 513, 451, 572, 575,
	573, 574, 353, 316, 317, 387, 321, 331, 375, 422,
	359, 380, 273, 413, 388, 335, 499, 526, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 245,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 554, 553, 552, 551, 550, 549,
	548, 547, 0, 0, 496, 400, 285, 250, 281, 282,
	289, 593, 590, 404, 594, 0, 255, 477, 329, 0,
	370, 303, 541, 542, 206, 207, 208, 209, 210, 211,
	212, 213, 251, 214, 215, 216, 217, 218, 219, 220,
	223, 224, 225, 226, 227, 228, 229, 230, 544, 221,
	222, 231, 232, 233, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 0, 0, 0, 252, 246,
	247, 248, 249, 0, 0, 0, 429, 430, 431, 453,
	415, 475, 591, 0, 0, 0, 0, 0, 0, 0,
	525, 537, 571, 0, 580, 581, 583, 585, 584, 0,
	597, 467, 577, 358, 0, 481, 514, 503, 586, 469,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	298, 0, 0, 328, 518, 500, 510, 501, 486, 487,
	488, 495, 308, 489, 490, 491, 463, 492, 464, 493,
	494, 0, 517, 468, 389, 342, 535, 534, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 196, 0, 0, 0, 0,
	0, 0, 271, 197, 465, 582, 466, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 274, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2333, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 476, 0, 0, 0, 0, 0, 261, 394,
	411, 272, 385, 424, 277, 392, 267, 357, 381, 0,
	0, 263, 409, 391, 339, 318, 319, 262, 0, 376,
	296, 310, 293, 355, 0, 408, 436, 292, 427, 0,
	419, 265, 0, 418, 354, 405, 410, 340, 334, 264,
	407, 338, 333, 322, 300, 452, 323, 324, 314, 366,
	332, 367, 315, 344, 343, 345, 0, 0, 0, 0,
	0, 447, 448, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 576, 0, 0, 579, 0,
	421, 0, 0, 0, 0, 0, 0, 393, 0, 0,
	325, 0, 0, 0, 437, 0, 379, 360, 599, 0,
	0, 377, 330, 406, 368, 412, 395, 420, 373, 369,
	256, 396, 295, 341, 268, 270, 290, 297, 299, 301,
	302, 350, 351, 363, 384, 397, 398, 399, 294, 278,
	378, 279, 312, 280, 257, 286, 284, 287, 386, 288,
	259, 364, 403, 0, 307, 374, 337, 260, 336, 365,
	402, 401, 269, 428, 434, 435, 522, 0, 440, 600,
	601, 602, 449, 454, 455, 456, 458, 459, 460, 461,
	523, 540, 507, 478, 442, 531, 474, 479, 543, 0,
	0, 0, 433, 326, 327, 0, 305, 253, 254, 596,
	291, 356, 545, 578, 470, 0, 532, 471, 480, 283,
	504, 516, 515, 352, 432, 0, 527, 530, 462, 595,
	0, 524, 539, 598, 538, 592, 362, 0, 383, 536,
	483, 0, 528, 502, 0, 529, 498, 533, 0, 472,
	0, 390, 414, 426, 443, 446, 473, 558, 559, 560,
	258, 445, 562, 563, 564, 565, 566, 567, 568, 561,
	417, 505, 482, 508, 425, 485, 484, 0, 0, 519,
	441, 520, 521, 346, 347, 348, 349, 309, 546, 276,
	444, 372, 0, 506, 0, 0, 0, 0, 0, 0,
	0, 0, 511, 512, 509, 603, 0, 569, 570, 0,
	0, 438, 439, 304, 311, 457, 313, 275, 361, 306,
	423, 320, 0, 450, 513, 451, 572, 575, 573, 574,
	353, 316, 317, 387, 321, 331, 375, 422, 359, 380,
	273, 413, 388, 335, 499, 526, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 245, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 554, 553, 552, 551, 550, 549, 548, 547,
	0, 0, 496, 400, 285, 250, 281, 282, 289, 593,
	590, 404, 594, 0, 255, 477, 329, 0, 370, 303,
	541, 542, 206, 207, 208, 209, 210, 211, 212, 213,
	251, 214, 215, 216, 217, 218, 219, 220, 223, 224,
	225, 226, 227, 228, 229, 230, 544, 221, 222, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 0, 0, 0, 252, 246, 247, 248,
	249, 0, 0, 0, 429, 430, 431, 453, 415, 475,
	591, 0, 0, 0, 0, 0, 0, 0, 525, 537,
	571, 0, 580, 581, 583, 585, 584, 0, 597, 467,
	577, 358, 0, 481, 514, 503, 586, 469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 0,
	0, 328, 518, 500, 510, 501, 486, 487, 488, 495,
	308, 489, 490, 491, 463, 492, 464, 493, 494, 0,
	517, 468, 389, 342, 535, 534, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 196, 0, 0, 2331, 0, 0, 0,
	271, 197, 465, 582, 466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	476, 0, 0, 0, 0, 0, 261, 394, 411, 272,
	385, 424, 277, 392, 267, 357, 381, 0, 0, 263,
	409, 391, 339, 318, 319, 262, 0, 376, 296, 310,
	293, 355, 0, 408, 436, 292, 427, 0, 419, 265,
	0, 418, 354, 405, 410, 340, 334, 264, 407, 338,
	333, 322, 300, 452, 323, 324, 314, 366, 332, 367,
	315, 344, 343, 345, 0, 0, 0, 0, 0, 447,
	448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 576, 0, 0, 579, 0, 421, 0,
	0, 0, 0, 0, 0, 393, 0, 0, 325, 0,
	0, 0, 437, 0, 379, 360, 599, 0, 0, 377,
	330, 406, 368, 412, 395, 420, 373, 369, 256, 396,
	295, 341, 268, 270, 290, 297, 299, 301, 302, 350,
	351, 363, 384, 397, 398, 399, 294, 278, 378, 279,
	312, 280, 257, 286, 284, 287, 386, 288, 259, 364,
	403, 0, 307, 374, 337, 260, 336, 365, 402, 401,
	269, 428, 434, 435, 522, 0, 440, 600, 601, 602,
	449, 454, 455, 456, 458, 459, 460, 461, 523, 540,
	507, 478, 442, 531, 474, 479, 543, 0, 0, 0,
	433, 326, 327, 0, 305, 253, 254, 596, 291, 356,
	545, 578, 470, 0, 532, 471, 480, 283, 504, 516,
	515, 352, 432, 0, 527, 530, 462, 595, 0, 524,
	539, 598, 538, 592, 362, 0, 383, 536, 483, 0,
	528, 502, 0, 529, 498, 533, 0, 472, 0, 390,
	414, 426, 443, 446, 473, 558, 559, 560, 258, 445,
	562, 563, 564, 565, 566, 567, 568, 561, 417, 505,
	482, 508, 425, 485, 484, 0, 0, 519, 441, 520,
	521, 346, 347, 348, 349, 309, 546, 276, 444, 372,
	0, 506, 0, 0, 0, 0, 0, 0, 0, 0,
	511, 512, 509, 603, 0, 569, 570, 0, 0, 438,
	439, 304, 311, 457, 313, 275, 361, 306, 423, 320,
	0, 450, 513, 451, 572, 575, 573, 574, 353, 316,
	317, 387, 321, 331, 375, 422, 359, 380, 273, 413,
	388, 335, 499, 526, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 245, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	554, 553, 552, 551, 550, 549, 548, 547, 0, 0,
	496, 400, 285, 250, 281, 282, 289, 593, 590, 404,
	594, 0, 255, 477, 329, 0, 370, 303, 541, 542,
	206, 207, 208, 209, 210, 211, 212, 213, 251, 214,
	215, 216, 217, 218, 219, 220, 223, 224, 225, 226,
	227, 228, 229, 230, 544, 221, 222, 231, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 0, 0, 0, 252, 246, 247, 248, 249, 0,
	0, 0, 429, 430, 431, 453, 415, 475, 591, 0,
	0, 0, 0, 0, 0, 0, 525, 537, 571, 0,
	580, 581, 583, 585, 584, 2121, 597, 467, 577, 0,
	0, 358, 0, 481, 514, 503, 586, 469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 0,
	0, 328, 518, 500, 510, 501, 486, 487, 488, 495,
	308, 489, 490, 491, 463, 492, 464, 493, 494, 0,
	517, 468, 389, 342, 535, 534, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 196, 0, 0, 0, 0, 0, 0,
	271, 197, 465, 582, 466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	476, 0, 0, 0, 0, 0, 261, 394, 411, 272,
	385, 424, 277, 392, 267, 357, 381, 0, 0, 263,
	409, 391, 339, 318, 319, 262, 0, 376, 296, 310,
	293, 355, 0, 408, 436, 292, 427, 0, 419, 265,
	0, 418, 354, 405, 410, 340, 334, 264, 407, 338,
	333, 322, 300, 452, 323, 324, 314, 366, 332, 367,
	315, 344, 343, 345, 0, 0, 0, 0, 0, 447,
	448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 576, 0, 0, 579, 0, 421, 0,
	0, 0, 0, 0, 0, 393, 0, 0, 325, 0,
	0, 0, 437, 0, 379, 360, 599, 0, 0, 377,
	330, 406, 368, 412, 395, 420, 373, 369, 256, 396,
	295, 341, 268, 270, 290, 297, 299, 301, 302, 350,
	351, 363, 384, 397, 398, 399, 294, 278, 378, 279,
	312, 280, 257, 286, 284, 287, 386, 288, 259, 364,
	403, 0, 307, 374, 337, 260, 336, 365, 402, 401,
	269, 428, 434, 435, 522, 0, 440, 600, 601, 602,
	449, 454, 455, 456, 458, 459, 460, 461, 523, 540,
	507, 478, 442, 531, 474, 479, 543, 0, 0, 0,
	433, 326, 327, 0, 305, 253, 254, 596, 291, 356,
	545, 578, 470, 0, 532, 471, 480, 283, 504, 516,
	515, 352, 432, 0, 527, 530, 462, 595, 0, 524,
	539, 598, 538, 592, 362, 0, 383, 536, 483, 0,
	528, 502, 0, 529, 498, 533, 0, 472, 0, 390,
	414, 426, 443, 446, 473, 558, 559, 560, 258, 445,
	562, 563, 564, 565, 566, 567, 568, 561, 417, 505,
	482, 508, 425, 485, 484, 0, 0, 519, 441, 520,
	521, 346, 347, 348, 349, 309, 546, 276, 444, 372,
	0, 506, 0, 0, 0, 0, 0, 0, 0, 0,
	511, 512, 509, 603, 0, 569, 570, 0, 0, 438,
	439, 304, 311, 457, 313, 275, 361, 306, 423, 320,
	0, 450, 513, 451, 572, 575, 573, 574, 353, 316,
	317, 387, 321, 331, 375, 422, 359, 380, 273, 413,
	388, 335, 499, 526, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 245, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	554, 553, 552, 551, 550, 549, 548, 547, 0, 0,
	496, 400, 285, 250, 281, 282, 289, 593, 590, 404,
	594, 0, 255, 477, 329, 0, 370, 303, 541, 542,
	206, 207, 208, 209, 210, 211, 212, 213, 251, 214,
	215, 216, 217, 218, 219, 220, 223, 224, 225, 226,
	227, 228, 229, 230, 544, 221, 222, 231, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 0, 0, 0, 252, 246, 247, 248, 249, 0,
	0, 0, 429, 430, 431, 453, 415, 475, 591, 0,
	0, 0, 0, 0, 0, 0, 525, 537, 571, 0,
	580, 581, 583, 585, 584, 0, 597, 467, 577, 358,
	0, 481, 514, 503, 586, 469, 0, 1835, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 0, 0, 328,
	518, 500, 510, 501, 486, 487, 488, 495, 308, 489,
	490, 491, 463, 492, 464, 493, 494, 0, 517, 468,
	389, 342, 535, 534, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 196, 0, 0, 0, 0, 0, 0, 271, 197,
	465, 582, 466, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 274, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 476, 0,
	0, 0, 0, 0, 261, 394, 411, 272, 385, 424,
	277, 392, 267, 357, 381, 0, 0, 263, 409, 391,
	339, 318, 319, 262, 0, 376, 296, 310, 293, 355,
	0, 408, 436, 292, 427, 0, 419, 265, 0, 418,
	354, 405, 410, 340, 334, 264, 407, 338, 333, 322,
	300, 452, 323, 324, 314, 366, 332, 367, 315, 344,
	343, 345, 0, 0, 0, 0, 0, 447, 448, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 576, 0, 0, 579, 0, 421, 0, 0, 0,
	0, 0, 0, 393, 0, 0, 325, 0, 0, 0,
	437, 0, 379, 360, 599, 0, 0, 377, 330, 406,
	368, 412, 395, 420, 373, 369, 256, 396, 295, 341,
	268, 270, 290, 297, 299, 301, 302, 350, 351, 363,
	384, 397, 398, 399, 294, 278, 378, 279, 312, 280,
	257, 286, 284, 287, 386, 288, 259, 364, 403, 0,
	307, 374, 337, 260, 336, 365, 402, 401, 269, 428,
	434, 435, 522, 0, 440, 600, 601, 602, 449, 454,
	455, 456, 458, 459, 460, 461, 523, 540, 507, 478,
	442, 531, 474, 479, 543, 0, 0, 0, 433, 326,
	327, 0, 305, 253, 254, 596, 291, 356, 545, 578,
	470, 0, 532, 471, 480, 283, 504, 516, 515, 352,
	432, 0, 527, 530, 462, 595, 0, 524, 539, 598,
	538, 592, 362, 0, 383, 536, 483, 0, 528, 502,
	0, 529, 498, 533, 0, 472, 0, 390, 414, 426,
	443, 446, 473, 558, 559, 560, 258, 445, 562, 563,
	564, 565, 566, 567, 568, 561, 417, 505, 482, 508,
	425, 485, 484, 0, 0, 519, 441, 520, 521, 346,
	347, 348, 349, 309, 546, 276, 444, 372, 0, 506,
	0, 0, 0, 0, 0, 0, 0, 0, 511, 512,
	509, 603, 0, 569, 570, 0, 0, 438, 439, 304,
	311, 457, 313, 275, 361, 306, 423, 320, 0, 450,
	513, 451, 572, 575, 573, 574, 353, 316, 317, 387,
	321, 331, 375, 422, 359, 380, 273, 413, 388, 335,
	499, 526, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 245, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 554, 553,
	552, 551, 550, 549, 548, 547, 0, 0, 496, 400,
	285, 250, 281, 282, 289, 593, 590, 404, 594, 0,
	255, 477, 329, 0, 370, 303, 541, 542, 206, 207,
	208, 209, 210, 211, 212, 213, 251, 214, 215, 216,
	217, 218, 219, 220, 223, 224, 225, 226, 227, 228,
	229, 230, 544, 221, 222, 231, 232, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 0,
	0, 0, 252, 246, 247, 248, 249, 0, 0, 0,
	429, 430, 431, 453, 415, 475, 591, 0, 0, 0,
	0, 0, 0, 0, 525, 537, 571, 0, 580, 581,
	583, 585, 584, 0, 597, 467, 577, 358, 0, 481,
	514, 503, 586, 469, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 298, 0, 0, 328, 518, 500,
	510, 501, 486, 487, 488, 495, 308, 489, 490, 491,
	463, 492, 464, 493, 494, 0, 517, 468, 389, 342,
	535, 534, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 196,
	0, 0, 1393, 0, 0, 0, 271, 197, 465, 582,
	466, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 476, 0, 0, 0,
	0, 0, 261, 394, 411, 272, 385, 424, 277, 392,
	267, 357, 381, 0, 0, 263, 409, 391, 339, 318,
	319, 262, 0, 376, 296, 310, 293, 355, 0, 408,
	436, 292, 427, 0, 419, 265, 0, 418, 354, 405,
	410, 340, 334, 264, 407, 338, 333, 322, 300, 452,
	323, 324, 314, 366, 332, 367, 315, 344, 343, 345,
	0, 0, 0, 0, 0, 447, 448, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 576,
	0, 0, 579, 0, 421, 0, 0, 0, 0, 0,
	0, 393, 0, 0, 325, 0, 0, 0, 437, 0,
	379, 360, 599, 0, 0, 377, 330, 406, 368, 412,
	395, 420, 1742, 369, 256, 396, 295, 341, 268, 270,
	290, 297, 299, 301, 302, 350, 351, 363, 384, 397,
	398, 399, 294, 278, 378, 279, 312, 280, 257, 286,
	284, 287, 386, 288, 259, 364, 403, 0, 307, 374,
	337, 260, 336, 365, 402, 401, 269, 428, 434, 435,
	522, 0, 440, 600, 601, 602, 449, 454, 455, 456,
	458, 459, 460, 461, 523, 540, 507, 478, 442, 531,
	474, 479, 543, 0, 0, 0, 433, 326, 327, 0,
	305, 253, 254, 596, 291, 356, 545, 578, 470, 0,
	532, 471, 480, 283, 504, 516, 515, 352, 432, 0,
	527, 530, 462, 595, 0, 524, 539, 598, 538, 592,
	362, 0, 383, 536, 483, 0, 528, 502, 0, 529,
	498, 533, 0, 472, 0, 390, 414, 426, 443, 446,
	473, 558, 559, 560, 258, 445, 562, 563, 564, 565,
	566, 567, 568, 561, 417, 505, 482, 508, 425, 485,
	484, 0, 0, 519, 441, 520, 521, 346, 347, 348,
	349, 309, 546, 276, 444, 372, 0, 506, 0, 0,
	0, 0, 0, 0, 0, 0, 511, 512, 509, 603,
	0, 569, 570, 0, 0, 438, 439, 304, 311, 457,
	313, 275, 361, 306, 423, 320, 0, 450, 513, 451,
	572, 575, 573, 574, 353, 316, 317, 387, 321, 331,
	375, 422, 359, 380, 273, 413, 388, 335, 499, 526,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 245, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 554, 553, 552, 551,
	550, 549, 548, 547, 0, 0, 496, 400, 285, 250,
	281, 282, 289, 593, 590, 404, 594, 0, 255, 477,
	329, 0, 370, 303, 541, 542, 206, 207, 208, 209,
	210, 211, 212, 213, 251, 214, 215, 216, 217, 218,
	219, 220, 223, 224, 225, 226, 227, 228, 229, 230,
	544, 221, 222, 231, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 0, 0, 0,
	252, 246, 247, 248, 249, 0, 0, 0, 429, 430,
	431, 453, 415, 475, 591, 0, 0, 0, 0, 0,
	0, 0, 525, 537, 571, 0, 580, 581, 583, 585,
	584, 0, 597, 467, 577, 358, 0, 481, 514, 503,
	586, 469, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 328, 518, 500, 510, 501,
	486, 487, 488, 495, 308, 489, 490, 491, 463, 492,
	464, 493, 494, 0, 517, 468, 389, 342, 535, 534,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 196, 0, 0,
	0, 0, 0, 0, 271, 197, 465, 582, 466, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 476, 0, 0, 0, 0, 0,
	261, 394, 411, 272, 385, 424, 277, 392, 267, 357,
	381, 0, 0, 263, 409, 391, 339, 318, 319, 262,
	0, 376, 296, 310, 293, 355, 0, 408, 436, 292,
	427, 0, 419, 265, 0, 418, 354, 405, 410, 340,
	334, 264, 407, 338, 333, 322, 300, 452, 323, 324,
	314, 366, 332, 367, 315, 344, 343, 345, 0, 0,
	0, 0, 0, 447, 448, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 576, 0, 0,
	579, 0, 421, 0, 0, 1423, 0, 0, 0, 393,
	0, 0, 325, 0, 0, 0, 437, 0, 379, 360,
	599, 0, 0, 377, 330, 406, 368, 412, 395, 420,
	373, 369, 256, 396, 295, 341, 268, 270, 290, 297,
	299, 301, 302, 350, 351, 363, 384, 397, 398, 399,
	294, 278, 378, 279, 312, 280, 257, 286, 284, 287,
	386, 288, 259, 364, 403, 0, 307, 374, 337, 260,
	336, 365, 402, 401, 269, 428, 434, 435, 522, 0,
	440, 600, 601, 602, 449, 454, 455, 456, 458, 459,
	460, 461, 523, 540, 507, 478, 442, 531, 474, 479,
	543, 0, 0, 0, 433, 326, 327, 0, 305, 253,
	254, 596, 291, 356, 545, 578, 470, 0, 532, 471,
	480, 283, 504, 516, 515, 352, 432, 0, 527, 530,
	462, 595, 0, 524, 539, 598, 538, 592, 362, 0,
	383, 536, 483, 0, 528, 502, 0, 529, 498, 533,
	0, 472, 0, 390, 414, 426, 443, 446, 473, 558,
	559, 560, 258, 445, 562, 563, 564, 565, 566, 567,
	568, 561, 417, 505, 482, 508, 425, 485, 484, 0,
	0, 519, 441, 520, 521, 346, 347, 348, 349, 309,
	546, 276, 444, 372, 0, 506, 0, 0, 0, 0,
	0, 0, 0, 0, 511, 512, 509, 603, 0, 569,
	570, 0, 0, 438, 439, 304, 311, 457, 313, 275,
	361, 306, 423, 320, 0, 450, 513, 451, 572, 575,
	573, 574, 353, 316, 317, 387, 321, 331, 375, 422,
	359, 380, 273, 413, 388, 335, 499, 526, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 245,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 554, 553, 552, 551, 550, 549,
	548, 547, 0, 0, 496, 400, 285, 250, 281, 282,
	289, 593, 590, 404, 594, 0, 255, 477, 329, 0,
	370, 303, 541, 542, 206, 207, 208, 209, 210, 211,
	212, 213, 251, 214, 215, 216, 217, 218, 219, 220,
	223, 224, 225, 226, 227, 228, 229, 230, 544, 221,
	222, 231, 232, 233, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 0, 0, 0, 252, 246,
	247, 248, 249, 0, 0, 0, 429, 430, 431, 453,
	415, 475, 591, 0, 0, 0, 0, 0, 0, 0,
	525, 537, 571, 0, 580, 581, 583, 585, 584, 0,
	597, 467, 577, 358, 0, 481, 514, 503, 586, 469,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	298, 0, 0, 328, 518, 500, 510, 501, 486, 487,
	488, 495, 308, 489, 490, 491, 463, 492, 464, 493,
	494, 0, 517, 468, 389, 342, 535, 534, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 196, 0, 0, 0, 0,
	0, 0, 271, 197, 465, 582, 466, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 274, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 476, 0, 0, 0, 0, 0, 261, 394,
	411, 272, 385, 424, 277, 392, 267, 357, 381, 0,
	0, 263, 409, 391, 339, 318, 319, 262, 0, 376,
	296, 310, 293, 355, 0, 408, 436, 292, 427, 0,
	419, 265, 0, 418, 354, 405, 410, 340, 334, 264,
	407, 338, 333, 322, 300, 452, 323, 324, 314, 366,
	332, 367, 315, 344, 343, 345, 0, 0, 0, 0,
	0, 447, 448, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 576, 0, 618, 579, 0,
	421, 0, 0, 0, 0, 0, 0, 393, 0, 0,
	325, 0, 0, 0, 437, 0, 379, 360, 599, 0,
	0, 377, 330, 406, 368, 412, 395, 420, 373, 369,
	256, 396, 295, 341, 268, 270, 290, 297, 299, 301,
	302, 350, 351, 363, 384, 397, 398, 399, 294, 278,
	378, 279, 312, 280, 257, 286, 284, 287, 386, 288,
	259, 364, 403, 0, 307, 374, 337, 260, 336, 365,
	402, 401, 269, 428, 434, 435, 522, 0, 440, 600,
	601, 602, 449, 454, 455, 456, 458, 459, 460, 461,
	523, 540, 507, 478, 442, 531, 474, 479, 543, 0,
	0, 0, 433, 326, 327, 0, 305, 253, 254, 596,
	291, 356, 545, 578, 470, 0, 532, 471, 480, 283,
	504, 516, 515, 352, 432, 0, 527, 530, 462, 595,
	0, 524, 539, 598, 538, 592, 362, 0, 383, 536,
	483, 0, 528, 502, 0, 529, 498, 533, 0, 472,
	0, 390, 414, 426, 443, 446, 473, 558, 559, 560,
	258, 445, 562, 563, 564, 565, 566, 567, 568, 561,
	417, 505, 482, 508, 425, 485, 484, 0, 0, 519,
	441, 520, 521, 346, 347, 348, 349, 309, 546, 276,
	444, 372, 0, 506, 0, 0, 0, 0, 0, 0,
	0, 0, 511, 512, 509, 603, 0, 569, 570, 0,
	0, 438, 439, 304, 311, 457, 313, 275, 361, 306,
	423, 320, 0, 450, 513, 451, 572, 575, 573, 574,
	353, 316, 317, 387, 321, 331, 375, 422, 359, 380,
	273, 413, 388, 335, 499, 526, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 245, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 554, 553, 552, 551, 550, 549, 548, 547,
	0, 0, 496, 400, 285, 250, 281, 282, 289, 593,
	590, 404, 594, 0, 255, 477, 329, 0, 370, 303,
	541, 542, 206, 207, 208, 209, 210, 211, 212, 213,
	251, 214, 215, 216, 217, 218, 219, 220, 223, 224,
	225, 226, 227, 228, 229, 230, 544, 221, 222, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 0, 0, 0, 252, 246, 247, 248,
	249, 0, 0, 0, 429, 430, 431, 453, 415, 475,
	591, 0, 0, 0, 0, 0, 0, 0, 525, 537,
	571, 0, 580, 581, 583, 585, 584, 0, 597, 467,
	577, 358, 0, 481, 514, 503, 586, 469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 0,
	0, 328, 518, 500, 510, 501, 486, 487, 488, 495,
	308, 489, 490, 491, 463, 492, 464, 493, 494, 0,
	517, 468, 389, 342, 535, 534, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 196, 0, 0, 0, 0, 0, 0,
	271, 197, 465, 582, 466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	476, 0, 0, 0, 0, 0, 261, 394, 411, 272,
	385, 424, 277, 392, 267, 357, 381, 0, 0, 263,
	409, 391, 339, 318, 319, 262, 0, 376, 296, 310,
	293, 355, 0, 408, 436, 292, 427, 0, 419, 265,
	0, 418, 354, 405, 410, 340, 334, 264, 407, 338,
	333, 322, 300, 452, 323, 324, 314, 366, 332, 367,
	315, 344, 343, 345, 0, 0, 0, 0, 0, 447,
	448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 576, 0, 0, 579, 0, 421, 0,
	0, 0, 0, 0, 0, 393, 0, 0, 325, 0,
	0, 0, 437, 0, 379, 360, 599, 0, 0, 377,
	330, 406, 368, 412, 395, 420, 373, 369, 256, 396,
	295, 341, 268, 270, 290, 297, 299, 301, 302, 350,
	351, 363, 384, 397, 398, 399, 294, 278, 378, 279,
	312, 280, 257, 286, 284, 287, 386, 288, 259, 364,
	403, 0, 307, 374, 337, 260, 336, 365, 402, 401,
	269, 428, 434, 435, 522, 0, 440, 600, 601, 602,
	449, 454, 455, 456, 458, 459, 460, 461, 523, 540,
	507, 478, 442, 531, 474, 479, 543, 0, 0, 0,
	433, 326, 327, 0, 305, 253, 254, 596, 291, 356,
	545, 578, 470, 0, 532, 471, 480, 283, 504, 516,
	515, 352, 432, 0, 527, 530, 462, 595, 0, 524,
	539, 598, 538, 592, 362, 0, 383, 536, 483, 0,
	528, 502, 0, 529, 498, 533, 0, 472, 0, 390,
	414, 426, 443, 446, 473, 558, 559, 560, 258, 445,
	562, 563, 564, 565, 566, 567, 568, 561, 417, 505,
	482, 508, 425, 485, 484, 0, 0, 519, 441, 520,
	521, 346, 347, 348, 349, 309, 546, 276, 444, 372,
	0, 506, 0, 0, 0, 0, 0, 0, 0, 0,
	511, 512, 509, 603, 0, 569, 570, 0, 0, 438,
	439, 304, 311, 457, 313, 275, 361, 306, 423, 320,
	0, 450, 513, 451, 572, 575, 573, 574, 353, 316,
	317, 387, 321, 331, 375, 422, 359, 380, 273, 413,
	388, 335, 499, 526, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 245, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	554, 553, 552, 551, 550, 549, 548, 547, 889, 0,
	496, 400, 285, 250, 281, 282, 289, 593, 590, 404,
	594, 0, 255, 477, 329, 0, 370, 303, 541, 542,
	206, 207, 208, 209, 210, 211, 212, 213, 251, 214,
	215, 216, 217, 218, 219, 220, 223, 224, 225, 226,
	227, 228, 229, 230, 544, 221, 222, 231, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 0, 0, 0, 252, 246, 247, 248, 249, 0,
	0, 0, 429, 430, 431, 453, 415, 475, 591, 0,
	0, 0, 0, 0, 0, 0, 525, 537, 571, 0,
	580, 581, 583, 585, 584, 0, 597, 467, 577, 358,
	0, 481, 514, 503, 586, 469, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 608, 298, 0, 0, 328,
	518, 500, 510, 501, 486, 487, 488, 495, 308, 489,
	490, 491, 463, 492, 464, 493, 494, 0, 517, 468,
	389, 342, 535, 534, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 196, 0, 0, 0, 0, 0, 0, 271, 197,
	465, 582, 466, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 274, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 476, 0,
	0, 0, 0, 0, 261, 394, 411, 272, 385, 424,
	277, 392, 267, 357, 381, 0, 0, 263, 409, 391,
	339, 318, 319, 262, 0, 376, 296, 310, 293, 355,
	0, 408, 436, 292, 427, 0, 419, 265, 0, 418,
	354, 405, 410, 340, 334, 264, 407, 338, 333, 322,
	300, 452, 323, 324, 314, 366, 332, 367, 315, 344,
	343, 345, 0, 0, 0, 0, 0, 447, 448, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 576, 0, 0, 579, 0, 421, 0, 0, 0,
	0, 0, 0, 393, 0, 0, 325, 0, 0, 0,
	437, 0, 379, 360, 599, 0, 0, 377, 330, 406,
	368, 412, 395, 420, 373, 369, 256, 396, 295, 341,
	268, 270, 290, 297, 299, 301, 302, 350, 351, 363,
	384, 397, 398, 399, 294, 278, 378, 279, 312, 280,
	257, 286, 284, 287, 386, 288, 259, 364, 403, 0,
	307, 374, 337, 260, 336, 365, 402, 401, 269, 428,
	434, 435, 522, 0, 440, 600, 601, 602, 449, 454,
	455, 456, 458, 459, 460, 461, 523, 540, 507, 478,
	442, 531, 474, 479, 543, 0, 0, 0, 433, 326,
	327, 0, 305, 253, 254, 596, 291, 356, 545, 578,
	470, 0, 532, 471, 480, 283, 504, 516, 515, 352,
	432, 0, 527, 530, 462, 595, 0, 524, 539, 598,
	538, 592, 362, 0, 383, 536, 483, 0, 528, 502,
	0, 529, 498, 533, 0, 472, 0, 390, 414, 426,
	443, 446, 473, 558, 559, 560, 258, 445, 562, 563,
	564, 565, 566, 567, 568, 561, 417, 505, 482, 508,
	425, 485, 484, 0, 0, 519, 441, 520, 521, 346,
	347, 348, 349, 309, 546, 276, 444, 372, 0, 506,
	0, 0, 0, 0, 0, 0, 0, 0, 511, 512,
	509, 603, 0, 569, 570, 0, 0, 438, 439, 304,
	311, 457, 313, 275, 361, 306, 423, 320, 0, 450,
	513, 451, 572, 575, 573, 574, 353, 316, 317, 387,
	321, 331, 375, 422, 359, 380, 273, 413, 388, 335,
	499, 526, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 245, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 554, 553,
	552, 551, 550, 549, 548, 547, 0, 0, 496, 400,
	285, 250, 281, 282, 289, 593, 590, 404, 594, 0,
	255, 477, 329, 0, 370, 303, 541, 542, 206, 207,
	208, 209, 210, 211, 212, 213, 251, 214, 215, 216,
	217, 218, 219, 220, 223, 224, 225, 226, 227, 228,
	229, 230, 544, 221, 222, 231, 232, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 0,
	0, 0, 252, 246, 247, 248, 249, 0, 0, 0,
	429, 430, 431, 453, 415, 475, 591, 0, 0, 0,
	0, 0, 0, 0, 525, 537, 571, 0, 580, 581,
	583, 585, 584, 0, 597, 467, 577, 358, 0, 481,
	514, 503, 586, 469, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 298, 0, 0, 328, 518, 500,
	510, 501, 486, 487, 488, 495, 308, 489, 490, 491,
	463, 492, 464, 493, 494, 0, 517, 468, 389, 342,
	535, 534, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 196,
	0, 0, 0, 0, 0, 0, 271, 197, 465, 582,
	466, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 476, 0, 0, 0,
	0, 0, 261, 394, 411, 272, 385, 424, 277, 392,
	267, 357, 381, 0, 0, 263, 409, 391, 339, 318,
	319, 262, 0, 376, 296, 310, 293, 355, 0, 408,
	436, 292, 427, 0, 419, 265, 0, 418, 354, 405,
	410, 340, 334, 264, 407, 338, 333, 322, 300, 452,
	323, 324, 314, 366, 332, 367, 315, 344, 343, 345,
	0, 0, 0, 0, 0, 447, 448, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 576,
	0, 0, 579, 0, 421, 0, 0, 0, 0, 0,
	0, 393, 0, 0, 325, 0, 0, 0, 437, 0,
	379, 360, 599, 0, 0, 377, 330, 406, 368, 412,
	395, 420, 373, 369, 256, 396, 295, 341, 268, 270,
	290, 297, 299, 301, 302, 350, 351, 363, 384, 397,
	398, 399, 294, 278, 378, 279, 312, 280, 257, 286,
	284, 287, 386, 288, 259, 364, 403, 0, 307, 374,
	337, 260, 336, 365, 402, 401, 269, 428, 434, 435,
	522, 0, 440, 600, 601, 602, 449, 454, 455, 456,
	458, 459, 460, 461, 523, 540, 507, 478, 442, 531,
	474, 479, 543, 0, 0, 0, 433, 326, 327, 0,
	305, 253, 254, 596, 291, 356, 545, 578, 470, 0,
	532, 471, 480, 283, 504, 516, 515, 352, 432, 0,
	527, 530, 462, 595, 0, 524, 539, 598, 538, 592,
	362, 0, 383, 536, 483, 0, 528, 502, 0, 529,
	498, 533, 0, 472, 0, 390, 414, 426, 443, 446,
	473, 558, 559, 560, 258, 445, 562, 563, 564, 565,
	566, 567, 568, 561, 417, 505, 482, 508, 425, 485,
	484, 0, 0, 519, 441, 520, 521, 346, 347, 348,
	349, 309, 546, 276, 444, 372, 0, 506, 0, 0,
	0, 0, 0, 0, 0, 0, 511, 512, 509, 603,
	0, 569, 570, 0, 0, 438, 439, 304, 311, 457,
	313, 275, 361, 306, 423, 320, 0, 450, 513, 451,
	572, 575, 573, 574, 353, 316, 317, 387, 321, 331,
	375, 422, 359, 380, 273, 413, 388, 335, 499, 526,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 245, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 554, 553, 552, 551,
	550, 549, 548, 547, 0, 0, 496, 400, 285, 250,
	281, 282, 289, 593, 590, 404, 594, 0, 255, 477,
	329, 0, 370, 303, 541, 542, 206, 207, 208, 209,
	210, 211, 212, 213, 251, 214, 215, 216, 217, 218,
	219, 220, 223, 224, 225, 226, 227, 228, 229, 230,
	544, 221, 222, 231, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 0, 0, 0,
	252, 246, 247, 248, 249, 0, 0, 0, 429, 430,
	431, 453, 415, 475, 591, 0, 0, 0, 0, 0,
	0, 0, 525, 537, 571, 0, 580, 581, 583, 585,
	584, 0, 597, 467, 577, 358, 0, 481, 514, 503,
	586, 469, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 328, 518, 500, 510, 501,
	486, 487, 488, 495, 308, 489, 490, 491, 463, 492,
	464, 493, 494, 0, 517, 468, 389, 342, 535, 534,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 196, 0, 0,
	0, 0, 0, 0, 271, 197, 465, 582, 466, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 476, 0, 0, 0, 0, 0,
	261, 394, 1373, 272, 385, 424, 277, 392, 267, 357,
	381, 0, 0, 263, 409, 391, 339, 318, 319, 262,
	0, 376, 296, 310, 293, 355, 0, 408, 436, 292,
	427, 0, 419, 265, 0, 418, 354, 405, 410, 340,
	334, 264, 407, 338, 333, 322, 300, 452, 323, 324,
	314, 366, 332, 367, 315, 344, 343, 345, 0, 0,
	0, 0, 0, 447, 448, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 576, 0, 0,
	579, 0, 421, 0, 0, 0, 0, 0, 0, 393,
	0, 0, 325, 0, 0, 0, 437, 0, 379, 360,
	599, 0, 0, 377, 330, 406, 368, 412, 395, 420,
	373, 369, 256, 396, 295, 341, 268, 270, 290, 297,
	299, 301, 302, 350, 351, 363, 384, 397, 398, 399,
	294, 278, 378, 279, 312, 280, 257, 286, 284, 287,
	386, 288, 259, 364, 403, 0, 307, 374, 337, 260,
	336, 365, 402, 401, 269, 428, 434, 435, 522, 0,
	440, 600, 601, 602, 449, 454, 455, 456, 458, 459,
	460, 461, 523, 540, 507, 478, 442, 531, 474, 479,
	543, 0, 0, 0, 433, 326, 327, 0, 305, 253,
	254, 596, 291, 356, 545, 578, 470, 0, 532, 471,
	480, 283, 504, 516, 515, 352, 432, 0, 527, 530,
	462, 595, 0, 524, 539, 598, 538, 592, 362, 0,
	383, 536, 483, 0, 528, 502, 0, 529, 498, 533,
	0, 472, 0, 390, 414, 426, 443, 446, 473, 558,
	559, 560, 258, 445, 562, 563, 564, 565, 566, 567,
	568, 561, 417, 505, 482, 508, 425, 485, 484, 0,
	0, 519, 441, 520, 521, 346, 347, 348, 349, 309,
	546, 276, 444, 372, 0, 506, 0, 0, 0, 0,
	0, 0, 0, 0, 511, 512, 509, 603, 0, 569,
	570, 0, 0, 438, 439, 304, 311, 457, 313, 275,
	361, 306, 423, 320, 0, 450, 513, 451, 572, 575,
	573, 574, 353, 316, 317, 387, 321, 331, 375, 422,
	359, 380, 273, 413, 388, 335, 499, 526, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 245,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 554, 553, 552, 551, 550, 549,
	548, 547, 0, 0, 496, 400, 285, 250, 281, 282,
	289, 593, 590, 404, 594, 0, 255, 477, 329, 0,
	370, 303, 541, 542, 206, 207, 208, 209, 210, 211,
	212, 213, 251, 214, 215, 216, 217, 218, 219, 220,
	223, 224, 225, 226, 227, 228, 229, 230, 544, 221,
	222, 231, 232, 233, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 0, 0, 0, 252, 246,
	247, 248, 249, 0, 0, 0, 429, 430, 431, 453,
	415, 475, 591, 0, 0, 0, 0, 0, 0, 0,
	525, 537, 571, 0, 580, 581, 583, 585, 584, 0,
	597, 467, 577, 358, 0, 481, 514, 503, 586, 469,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	298, 0, 0, 328, 518, 500, 510, 501, 486, 487,
	488, 495, 308, 489, 490, 491, 463, 492, 464, 493,
	494, 0, 517, 468, 389, 342, 535, 534, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 196, 0, 0, 0, 0,
	0, 0, 271, 197, 465, 582, 466, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 274, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 476, 0, 0, 0, 0, 0, 261, 394,
	1371, 272, 385, 424, 277, 392, 267, 357, 381, 0,
	0, 263, 409, 391, 339, 318, 319, 262, 0, 376,
	296, 310, 293, 355, 0, 408, 436, 292, 427, 0,
	419, 265, 0, 418, 354, 405, 410, 340, 334, 264,
	407, 338, 333, 322, 300, 452, 323, 324, 314, 366,
	332, 367, 315, 344, 343, 345, 0, 0, 0, 0,
	0, 447, 448, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 576, 0, 0, 579, 0,
	421, 0, 0, 0, 0, 0, 0, 393, 0, 0,
	325, 0, 0, 0, 437, 0, 379, 360, 599, 0,
	0, 377, 330, 406, 368, 412, 395, 420, 373, 369,
	256, 396, 295, 341, 268, 270, 290, 297, 299, 301,
	302, 350, 351, 363, 384, 397, 398, 399, 294, 278,
	378, 279, 312, 280, 257, 286, 284, 287, 386, 288,
	259, 364, 403, 0, 307, 374, 337, 260, 336, 365,
	402, 401, 269, 428, 434, 435, 522, 0, 440, 600,
	601, 602, 449, 454, 455, 456, 458, 459, 460, 461,
	523, 540, 507, 478, 442, 531, 474, 479, 543, 0,
	0, 0, 433, 326, 327, 0, 305, 253, 254, 596,
	291, 356, 545, 578, 470, 0, 532, 471, 480, 283,
	504, 516, 515, 352, 432, 0, 527, 530, 462, 595,
	0, 524, 539, 598, 538, 592, 362, 0, 383, 536,
	483, 0, 528, 502, 0, 529, 498, 533, 0, 472,
	0, 390, 414, 426, 443, 446, 473, 558, 559, 560,
	258, 445, 562, 563, 564, 565, 566, 567, 568, 561,
	417, 505, 482, 508, 425, 485, 484, 0, 0, 519,
	441, 520, 521, 346, 347, 348, 349, 309, 546, 276,
	444, 372, 0, 506, 0, 0, 0, 0, 0, 0,
	0, 0, 511, 512, 509, 603, 0, 569, 570, 0,
	0, 438, 439, 304, 311, 457, 313, 275, 361, 306,
	423, 320, 0, 450, 513, 451, 572, 575, 573, 574,
	353, 316, 317, 387, 321, 331, 375, 422, 359, 380,
	273, 413, 388, 335, 499, 526, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 245, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 554, 553, 552, 551, 550, 549, 548, 547,
	0, 0, 496, 400, 285, 250, 281, 282, 289, 593,
	590, 404, 594, 0, 255, 477, 329, 0, 370, 303,
	541, 542, 206, 207, 208, 209, 210, 211, 212, 213,
	251, 214, 215, 216, 217, 218, 219, 220, 223, 224,
	225, 226, 227, 228, 229, 230, 544, 221, 222, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 0, 0, 0, 252, 246, 247, 248,
	249, 0, 0, 0, 429, 430, 431, 453, 415, 475,
	591, 0, 0, 0, 0, 0, 0, 0, 525, 537,
	571, 0, 580, 581, 583, 585, 584, 0, 597, 467,
	577, 358, 0, 481, 514, 503, 586, 469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 0,
	0, 328, 518, 500, 510, 501, 486, 487, 488, 495,
	308, 489, 490, 491, 463, 492, 464, 493, 494, 0,
	517, 468, 389, 342, 535, 534, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 196, 0, 0, 0, 0, 0, 0,
	271, 197, 465, 582, 466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	476, 0, 0, 0, 0, 0, 261, 394, 411, 272,
	385, 424, 277, 392, 267, 357, 381, 0, 0, 263,
	409, 391, 339, 318, 319, 262, 0, 376, 296, 310,
	293, 355, 0, 408, 436, 292, 427, 0, 419, 265,
	0, 418, 354, 405, 410, 340, 334, 264, 407, 338,
	333, 322, 300, 452, 323, 324, 314, 366, 332, 367,
	315, 344, 343, 345, 0, 0, 0, 0, 0, 447,
	448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 576, 0, 0, 579, 0, 421, 0,
	0, 0, 0, 0, 0, 393, 0, 0, 325, 0,
	0, 0, 437, 0, 379, 360, 599, 0, 0, 377,
	330, 406, 368, 412, 395, 420, 373, 369, 256, 396,
	295, 341, 268, 270, 682, 297, 299, 301, 302, 350,
	351, 363, 384, 397, 398, 399, 294, 278, 378, 279,
	312, 280, 257, 286, 284, 287, 386, 288, 259, 364,
	403, 0, 307, 374, 337, 260, 336, 365, 402, 401,
	269, 428, 434, 435, 522, 0, 440, 600, 601, 602,
	449, 454, 455, 456, 458, 459, 460, 461, 523, 540,
	507, 478, 442, 531, 474, 479, 543, 0, 0, 0,
	433, 326, 327, 0, 305, 253, 254, 596, 291, 356,
	545, 578, 470, 0, 532, 471, 480, 283, 504, 516,
	515, 352, 432, 0, 527, 530, 462, 595, 0, 524,
	539, 598, 538, 592, 362, 0, 383, 536, 483, 0,
	528, 502, 0, 529, 498, 533, 0, 472, 0, 390,
	414, 426, 443, 446, 473, 558, 559, 560, 258, 445,
	562, 563, 564, 565, 566, 567, 568, 561, 417, 505,
	482, 508, 425, 485, 484, 0, 0, 519, 441, 520,
	521, 346, 347, 348, 349, 309, 546, 276, 444, 372,
	0, 506, 0, 0, 0, 0, 0, 0, 0, 0,
	511, 512, 509, 603, 0, 569, 570, 0, 0, 438,
	439, 304, 311, 457, 313, 275, 361, 306, 423, 320,
	0, 450, 513, 451, 572, 575, 573, 574, 353, 316,
	317, 387, 321, 331, 375, 422, 359, 380, 273, 413,
	388, 335, 499, 526, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 245, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	554, 553, 552, 551, 550, 549, 548, 547, 0, 0,
	496, 400, 285, 250, 281, 282, 289, 593, 590, 404,
	594, 0, 255, 477, 329, 0, 370, 303, 541, 542,
	206, 207, 208, 209, 210, 211, 212, 213, 251, 214,
	215, 216, 217, 218, 219, 220, 223, 224, 225, 226,
	227, 228, 229, 230, 544, 221, 222, 231, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 0, 0, 0, 252, 246, 247, 248, 249, 0,
	0, 0, 429, 430, 431, 453, 415, 475, 591, 0,
	0, 0, 0, 0, 0, 0, 525, 537, 571, 0,
	580, 581, 583, 585, 584, 0, 597, 467, 577, 358,
	0, 481, 514, 503, 586, 469, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 0, 0, 328,
	518, 500, 510, 501, 486, 487, 488, 495, 308, 489,
	490, 491, 463, 492, 464, 493, 494, 0, 517, 468,
	389, 342, 535, 534, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 196, 0, 0, 0, 0, 0, 0, 271, 197,
	465, 582, 466, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 274, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 476, 0,
	0, 0, 0, 0, 261, 394, 411, 272, 385, 424,
	277, 392, 267, 357, 381, 0, 0, 263, 409, 391,
	339, 318, 319, 262, 0, 376, 296, 310, 293, 355,
	0, 408, 436, 292, 427, 0, 419, 265, 0, 418,
	354, 405, 410, 340, 334, 264, 407, 338, 333, 322,
	300, 452, 323, 324, 314, 366, 332, 367, 315, 344,
	343, 345, 0, 0, 0, 0, 0, 447, 448, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 576, 0, 0, 579, 0, 421, 0, 0, 0,
	0, 0, 0, 393, 0, 0, 325, 0, 0, 0,
	437, 0, 379, 360, 599, 0, 0, 377, 330, 406,
	368, 412, 395, 420, 641, 369, 256, 396, 295, 341,
	268, 270, 290, 297, 299, 301, 302, 350, 351, 363,
	384, 397, 398, 399, 294, 278, 378, 279, 312, 280,
	257, 286, 284, 287, 386, 288, 259, 364, 403, 0,
	307, 374, 337, 260, 336, 365, 402, 401, 269, 428,
	434, 435, 522, 0, 440, 600, 601, 602, 449, 454,
	455, 456, 458, 459, 460, 461, 523, 540, 507, 478,
	442, 531, 474, 479, 543, 0, 0, 0, 433, 326,
	327, 0, 305, 253, 254, 596, 291, 356, 545, 578,
	470, 0, 532, 471, 480, 283, 504, 516, 515, 352,
	432, 0, 527, 530, 462, 595, 0, 524, 539, 598,
	538, 592, 362, 0, 383, 536, 483, 0, 528, 502,
	0, 529, 498, 533, 0, 472, 0, 390, 414, 426,
	443, 446, 473, 558, 559, 560, 258, 445, 562, 563,
	564, 565, 566, 567, 642, 561, 417, 505, 482, 508,
	425, 485, 484, 0, 0, 519, 441, 520, 521, 346,
	347, 348, 349, 309, 546, 276, 444, 372, 0, 506,
	0, 0, 0, 0, 0, 0, 0, 0, 511, 512,
	509, 603, 0, 569, 570, 0, 0, 438, 439, 304,
	311, 457, 313, 275, 361, 306, 423, 320, 0, 450,
	513, 451, 572, 575, 573, 574, 353, 316, 317, 387,
	321, 331, 375, 422, 359, 380, 273, 413, 388, 335,
	499, 526, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 245, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 554, 553,
	552, 551, 550, 549, 548, 547, 0, 0, 496, 400,
	285, 250, 281, 282, 289, 593, 590, 404, 594, 0,
	255, 477, 329, 0, 370, 303, 541, 542, 206, 207,
	208, 209, 210, 211, 212, 213, 251, 214, 215, 216,
	217, 218, 219, 220, 223, 224, 225, 226, 227, 228,
	229, 230, 544, 221, 222, 231, 232, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 0,
	0, 0, 252, 246, 247, 248, 249, 1823, 0, 0,
	429, 430, 431, 453, 415, 475, 591, 0, 0, 0,
	0, 0, 0, 0, 525, 537, 571, 0, 580, 581,
	583, 585, 584, 0, 597, 467, 577, 0, 0, 0,
	0, 0, 1825, 0, 0, 1823, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1825, 0, 0, 3386, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1800, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 661, 660, 667, 657, 0, 0, 0, 0, 0,
	0, 0, 0, 664, 665, 0, 666, 670, 0, 0,
	652, 1800, 0, 0, 661, 660, 667, 657, 0, 0,
	675, 0, 0, 0, 0, 0, 664, 665, 0, 666,
	670, 0, 0, 652, 0, 0, 0, 0, 0, 0,
	1816, 0, 0, 675, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 679, 0, 0, 681, 0, 0, 0,
	0, 680, 0, 0, 3357, 0, 0, 0, 1816, 0,
	0, 0, 0, 0, 0, 0, 679, 0, 0, 681,
	0, 0, 0, 0, 680, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1804, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1810, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1798, 1832, 0, 0, 1799, 1801, 1803, 1804, 1805,
	1806, 1807, 1811, 1812, 1813, 1815, 1818, 1819, 1820, 1810,
	0, 0, 0, 0, 0, 0, 1808, 1817, 1809, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1798,
	1832, 0, 0, 1799, 1801, 1803, 0, 1805, 1806, 1807,
	1811, 1812, 1813, 1815, 1818, 1819, 1820, 653, 655, 654,
	1824, 0, 0, 0, 1808, 1817, 1809, 659, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 663,
	653, 655, 654, 0, 0, 0, 678, 0, 0, 0,
	659, 0, 0, 656, 0, 0, 0, 647, 1824, 0,
	0, 0, 663, 1821, 0, 0, 0, 0, 0, 678,
	0, 0, 0, 0, 0, 0, 656, 0, 0, 0,
	1797, 0, 0, 0, 0, 0, 0, 1796, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1821, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1814, 0, 0, 0, 0, 0, 0, 1797, 0,
	1802, 0, 0, 0, 0, 1796, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1814,
	0, 0, 0, 0, 0, 0, 0, 0, 1802, 0,
	0, 658, 662, 668, 0, 669, 671, 0, 0, 672,
	673, 674, 0, 0, 676, 677, 0, 0, 0, 0,
	0, 0, 0, 0, 658, 662, 668, 0, 669, 671,
	0, 0, 672, 673, 674, 0, 0, 676, 677,
}

var yyPact = [...]int{
	395, -1000, -1000, -1000, -332, 13456, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 41574,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 41574,
	-329, 40976, 40976, -1000, -1000, 2324, -1000, 39780, 14662, 41574,
	444, 442, 41574, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 812, -1000, 43966, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 733, 44648, 43368, 10436, -257, -1000, 1462, -91, 2189,
	955, 977, 1087, 1087, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 348, 847, 40378,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 3536, 345, 847, 19446, 2, -6, 1462, 460, -158,
	-156, -160, 295, -1000, 1066, 3596, 166, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 10436, 10436,
	13456, -356, 13456, 10436, 41574, 41574, -1000, -1000, -1000, -1000,
	-329, 39780, 733, 44648, 10436, 2189, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -156, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -158, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -160, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -6, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 4464, -1000, 1479,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2625, 1476, 2182, 662, 41574, -1000,
	1460, 662, -1000, -1000, -1000, 1462, 3143, -1000, 41574, 41574,
	164, 1617, -1000, 436, 334, 361, 1455, -1000, -1000, -1000,
	-1000, -1000, -1000, 575, 3101, -1000, 41574, 41574, 2672, 41574,
	-1000, 1965, 605, 44671, 2912, 1281, 874, 2721, -1000, -1000,
	2624, -1000, 325, 686, 224, 438, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 229, -1000, 3013, -1000, -1000, 311, -1000,
	-1000, 297, -1000, -1000, -1000, -10, -1000, -1000, -1000, -1000,
	-1000, -1000, -90, -1000, -1000, 1023, 2086, 10436, 1767, -1000,
	2587, -1000, -1000, -1000, -1000, 6211, 12245, 12245, 12245, 12245,
	-1000, -1000, 2467, 10436, 2623, 2621, 2619, 2617, -1000, -1000,
	-1000, -1000, -1000, -1000, 1453, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1687, -1000, -1000, -1000, 12848, -1000,
	2616, 2615, 2613, 2612, 2611, 2610, 2607, 2606, 2604, 2597,
	2594, 2593, 2592, 2586, 2346, 14054, 2582, 2180, 2178, 2580,
	2579, 2578, 2171, 2346, 2346, 2574, 2573, 2569, 2567, 2566,
	2563, 2561, 2559, 2558, 2554, 2553, 2552, 2549, 2537, 2524,
	2523, 2521, 2519, 2512, 2511, 2510, 2509, 2505, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1289, -1000, 2486, 3113, 2410, -1000, 3006, 3001, 2999,
	2997, -299, 2485, 1946, -1000, -1000, 69, -1000, -122, -1000,
	-1000, 954, -1000, 922, -1000, 41574, 41574, 150, 851, 715,
	715, 715, 715, 715, 778, 715, 3025, 807, 806, 803,
	800, 715, -112, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1615, 1611, 2755, 895, -1000, -1000, -1000, -1000, 1309, 41574,
	-1000, 2442, 1528, 1528, 3024, 619, 616, 614, 1528, 507,
	-1000, 1654, 1654, 1654, 1654, 1528, 378, 651, 3028, 3028,
	-27, 1654, -20, 1528, 1528, -20, 1528, 1528, 1528, 238,
	-305, -1000, -1000, -1000, -1000, 1654, 1654, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3005, 2996, 733, 733, 41574, 130,
	41574, 733, 733, 733, 746, -71, 42770, 42172, 1965, 602,
	598, 1323, 1649, -1000, 1559, 41574, 41574, 1559, 1559, 22436,
	21838, -1000, 41574, -1000, 3113, 2410, 2338, 1594, 2337, 2410,
	-165, -167, -168, 733, 733, 733, 733, 733, 285, 733,
	733, 733, 733, 733, 41574, 41574, 39182, 733, 733, 8623,
	8623, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	13456, 1973, 1963, 165, -54, -323, 212, -1000, -1000, 41574,
	2865, 275, -1000, -1000, -1000, 2371, -1000, 2419, 2419, 2419,
	2419, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2419, 2419, 2440, 2484, -1000, -1000, 2417, 2417, 2417, 2371,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2420, 2420, 2439, 2439, 2420,
	41574, 10436, 41574, 2904, 383, 2479, -1000, 41574, 364, 3113,
	2902, 3028, 3079, -1000, -1000, 1432, 1943, 2169, -1000, -1000,
	436, 1558, -1000, 1007, -1000, -1000, -1000, -1000, 41574, -90,
	384, -1000, -1000, 2163, 2476, -1000, 586, 1078, 1195, -1000,
	464, 3669, 33798, 1965, 33798, 41574, -1000, -1000, -1000, -1000,
	-1000, -1000, -13, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 257, -1000, 10436, 10436,
	10436, 10436, 10436, -1000, 775, 11642, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 12245, 12245, 12245, 12245, 12245, 12245, 12245,
	12245, 12245, 12245, 12245, 12245, 2465, 1676, 12245, 12245, 12245,
	12245, 1594, 2910, 1310, 250, -1000, -1000, -1000, -1000, -1000,
	1636, 2086, 10436, 10436, 10436, 10436, 41574, -1000, -1000, 4435,
	10436, 10436, 3445, 10436, 2985, 10436, 10436, 10436, 2336, 5000,
	41574, 10436, -1000, 2329, 2327, -1000, -1000, 1804, 10436, -1000,
	-1000, 10436, -1000, -1000, 10436, 12245, 10436, -1000, -1000, -1000,
	1701, 2985, 2985, 2985, 1629, 10436, 10436, 2985, 2985, 2985,
	1616, 2985, 2985, 2985, 2985, 2985, 2985, 2985, 2985, 2326,
	2325, 2318, 9833, 3028, -257, -1000, 8020, 2902, 3028, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -301,
	2475, 41574, 2168, 2166, -340, -60, 961, 928, 938, -1000,
	2930, -1000, 2474, 41574, 715, 715, 715, -1000, 41574, 1672,
	33798, 41574, 41574, 1965, 41574, 41574, 41574, 715, 715, 715,
	715, 41574, -1000, 2810, 33798, 2795, 746, -1000, 41574, 1309,
	2929, 41574, 3092, 12245, 12245, -1000, 38584, 1654, 1528, 1528,
	-1000, -1000, 41574, -1000, -1000, -1000, 1654, 41574, 1654, 1654,
	3092, 1654, -1000, -1000, -1000, 1528, 1528, -1000, -1000, 10436,
	-1000, -1000, 1654, 1654, -1000, -1000, 3092, 41574, -15, 3092,
	3092, 11, -1000, -1000, -1000, 41574, 41574, 715, 41574, -1000,
	41574, 41574, -1000, -1000, 41574, 41574, 4023, 41574, 37986, 2994,
	-1000, 33798, 41574, 41574, 31406, -1000, 1280, -1000, -55, -1000,
	-65, -71, 1559, -71, 1559, -1000, 570, 609, 20642, 518,
	33798, 5603, -1000, -1000, 1559, 1559, 5603, 5603, 1489, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1308, -1000, 181, 3028,
	-1000, -1000, -1000, -1000, -1000, 1941, 1940, 1939, 41574, 41574,
	33798, 1965, 41574, 733, 41574, 41574, 41574, 41574, 41574, -1000,
	2471, 1430, -1000, 2909, 41574, 41574, 1173, -1000, -1000, 17054,
	1420, 1173, -1000, 1632, -1000, 10436, 13456, -276, 10436, 13456,
	13456, 10436, 13456, -1000, 10436, 261, -1000, -1000, -1000, -1000,
	1932, -1000, 1930, -1000, -1000, -1000, -1000, -1000, 2158, 2158,
	-1000, 1920, -1000, -1000, -1000, -1000, 1919, -1000, -1000, 1918,
	-1000, -1000, -1000, 2317, 1023, -1000, 2156, 2719, -258, -1000,
	18848, 41574, 41574, -1000, -1000, -258, -1000, 18250, 41574, 3028,
	-1000, -262, 2902, 10436, 41574, -1000, 3023, -1000, 436, 365,
	-1000, -1000, -1000, -1000, -1000, -1000, 1412, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1298, -1000, 41574, -1000,
	-1000, 464, 33798, 35592, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 189, -1000, -1000, 178, -1000, 759, 220, 1554, -1000,
	-1000, 136, 182, 173, 831, 2086, -1000, 1656, 1656, 1686,
	-1000, 697, -1000, -1000, -1000, -1000, 2467, -1000, -1000, -1000,
	2783, 1699, -1000, 1618, 1618, 1499, 1499, 1499, 1499, 1499,
	1637, 1637, -1000, -1000, -1000, 6211, 2465, 12245, 12245, 12245,
	12245, 656, 656, 3836, 4079, -1000, 10436, 1631, -1000, 10436,
	2680, 1291, 2403, 1312, 1409, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2314, 2303, 2339, 3100, 2302,
	10436, -1000, -1000, 1553, 1548, 1546, -1000, 2028, 9230, -1000,
	-1000, -1000, 2300, 1393, 2297, -1000, -1000, -1000, 2296, 1541,
	1156, 2294, 1715, 2292, 1297, 10436, 10436, 10436, 10436, 2288,
	1539, 1530, 10436, 10436, 10436, 10436, 2285, 10436, 10436, 10436,
	10436, 10436, 10436, 10436, 10436, 12, 12, 12, 1294, 1293,
	-1000, -1000, 1529, -1000, 2086, -1000, -1000, 2902, -1000, 2463,
	1915, 1292, -1000, -1000, -1000, 2095, -1000, -1000, 947, 919,
	934, 41574, 1052, 2462, 41574, 41574, 41574, 264, -1000, 2908,
	1199, -1000, 220, -104, 455, 1056, 2669, 3099, -179, 41574,
	41574, 41574, 41574, 2923, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 37388, -1000, 2460, 1525, -1000, -1000, 10436, -1000,
	-1000, 2667, 41574, 41574, 3092, 3092, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1654, 3092, 3092, 1160, 1528, 1654, -1000,
	-1000, 1654, -1000, -1000, 1654, -1000, 1392, -1000, 41574, -1000,
	-1000, -1000, 2921, 2442, 1287, -1000, -1000, -1000, 3060, 837,
	701, 701, 898, 514, 3059, 16456, -1000, 1547, 1025, 758,
	2829, 312, -1000, 1547, -204, 671, 1547, 1547, 1547, 1547,
	1547, 1547, 1547, 556, 554, 1547, 1547, 1547, 1547, 1547,
	1547, 1547, 1547, 1547, 1547, 1547, 968, 1547, 1547, 1547,
	1547, 1547, -1000, 1547, 2459, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 620, 252, 2992, 368, 367, 1199, 2984, 370,
	3021, 1149, -1000, -1000, -1000, -1000, 24828, 24828, 20044, 24828,
	-1000, 1560, -71, -88, -1000, -1000, 1280, 5603, 1280, 5603,
	-1000, -1000, 757, -1000, -1000, 1056, -1000, 41574, 41574, -1000,
	-1000, 2458, 1609, -1000, -1000, 14054, -1000, 5603, 5603, -1000,
	-1000, 25426, 41574, -1000, -98, -1000, -85, 2902, -1000, -1000,
	-1000, 1243, -1000, -1000, 1273, 1056, 2706, 41574, 1243, 1243,
	1243, -1000, -1000, 15858, 41574, 41574, -1000, -1000, 3092, 8623,
	-1000, 31406, -1000, -1000, 36788, -1000, 36190, 3092, 1626, -1000,
	13456, 1910, 159, -1000, 208, -328, 157, 1818, 156, 2086,
	-1000, -1000, 2279, 2278, 1514, -1000, 1495, 2276, 1492, 1485,
	-1000, -24, -1000, 2892, 1060, -1000, 2456, -1000, 1477, 2764,
	-1000, 1242, -1000, 1607, 1450, -1000, 1060, 1428, 2761, 1242,
	2902, 2148, -1000, 1234, -1000, 2098, 1390, 163, -1000, -1000,
	41574, 2163, 1426, 35592, 1118, -1000, 752, 1380, 1373, -1000,
	33798, 328, 33798, -1000, 33798, -1000, -1000, 332, -1000, 41574,
	2899, -1000, -1000, -1000, 2095, 1606, -347, 41574, -1000, -1000,
	-1000, -1000, -1000, 1415, -1000, 656, 656, 3836, 3998, -1000,
	12245, -1000, 12245, 2886, 1625, -1000, 10436, 1714, 308, 10436,
	308, 1438, 23632, 41574, -1000, -1000, 10436, 10436, -1000, 2880,
	-1000, -1000, -1000, -1000, 10436, 10436, 2038, -1000, 41574, -1000,
	-1000, -1000, -1000, 23632, -1000, 12245, -1000, 10436, 1175, 1175,
	2872, 1404, 12, 12, 12, 2803, 2767, 2759, 1397, 12,
	2750, 2737, 2720, 2684, 2671, 2626, 2601, 2571, -1000, 2455,
	-1000, -1000, 1775, 11039, 8020, -1000, -1000, 244, 1233, 1913,
	117, -1000, 1604, -1000, -1000, -1000, 899, 289, 2275, 1232,
	-1000, -1000, 41574, -1000, -1000, -1000, 15858, 2442, 2454, 2442,
	131, 1547, -1000, 610, 33798, 587, -1000, 41574, 1951, 1603,
	2697, 688, 2853, 41574, 2453, 2451, 2449, 2447, 2919, 433,
	4534, 41574, 1138, -1000, 1372, 3596, -1000, 41574, 2086, -1000,
	1965, -1000, 1528, -1000, -1000, 3092, -1000, -1000, 10436, 10436,
	3092, 1528, 1528, 1654, 41574, -1000, 433, 4534, 2917, 4153,
	489, 2342, -1000, 41574, -1000, -1000, -1000, 731, -1000, 933,
	715, 41574, 1706, 933, 1705, 2444, -1000, -1000, 41574, 41574,
	41574, 41574, -1000, -1000, 41574, -1000, 41574, 41574, 41574, 41574,
	41574, 34994, -1000, 41574, 41574, -1000, 41574, 1704, 1702, 2869,
	-1000, 1547, 1547, 868, -1000, -1000, 560, -1000, 34994, 1911,
	1908, 1907, 1905, 2147, 2144, 2143, 1547, 1547, 1897, 2140,
	34396, 2134, 1089, 1892, 1876, 1869, 1895, 2124, 871, -1000,
	2116, 1890, 1879, 1875, 41574, 2443, 2043, -1000, -1000, 131,
	1547, 360, 41574, 1602, 610, 447, 1960, 21240, 41574, 31406,
	31406, 31406, 31406, -1000, 2740, 2739, -1000, 2753, 2731, 2768,
	41574, 31406, 2442, -1000, 34396, -1000, -1000, -1000, 1594, 1394,
	2827, 888, 10436, -1000, -1000, -57, -79, -1000, -1000, -1000,
	33798, 2104, 518, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	3022, 41574, 41574, 720, 2274, 1230, -1000, -1000, -1000, 4534,
	2419, 2419, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2419, 2419, 2440, -1000, -1000, 2417, 2417, 2417, 2371,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2420, 2420, 2439, 2439, 2420, -1000, -1000, 3084, -1000, 1228,
	-1000, -1000, 1359, -1000, 3084, 1639, -334, 13456, 1635, 1620,
	-1000, 10436, 13456, 10436, -287, 344, -290, -1000, -1000, -1000,
	2103, -1000, -1000, -1000, 1863, -1000, 1851, 107, 153, 1694,
	-258, 8020, 441, 41574, -258, 41574, 8020, -1000, 41574, 366,
	-258, 3022, -24, 10436, 2801, -1000, -1000, 41574, 1842, -1000,
	-1000, -1000, 3097, 33798, 1965, 1510, 33200, -1000, 310, -1000,
	186, 557, 2101, -1000, 799, 112, 2100, 2095, -1000, -1000,
	-1000, -1000, 12245, -1000, -1000, -1000, -1000, 2086, 10436, 2261,
	-1000, 917, 917, 2281, 2258, 2251, -1000, 2419, 2419, -1000,
	2371, 2417, 2371, 917, 917, 2250, -1000, 2009, 2502, -1000,
	2488, 2354, 10436, -1000, 2249, 3735, 1265, -120, -232, 12,
	12, -1000, -1000, -1000, -1000, 12, 12, 12, 12, -1000,
	12, 12, 12, 12, 12, 12, 12, 12, 668, -141,
	-312, -145, -313, -1000, 2246, 1223, -1000, -1000, -1000, -1000,
	-1000, 3445, 1213, -1000, 2095, 2088, -1000, 2080, 2079, 1052,
	4534, 2245, 2915, 15260, 2914, 1967, -1000, -1000, -1000, 32602,
	540, -1000, -1000, -1000, 669, 281, 1838, 536, -1000, 41574,
	370, 2788, 1595, 2077, 41574, -1000, -1000, -1000, -1000, -1000,
	-1000, 2853, -1000, 877, 407, 30210, 15260, 15260, 15260, 349,
	417, 1634, -1000, 662, 1102, 1356, 31406, 41574, -1000, 30808,
	2242, -1000, 1056, 3092, -1000, 2086, 2086, -1000, 3092, 3092,
	1528, -1000, 417, -1000, 349, -1000, 1019, 17652, 481, 358,
	353, -1000, 640, -1000, -1000, 655, 2858, 4534, -1000, 41574,
	-1000, 41574, -1000, 41574, 41574, 715, 10436, 2858, 41574, 751,
	-1000, -1000, 1011, 440, 390, 707, 707, 1189, -1000, 2898,
	-1000, -1000, 1120, -1000, -1000, -1000, -1000, 41574, -1000, -1000,
	-1000, -1000, -1000, -1000, 23632, 23632, 2970, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2076, 2073, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 41574, 1375, -1000, 1593, 1967, 32602, 1592, 1559, 2067,
	540, 1951, 1577, -1000, 2065, -1000, 1076, 41574, 41574, -1000,
	1182, -1000, 1576, 2664, 2695, 2664, -1000, -1000, -1000, -1000,
	2733, -1000, 2683, -1000, -1000, 1182, -1000, -1000, -1000, -1000,
	-1000, 888, -1000, 3017, 933, 933, 933, 2241, -1000, -1000,
	-1000, 1118, 2234, -1000, -1000, -1000, 3106, -1000, -1000, -1000,
	-1000, -1000, -1000, 15858, 2850, 3081, 3058, 32004, 3081, -1000,
	-334, 1622, -1000, 1685, 154, 1754, 41574, -1000, -1000, -1000,
	2232, 2231, -264, 162, 3056, 3055, 937, -1000, 2230, 1105,
	-258, -1000, -1000, 1060, -1000, -1000, -1000, -258, -1000, 1060,
	-1000, 107, -1000, -1000, 2828, -1000, -1000, 1965, -1000, 185,
	-1000, -1000, -1000, -1000, -1000, -1000, 188, -1000, 41574, -1000,
	1094, 111, -1000, 2086, -1000, -1000, -1000, -1000, -1000, 308,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 10436, -1000, -1000, -1000, 2306, -1000, -1000, 10436, 2226,
	2064, 2223, 2058, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 3113, -1000, 3052,
	2221, 2220, 2219, 2217, 2215, 2214, -1000, 10436, 2213, 3445,
	-1000, -1000, -1000, -1000, -1000, -1000, 816, 349, 2212, 1093,
	-1000, -1000, -1000, -1000, 349, -1000, 2053, 218, -1000, -1000,
	-1000, 2046, 2044, 1835, -1000, -1000, 1836, 1395, 236, -1000,
	-1000, -1000, -1000, -1000, -1000, 1960, 1956, 1572, -349, -1000,
	2416, -1000, 1547, 1547, 1547, 41574, 1348, -1000, 1547, 1547,
	2209, 2202, 2201, -180, 670, 1571, 1563, -1000, 1829, 24828,
	31406, 30808, 1179, -1000, 1347, -1000, -1000, -1000, -1000, -1000,
	3092, 670, -1000, 471, 1827, 12245, 2415, 12245, 2414, 499,
	2412, 1344, -1000, 41574, -1000, -1000, 41574, 273, 2397, -1000,
	2395, 2666, 461, 2394, 2392, 41574, 2243, -1000, 2858, 41574,
	700, 2826, -1000, -1000, -1000, 386, -1000, -1000, 515, -1000,
	41574, -1000, 41574, -1000, 1484, -1000, 23632, -1000, -1000, 1324,
	-1000, 2043, 2037, -1000, 218, 2035, 5603, -1000, -1000, 2788,
	2029, -1000, 41574, 1076, 1076, 3113, 41574, 8020, -1000, -1000,
	10436, 2391, -1000, 10436, -1000, -1000, -1000, -1000, -1000, 2390,
	2824, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1491, -1000,
	10436, 10436, -1000, -1000, 706, 13456, -291, 342, -1000, -1000,
	-1000, -266, 2027, -1000, -1000, 3050, 2025, 1992, 41574, -1000,
	-1000, 1060, 1060, -264, -1000, -1000, 1056, -1000, -1000, 11,
	571, -1000, 2198, 2237, -1000, 2179, 12, -1000, 12, -1000,
	158, 10436, -1000, -1000, -1000, -1000, -1000, -1000, 2164, -1000,
	2197, 4534, -181, -180, 15260, -181, -1000, -1000, 321, -1000,
	-1000, 374, -1000, -1000, 1776, 603, -1000, -1000, -1000, 1568,
	1724, 2001, 28416, 23632, 24230, 2024, -1000, -1000, 30210, 1491,
	1491, 4584, 257, 4584, -1000, 2386, 979, 1557, -1000, 1825,
	-1000, 1822, -1000, 3092, 1179, 1347, -1000, -1000, 1509, -1000,
	979, 2342, 3048, -1000, 3638, 41574, 3317, 41574, 2380, 1567,
	12245, -1000, 655, 2744, -1000, -1000, 273, -1000, -1000, 1729,
	12245, -1000, -1000, 2018, 24230, 796, 1566, 1564, 805, 2378,
	-1000, 526, 3105, -1000, -1000, -1000, 865, 2375, -1000, 1693,
	1691, -1000, 41574, -1000, 28416, 28416, 634, 634, 28416, 28416,
	2373, 707, -1000, -1000, 12245, -1000, -1000, 1547, -1000, -1000,
	-1000, 1547, 1401, -1000, -1000, -1000, -1000, -1000, -1000, 1956,
	-1000, -1000, 3028, -1000, -1000, 2086, 41574, 2086, 29612, -1000,
	3046, 3045, -1000, 1779, 2086, 1023, -1000, -334, 41574, 41574,
	-268, 1821, -1000, 2016, 128, -1000, -1000, 1049, -266, -270,
	101, 143, 1551, -1000, -1000, -1000, -1000, -1000, 2195, -1000,
	652, -1000, -1000, -1000, 1023, -1000, -1000, -177, -1000, -1000,
	324, -1000, -1000, -1000, 555, 2014, -1000, -1000, 369, -1000,
	-1000, 2013, -1000, -1000, 108, -1000, 1549, 1321, -1000, 2371,
	10436, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 637,
	44589, -1000, 1025, -1000, 11, 637, 27220, 580, 246, -1000,
	1817, -1000, -1000, 3113, -1000, 578, -1000, 483, -1000, 1311,
	-1000, 1301, 29014, 1814, 2437, -1000, 44551, 773, -1000, -1000,
	3836, -1000, -1000, -1000, -1000, -1000, -1000, 2012, 2008, -1000,
	-1000, -1000, -1000, -1000, 1812, 2358, 84, 2963, 2007, -1000,
	-1000, 2352, 1290, 1284, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1278, 1274, 28416, -1000, -1000, 3836, 1811, 23632,
	1547, -1000, -1000, 1259, 1257, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2351, -1000, -1000, 3044, -268, -1000, 2006, 742,
	152, 143, -1000, 3042, 121, 3041, 3040, 2003, -1000, -1000,
	559, -259, 53, 39, 29, -1000, -1000, -1000, 10436, 41574,
	522, -1000, -1000, -1000, 183, -1000, -1000, -1000, -1000, 2001,
	2000, -1000, 28416, 2898, 2091, 467, 3039, 4584, -1000, 1547,
	-1000, 467, 1253, -1000, 1547, 1547, -1000, 430, -1000, 1556,
	-1000, 1810, -1000, 3028, -1000, 427, -1000, 465, -1000, -1000,
	-1000, 1241, -1000, -1000, -1000, 44551, 474, -1000, 624, 2348,
	-1000, -1000, 2184, 10436, 2346, 1547, 2033, -173, 28416, 2660,
	2636, 2634, 2490, 1211, -1000, -1000, 23632, -1000, -1000, 27818,
	41574, 1992, -1000, -1000, 2345, 1803, 162, 116, 3037, -1000,
	1992, 3035, 1992, 1992, 997, 1680, -1000, 103, 98, 91,
	-1000, -1000, -1000, -1000, 508, -1000, 309, -1000, -1000, -1000,
	279, -1000, -1000, 2898, -1000, 3030, 489, -1000, 23632, -1000,
	-1000, 27220, 1491, 1491, -1000, -1000, 1791, -1000, -1000, -1000,
	-1000, 1784, -1000, -1000, -1000, 1178, -1000, 41574, 813, 7417,
	-1000, 2047, -1000, 41574, -1000, 2689, -1000, 235, 1176, 279,
	634, 279, 634, 279, 634, 279, 634, 304, -1000, -1000,
	-1000, 1170, -1000, -1000, 2957, 23034, 120, -1000, -1000, -1000,
	1998, -1000, 1992, -1000, -1000, -1000, 78, 559, -1000, -1000,
	-1000, 1988, -1000, -1000, -1000, -1000, 1547, 1547, 1982, 1980,
	400, -1000, -1000, -1000, 26622, 481, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 474, 4584, -1000, 7417, 1168, -1000, 2086,
	-1000, 707, -1000, -1000, 2676, 2674, 3096, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 41574, -1000, 41574,
	-1000, 1123, -1000, -1000, -1000, 1331, -1000, -1000, -1000, -1000,
	1544, -1000, -310, 1774, 1736, -1000, -1000, 41574, -1000, 41574,
	471, -1000, 4584, 1111, -1000, 7417, -1000, -1000, 3098, -1000,
	3103, 810, 810, 279, 279, 279, 279, -1000, 987, -1000,
	1543, -1000, 26024, 41574, 1979, -1000, -1000, 1972, -1000, -1000,
	-1000, 1083, 2342, -1000, -1000, -1000, -1000, -1000, 1777, 530,
	-1000, 41574, 6814, -1000, 1053, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2086, 41574, -1000,
}

var yyPgo = [...]int{
	0, 175, 3127, 251, 185, 3681, 88, 250, 238, 229,
	248, 3680, 3679, 3676, 2883, 2853, 3675, 3674, 3673, 3671,
	3669, 3668, 3667, 3666, 3664, 3663, 3659, 3658, 3656, 3655,
	3654, 3653, 3652, 3651, 3650, 3649, 3648, 3646, 3644, 3643,
	3641, 3640, 3639, 3637, 3635, 3631, 244, 3630, 3629, 3626,
	3625, 3622, 3621, 3620, 3619, 3618, 3617, 3615, 3614, 3613,
	3606, 3605, 3602, 3601, 3599, 3598, 3597, 3594, 3593, 3590,
	3589, 3588, 3587, 3586, 3585, 3584, 3583, 3582, 3581, 225,
	3579, 2828, 3577, 3576, 3575, 3574, 3573, 3572, 3571, 220,
	3570, 3569, 3568, 3562, 3560, 3557, 3554, 3550, 3549, 3548,
	3547, 240, 3546, 3544, 3542, 3541, 3540, 3538, 236, 3537,
	179, 200, 3535, 3534, 3533, 3532, 3531, 3530, 245, 190,
	71, 3526, 51, 3524, 3523, 222, 3522, 144, 3521, 153,
	3520, 3519, 3518, 3516, 3514, 3512, 3507, 3506, 3505, 3504,
	3502, 3501, 3499, 3498, 3497, 3495, 90, 3494, 257, 3493,
	70, 3491, 3489, 129, 112, 198, 260, 2263, 271, 255,
	199, 177, 119, 3488, 2855, 3487, 162, 233, 155, 27,
	3486, 132, 3485, 259, 49, 32, 242, 147, 57, 160,
	126, 3484, 223, 107, 103, 3483, 3481, 138, 247, 182,
	3480, 98, 3479, 3475, 3473, 3470, 3469, 211, 197, 3467,
	3466, 128, 3465, 3439, 154, 3438, 73, 123, 172, 122,
	3437, 99, 116, 120, 118, 86, 3435, 105, 3434, 3433,
	3431, 3430, 183, 3429, 3428, 130, 65, 3427, 3426, 3425,
	69, 3423, 75, 3422, 33, 3421, 68, 3420, 3419, 3418,
	3416, 3409, 3408, 3405, 3404, 3403, 3402, 3401, 56, 3398,
	3396, 7, 10, 14, 3395, 22, 3393, 173, 3392, 3391,
	3388, 3386, 3385, 84, 83, 3384, 89, 168, 3383, 8,
	26, 72, 3382, 3380, 226, 224, 97, 145, 3379, 294,
	3376, 3375, 3374, 161, 3373, 2079, 3372, 3371, 3370, 3369,
	3368, 3367, 137, 3365, 218, 39, 3364, 127, 134, 3363,
	37, 45, 209, 203, 3361, 3359, 3358, 143, 219, 136,
	43, 0, 3357, 159, 3355, 3350, 3349, 262, 3348, 235,
	228, 170, 230, 258, 252, 3347, 3346, 79, 3345, 163,
	23, 55, 131, 64, 21, 237, 3342, 1303, 9, 187,
	3341, 213, 3336, 178, 15, 100, 148, 3335, 3334, 29,
	254, 3329, 3327, 3326, 125, 3325, 3324, 184, 77, 3322,
	3319, 3306, 3305, 42, 3297, 36, 12, 3296, 106, 3292,
	249, 3291, 205, 139, 192, 181, 158, 227, 234, 80,
	76, 3290, 1665, 149, 94, 13, 3289, 231, 3288, 166,
	121, 3287, 117, 3284, 243, 261, 214, 3282, 189, 16,
	47, 35, 25, 46, 11, 169, 208, 3280, 3279, 20,
	54, 3277, 115, 3276, 19, 3275, 3274, 67, 3, 3273,
	3272, 18, 17, 3271, 31, 216, 174, 124, 87, 62,
	3270, 3261, 48, 133, 3260, 150, 156, 146, 3259, 74,
	3258, 3257, 3256, 1835, 3255, 253, 3254, 3252, 3251, 3250,
	3248, 3247, 3244, 3243, 3242, 3241, 96, 44, 3240, 3238,
	3236, 3234, 85, 142, 3232, 3231, 3230, 3228, 38, 135,
	3227, 24, 3226, 34, 28, 41, 3224, 95, 3221, 4,
	194, 3220, 3219, 5, 3218, 3217, 1, 2, 3216, 3215,
	113, 3210, 93, 30, 167, 101, 3209, 3208, 82, 221,
	141, 3207, 3206, 91, 241, 212, 3205, 176, 239, 256,
	3204, 217, 3203, 3202, 3201, 3200, 3198, 3197, 1141, 3196,
	3195, 246, 66, 92, 109, 3194, 3193, 3192, 81, 164,
	111, 110, 61, 78, 3191, 108, 210, 3189, 204, 3187,
	3184, 102, 3183, 3180, 3179, 3178, 188, 3177, 3175, 201,
	232, 3166, 3164, 292, 3156, 3153, 3147, 3146, 3144, 3141,
	3140, 3139, 3138, 3135, 269, 265, 3132,
}

//line mysql_sql.y:11042
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() tree.GroupBy {
	v, _ := st.union.(tree.GroupBy)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 559, 562, 562, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 116, 116, 115, 544, 544, 544, 545,
	545, 112, 134, 133, 136, 136, 135, 135, 132, 132,
	128, 131, 131, 130, 130, 129, 124, 126, 126, 125,
	127, 127, 113, 101, 114, 489, 489, 488, 488, 487,
	487, 440, 440, 486, 486, 486, 485, 485, 485, 484,
	484, 483, 483, 482, 482, 480, 480, 481, 479, 478,
	478, 478, 476, 476, 476, 472, 472, 474, 473, 473,
	475, 467, 467, 470, 470, 468, 468, 468, 468, 471,
	466, 466, 466, 465, 465, 100, 100, 100, 384, 384,
	99, 99, 398, 398, 398, 398, 398, 396, 396, 396,
	396, 396, 396, 395, 395, 394, 394, 399, 399, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 90,
	90, 90, 90, 90, 95, 95, 95, 550, 550, 549,
	549, 551, 551, 551, 551, 552, 552, 93, 93, 93,
	94, 393, 393, 393, 91, 92, 92, 383, 383, 388,
	388, 387, 387, 387, 387, 387, 387, 387, 387, 387,
	387, 387, 387, 387, 392, 392, 392, 390, 390, 389,
	389, 391, 391, 84, 84, 84, 87, 86, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 85, 85, 85,
	85, 85, 85, 80, 80, 80, 80, 80, 79, 79,
	81, 81, 380, 380, 379, 96, 96, 97, 547, 547,
	546, 548, 548, 548, 548, 98, 104, 104, 104, 104,
	104, 104, 104, 103, 103, 106, 106, 105, 107, 89,
	89, 89, 89, 89, 89, 88, 88, 88, 88, 88,
	88, 88, 88, 88, 514, 514, 514, 516, 516, 315,
	316, 563, 318, 314, 314, 314, 510, 510, 511, 512,
	513, 513, 513, 102, 11, 11, 11, 11, 11, 11,
	11, 11, 13, 78, 83, 83, 256, 256, 261, 261,
	262, 262, 262, 267, 267, 268, 268, 257, 257, 257,
	257, 257, 257, 257, 257, 257, 257, 257, 257, 257,
	257, 257, 257, 257, 257, 257, 257, 257, 257, 244,
	244, 244, 239, 239, 239, 239, 240, 240, 241, 241,
	242, 242, 242, 242, 243, 243, 308, 308, 263, 263,
	263, 265, 265, 264, 260, 258, 258, 258, 258, 258,
	258, 259, 259, 259, 259, 266, 266, 76, 82, 82,
	82, 527, 527, 77, 538, 538, 443, 443, 329, 329,
	328, 328, 328, 328, 328, 328, 328, 328, 328, 328,
	328, 328, 328, 328, 328, 328, 448, 449, 325, 46,
	46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 46, 46, 46, 53,
	56, 52, 52, 52, 369, 369, 51, 564, 564, 303,
	303, 64, 63, 55, 65, 66, 67, 68, 69, 70,
	50, 62, 62, 62, 62, 62, 62, 62, 62, 73,
	461, 461, 566, 566, 566, 71, 72, 442, 442, 442,
	61, 60, 59, 58, 57, 57, 49, 49, 48, 48,
	54, 140, 141, 322, 322, 322, 324, 324, 320, 565,
	565, 412, 412, 323, 323, 47, 47, 47, 47, 74,
	321, 321, 302, 319, 319, 319, 12, 12, 10, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 25, 26, 28, 377, 377, 374, 27,
	19, 18, 18, 22, 21, 17, 17, 20, 23, 24,
	24, 9, 9, 9, 9, 14, 14, 15, 161, 161,
	212, 212, 522, 522, 518, 518, 519, 519, 519, 520,
	520, 521, 521, 108, 455, 455, 455, 455, 455, 455,
	8, 183, 183, 454, 454, 454, 454, 454, 454, 381,
	381, 381, 499, 499, 499, 500, 182, 182, 177, 177,
	456, 456, 346, 501, 501, 464, 464, 463, 463, 462,
	462, 180, 180, 181, 181, 164, 164, 119, 119, 469,
	469, 469, 469, 477, 477, 439, 439, 248, 248, 295,
	295, 296, 296, 154, 154, 155, 155, 155, 155, 155,
	155, 553, 553, 554, 555, 556, 556, 557, 557, 557,
	558, 558, 558, 558, 558, 507, 507, 509, 509, 508,
	179, 179, 175, 175, 176, 176, 176, 174, 174, 173,
	172, 172, 171, 169, 169, 169, 170, 170, 170, 187,
	187, 157, 157, 157, 156, 156, 156, 156, 156, 279,
	279, 279, 279, 279, 279, 279, 279, 279, 279, 279,
	279, 158, 158, 515, 515, 515, 444, 444, 444, 451,
	451, 276, 276, 277, 277, 275, 275, 159, 159, 160,
	160, 160, 160, 274, 274, 273, 162, 162, 168, 167,
	167, 163, 163, 163, 163, 284, 284, 283, 283, 283,
	283, 111, 117, 117, 118, 186, 186, 282, 281, 281,
	281, 185, 185, 184, 184, 178, 178, 166, 166, 166,
	166, 280, 165, 278, 543, 543, 542, 542, 541, 539,
	539, 539, 540, 540, 540, 540, 491, 491, 491, 491,
	491, 309, 309, 309, 313, 313, 312, 312, 312, 312,
	312, 317, 7, 7, 7, 7, 7, 7, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 38, 196, 197, 39, 198, 198, 199, 199, 200,
	200, 201, 202, 203, 203, 203, 203, 37, 188, 188,
	189, 189, 190, 190, 191, 192, 192, 192, 195, 193,
	194, 194, 561, 561, 560, 36, 36, 29, 147, 147,
	148, 148, 148, 150, 150, 245, 245, 245, 149, 149,
	151, 151, 151, 523, 526, 524, 524, 528, 528, 528,
	529, 529, 529, 529, 530, 530, 30, 137, 142, 533,
	533, 533, 532, 532, 534, 534, 535, 535, 299, 299,
	300, 300, 145, 146, 146, 144, 139, 153, 153, 153,
	153, 153, 138, 143, 525, 531, 531, 531, 378, 378,
	375, 376, 376, 373, 372, 372, 372, 537, 537, 536,
	536, 536, 310, 310, 31, 368, 368, 370, 371, 371,
	371, 362, 362, 362, 362, 35, 366, 366, 367, 367,
	367, 367, 367, 367, 367, 363, 363, 365, 365, 361,
	361, 361, 361, 361, 361, 34, 152, 152, 360, 360,
	357, 357, 355, 355, 356, 356, 354, 354, 354, 358,
	358, 42, 75, 43, 44, 45, 41, 359, 359, 33,
	33, 33, 33, 121, 120, 120, 120, 120, 120, 123,
	123, 298, 298, 297, 297, 122, 40, 224, 224, 431,
	431, 426, 426, 426, 426, 426, 446, 446, 446, 427,
	427, 427, 428, 428, 428, 430, 430, 430, 429, 429,
	429, 429, 429, 445, 445, 447, 447, 447, 400, 400,
	401, 401, 401, 404, 404, 418, 418, 419, 419, 417,
	417, 424, 424, 423, 423, 422, 422, 421, 421, 420,
	420, 420, 420, 415, 415, 414, 414, 402, 402, 402,
	402, 402, 403, 403, 403, 413, 413, 416, 416, 272,
	272, 271, 271, 232, 232, 233, 233, 270, 270, 230,
	230, 231, 231, 231, 269, 269, 269, 269, 269, 269,
	269, 269, 269, 269, 269, 269, 269, 269, 269, 269,
	269, 269, 269, 269, 269, 269, 269, 269, 269, 269,
	269, 269, 269, 269, 269, 269, 269, 269, 269, 497,
	497, 498, 235, 235, 246, 246, 246, 246, 246, 246,
	234, 234, 236, 236, 213, 213, 211, 211, 204, 204,
	205, 205, 206, 206, 206, 210, 210, 209, 209, 209,
	209, 207, 207, 208, 208, 208, 208, 208, 208, 386,
	386, 494, 494, 495, 495, 490, 490, 490, 493, 493,
	493, 493, 493, 493, 496, 496, 496, 492, 492, 214,
	293, 293, 293, 311, 311, 311, 311, 292, 292, 292,
	229, 229, 228, 228, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 385, 385, 326, 326,
	327, 327, 255, 254, 254, 254, 254, 254, 252, 253,
	251, 251, 251, 251, 251, 250, 250, 249, 249, 249,
	364, 364, 247, 247, 238, 238, 238, 237, 237, 237,
	425, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 290, 290,
	290, 291, 291, 291, 291, 291, 291, 336, 336, 342,
	342, 506, 506, 505, 215, 215, 215, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 225, 225, 225, 409,
	409, 409, 409, 410, 410, 410, 410, 411, 411, 411,
	407, 407, 408, 408, 347, 348, 348, 452, 452, 453,
	453, 405, 405, 406, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 460, 460, 460, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 517, 517, 517, 502, 502, 502, 503,
	503, 503, 503, 503, 503, 503, 503, 503, 503, 503,
	503, 504, 504, 504, 504, 504, 504, 504, 504, 504,
	504, 504, 504, 504, 504, 504, 504, 504, 288, 288,
	288, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 349, 349, 350, 350,
	457, 457, 457, 457, 457, 457, 458, 458, 459, 459,
	459, 459, 450, 450, 450, 450, 450, 450, 450, 450,
	450, 450, 450, 450, 450, 450, 450, 450, 450, 450,
	450, 450, 450, 450, 450, 450, 450, 450, 450, 450,
	450, 334, 285, 285, 285, 351, 343, 343, 344, 344,
	345, 345, 337, 337, 337, 337, 337, 337, 338, 338,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 339, 339, 341, 341, 353, 353, 353, 352,
	352, 352, 352, 352, 352, 352, 227, 227, 227, 227,
	331, 331, 331, 330, 330, 330, 330, 330, 330, 330,
	330, 330, 330, 330, 330, 217, 217, 217, 217, 221,
	221, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 222, 222, 222, 222, 222,
	220, 220, 220, 220, 220, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 109, 110, 110, 219, 294, 294, 432,
	432, 435, 435, 433, 433, 434, 436, 436, 436, 437,
	437, 437, 438, 438, 438, 441, 441, 301, 301, 301,
	307, 307, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 6, 4, 0, 1, 1, 0,
	1, 5, 2, 2, 6, 9, 6, 9, 4, 7,
	8, 0, 1, 1, 2, 4, 6, 1, 2, 4,
	0, 2, 10, 10, 2, 0, 2, 1, 3, 3,
	3, 0, 2, 1, 3, 5, 0, 2, 3, 1,
	3, 1, 1, 1, 3, 1, 1, 1, 1, 0,
	3, 3, 0, 3, 3, 0, 1, 3, 0, 1,
	3, 0, 2, 1, 2, 3, 4, 3, 3, 1,
	0, 1, 1, 0, 1, 8, 5, 7, 0, 3,
	8, 5, 1, 3, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 4, 1, 3, 1,
	2, 2, 2, 2, 2, 2, 1, 2, 2, 2,
	2, 1, 1, 2, 2, 1, 1, 1, 1, 1,
	2, 2, 2, 1, 2, 1, 2, 2, 1, 2,
	1, 1, 2, 2, 1, 1, 1, 3, 2, 2,
	2, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 4, 4, 1, 3, 3,
	1, 2, 2, 2, 1, 2, 2, 3, 4, 4,
	6, 1, 1, 1, 2, 4, 6, 1, 4, 1,
	3, 3, 4, 4, 4, 4, 3, 3, 2, 4,
	4, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	3, 1, 3, 1, 1, 1, 2, 2, 0, 1,
	4, 2, 4, 1, 5, 3, 2, 1, 2, 2,
	4, 4, 5, 2, 1, 3, 4, 4, 1, 2,
	9, 7, 1, 3, 3, 1, 1, 3, 1, 3,
	2, 1, 2, 1, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 4, 4, 2, 4, 3, 3, 1,
	1, 1, 1, 1, 1, 2, 3, 4, 7, 2,
	3, 3, 4, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 2, 1,
	1, 1, 1, 6, 1, 1, 1, 1, 1, 1,
	1, 1, 10, 7, 4, 4, 1, 3, 1, 6,
	3, 3, 3, 1, 1, 1, 3, 2, 4, 5,
	5, 6, 5, 5, 3, 2, 2, 1, 3, 4,
	3, 7, 5, 8, 2, 2, 1, 3, 2, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 0, 1,
	2, 1, 3, 2, 1, 2, 2, 1, 2, 3,
	2, 3, 6, 3, 3, 1, 1, 7, 7, 8,
	8, 0, 4, 7, 0, 3, 0, 2, 0, 1,
	1, 1, 1, 4, 2, 2, 3, 3, 4, 5,
	3, 4, 4, 2, 2, 2, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	3, 2, 5, 5, 0, 2, 7, 0, 1, 0,
	1, 5, 5, 3, 3, 2, 4, 4, 4, 4,
	4, 1, 1, 1, 3, 3, 1, 1, 1, 6,
	0, 1, 1, 1, 1, 5, 5, 0, 1, 1,
	3, 3, 3, 4, 6, 7, 4, 4, 7, 8,
	3, 3, 3, 0, 2, 2, 0, 2, 2, 1,
	1, 1, 1, 0, 1, 4, 4, 5, 4, 3,
	1, 3, 1, 1, 3, 5, 2, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 4, 4, 1, 3, 1, 4,
	6, 6, 4, 4, 4, 4, 4, 3, 6, 3,
	5, 1, 1, 2, 2, 11, 8, 9, 1, 3,
	2, 4, 0, 2, 0, 1, 1, 1, 1, 0,
	1, 0, 1, 4, 2, 1, 5, 4, 4, 2,
	5, 1, 3, 2, 1, 5, 4, 4, 2, 0,
	5, 4, 0, 1, 3, 3, 1, 3, 1, 3,
	1, 3, 4, 0, 1, 0, 1, 1, 3, 1,
	1, 0, 4, 1, 3, 2, 1, 0, 8, 0,
	4, 7, 4, 0, 2, 0, 2, 0, 2, 0,
	4, 1, 3, 1, 1, 6, 4, 5, 7, 4,
	5, 0, 1, 3, 8, 0, 6, 0, 4, 6,
	1, 1, 1, 1, 1, 2, 3, 1, 3, 6,
	0, 3, 0, 1, 2, 4, 4, 0, 1, 3,
	1, 3, 3, 0, 1, 1, 0, 2, 2, 0,
	2, 3, 3, 3, 1, 3, 3, 3, 3, 1,
	2, 2, 1, 2, 2, 1, 2, 2, 1, 2,
	2, 7, 7, 1, 1, 1, 0, 1, 1, 1,
	1, 0, 2, 0, 3, 0, 2, 1, 3, 1,
	2, 3, 5, 0, 1, 2, 1, 3, 1, 1,
	1, 4, 4, 4, 3, 2, 2, 2, 3, 2,
	3, 4, 1, 3, 4, 0, 2, 1, 1, 2,
	2, 0, 1, 2, 4, 1, 3, 1, 3, 2,
	3, 1, 4, 3, 0, 1, 1, 2, 5, 2,
	2, 2, 0, 2, 3, 3, 0, 1, 3, 1,
	3, 0, 1, 2, 1, 1, 0, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 7, 1, 1, 7, 1, 3, 0, 1, 1,
	3, 1, 3, 0, 1, 1, 1, 14, 1, 3,
	0, 1, 1, 3, 1, 1, 2, 4, 1, 1,
	1, 1, 0, 1, 2, 9, 9, 7, 1, 2,
	3, 3, 3, 0, 4, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 4, 1, 1, 3, 4, 3,
	0, 1, 1, 1, 0, 2, 7, 8, 8, 0,
	3, 3, 0, 3, 0, 3, 0, 5, 1, 3,
	0, 3, 3, 0, 2, 9, 6, 0, 2, 2,
	3, 3, 4, 4, 1, 0, 2, 2, 1, 3,
	2, 1, 3, 2, 1, 3, 2, 0, 1, 3,
	4, 3, 1, 1, 4, 1, 3, 1, 1, 1,
	1, 0, 1, 1, 1, 11, 0, 2, 3, 3,
	2, 2, 3, 1, 1, 1, 3, 3, 4, 0,
	2, 2, 2, 2, 2, 6, 0, 4, 1, 1,
	0, 3, 0, 1, 1, 2, 4, 4, 4, 0,
	1, 8, 2, 4, 4, 4, 9, 0, 2, 11,
	9, 11, 8, 2, 2, 9, 4, 5, 3, 0,
	4, 1, 3, 0, 3, 5, 10, 0, 2, 0,
	2, 0, 3, 2, 4, 3, 0, 2, 1, 0,
	2, 3, 0, 2, 3, 0, 2, 1, 0, 3,
	2, 4, 3, 0, 1, 0, 1, 1, 0, 6,
	0, 3, 5, 0, 4, 0, 3, 1, 3, 4,
	5, 0, 3, 1, 3, 2, 3, 1, 2, 0,
	4, 6, 5, 0, 2, 0, 2, 4, 5, 4,
	5, 1, 5, 6, 5, 0, 3, 0, 1, 1,
	3, 3, 3, 0, 4, 1, 3, 3, 3, 0,
	1, 1, 3, 2, 3, 3, 3, 4, 4, 3,
	3, 3, 3, 4, 4, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 1, 5, 4, 1,
	3, 3, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 3, 0, 1,
	1, 3, 1, 1, 1, 1, 1, 7, 9, 7,
	9, 2, 1, 7, 9, 7, 9, 8, 5, 0,
	1, 0, 1, 1, 1, 1, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 3,
	1, 3, 5, 1, 1, 1, 1, 1, 3, 5,
	0, 1, 1, 2, 1, 2, 2, 1, 1, 2,
	2, 2, 3, 3, 2, 2, 1, 5, 6, 4,
	1, 1, 1, 5, 4, 1, 1, 2, 0, 1,
	1, 2, 5, 0, 1, 1, 2, 2, 3, 3,
	1, 1, 2, 2, 2, 0, 1, 2, 2, 2,
	0, 3, 0, 3, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 1, 1, 1, 1, 3, 5, 2,
	2, 2, 2, 1, 1, 2, 5, 6, 8, 6,
	6, 6, 1, 1, 1, 1, 1, 1, 4, 4,
	4, 7, 7, 7, 7, 7, 7, 0, 2, 0,
	1, 1, 2, 4, 1, 2, 2, 1, 2, 2,
	1, 2, 2, 2, 2, 2, 0, 1, 1, 1,
	2, 2, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 5, 0, 1, 3, 0, 1, 0, 2, 0,
	2, 0, 1, 6, 8, 8, 6, 6, 5, 5,
	5, 6, 6, 6, 6, 5, 6, 6, 6, 6,
	6, 6, 6, 6, 1, 1, 1, 4, 4, 6,
	8, 6, 4, 5, 4, 4, 4, 3, 4, 6,
	6, 7, 4, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	8, 4, 2, 3, 2, 4, 2, 2, 4, 6,
	2, 2, 4, 6, 4, 2, 0, 1, 2, 3,
	1, 1, 1, 1, 1, 1, 0, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 1, 1, 3, 0, 1, 1, 3,
	1, 3, 3, 3, 3, 3, 2, 1, 1, 1,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
	1, 3, 4, 4, 5, 4, 5, 3, 4, 5,
	6, 1, 0, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 1, 1, 2, 3, 1, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 2, 2, 2, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	4, 4, 1, 2, 3, 5, 1, 1, 3, 0,
	1, 0, 3, 0, 3, 3, 0, 3, 5, 0,
	3, 5, 0, 1, 1, 0, 1, 1, 2, 2,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -559, -562, -2, -5, 611, -1, -4, -110, -84,
	-7, -112, -113, -8, -108, -9, -10, -12, -88, -103,
	-105, -107, -106, -46, -11, -102, -79, -80, -90, -96,
	-99, -100, -101, -114, -109, -111, -154, -115, -116, 601,
	-85, -86, -87, -32, -31, -30, -29, -137, -142, 607,
	445, 14, 494, -14, -15, -507, -16, 258, -314, -315,
	-316, -318, -563, -47, -48, -49, -57, -58, -59, -60,
	-61, -71, -72, -73, -50, -51, -52, -55, -53, -64,
	-63, -65, -66, -67, -68, -69, -70, -54, -140, -141,
	-74, -56, -75, -77, -76, -82, -78, -83, -139, -144,
	-13, 233, -81, 76, -91, -92, -93, -94, -95, -97,
	-98, 369, 375, 432, 600, 61, -155, -157, 617, 618,
	158, 159, 161, 162, -33, -34, -35, -36, -37, -38,
	-40, -39, -41, -42, -43, -44, -45, 229, 16, 537,
	-17, -20, -18, -21, -19, -27, -28, -26, -23, -25,
	-138, -24, -143, -22, 253, 252, 38, 319, 320, 321,
	373, 251, 230, 15, 31, 42, 349, -156, 82, 529,
	530, 532, 231, -158, 13, 621, -6, -3, -2, -124,
	-128, -132, -135, -136, -133, -134, -4, -110, 116, 243,
	602, -311, 365, 603, 605, 604, 85, 93, -304, -306,
	445, 258, 369, 375, 600, 618, 542, 543, 544, 545,
	546, 547, 548, 549, 551, 552, 553, 554, 555, 556,
	557, 567, 568, 558, 559, 560, 561, 562, 563, 564,
	565, 569, 570, 571, 572, 573, 574, 575, 576, 577,
	578, 579, 580, 581, 582, 497, 587, 588, 589, 590,
	525, 550, 586, 347, 348, 534, 270, 294, 400, 300,
	307, 158, 177, 171, 199, 191, 530, 166, 274, 312,
	275, 92, 161, 480, 106, 457, 429, 164, 289, 291,
	293, 526, 527, 359, 296, 524, 295, 297, 299, 528,
	276, 350, 187, 182, 288, 272, 180, 277, 40, 278,
	204, 279, 280, 539, 453, 346, 459, 304, 52, 427,
	181, 454, 292, 456, 208, 212, 471, 472, 175, 176,
	461, 474, 203, 206, 207, 250, 343, 344, 43, 536,
	262, 475, 210, 202, 198, 483, 308, 306, 201, 174,
	197, 273, 65, 214, 213, 215, 423, 424, 425, 426,
	281, 282, 363, 470, 194, 183, 351, 167, 23, 478,
	257, 458, 376, 283, 301, 309, 209, 211, 264, 269,
	538, 529, 431, 268, 305, 476, 179, 261, 290, 256,
	479, 168, 532, 378, 284, 162, 298, 473, 482, 64,
	391, 173, 165, 247, 159, 266, 271, 285, 286, 287,
	523, 311, 310, 302, 531, 195, 263, 200, 185, 172,
	196, 160, 265, 481, 392, 598, 349, 410, 193, 190,
	267, 240, 477, 460, 163, 414, 393, 188, 313, 594,
	595, 596, 364, 342, 314, 315, 186, 254, 451, 452,
	318, 420, 334, 394, 430, 401, 395, 221, 222, 322,
	463, 465, 205, 597, 323, 324, 325, 455, 326, 327,
	328, 329, 368, 56, 58, 94, 96, 619, 63, 29,
	354, 357, 389, 396, 336, 599, 152, 535, 333, 337,
	358, 25, 412, 380, 416, 415, 48, 49, 50, 53,
	54, 55, 57, 59, 60, 51, 522, 373, 386, 484,
	45, 47, 383, 27, 360, 411, 433, 332, 413, 444,
	46, 442, 443, 464, 26, 362, 361, 62, 44, 419,
	421, 422, 316, 330, 371, 608, 485, 366, 382, 385,
	367, 335, 356, 387, 67, 66, 379, 609, 374, 372,
	331, 540, 541, 338, 566, 352, 428, 519, 518, 517,
	516, 515, 514, 513, 512, 319, 320, 321, 397, 398,
	399, 409, 402, 403, 404, 405, 406, 407, 408, 447,
	448, 610, 466, 468, 469, 467, 235, 620, 353, 238,
	612, 613, 95, 614, 616, 615, 28, -391, -389, -311,
	530, 600, 375, 529, 532, 369, 349, 618, 373, 258,
	319, 320, 321, 445, -198, -311, 620, -164, 39, -211,
	-311, -164, -81, -15, -14, -156, -157, -211, 237, -319,
	24, 427, -89, 428, 233, 82, -311, -9, -101, -8,
	-108, -79, -154, 432, -317, -311, 319, 319, -317, 237,
	-311, 268, 408, -443, 243, -395, -368, 269, -394, -370,
	-397, -371, 32, 229, 231, 230, 265, 16, 373, 239,
	14, 13, 374, 251, 25, 26, 28, 15, 375, 377,
	29, 378, 381, 382, 383, 42, 386, 387, 258, 85,
	93, 88, 276, -197, -311, -345, -337, 113, -340, -332,
	-333, -335, -486, -480, -330, 82, 140, 141, 148, 114,
	-334, -425, 36, 116, 546, 550, 586, 495, -286, -287,
	-288, -289, -290, -291, -311, -481, -479, 88, 97, 100,
	103, 104, 102, 101, 152, 184, 99, 89, 153, -157,
	85, -502, 556, -305, 579, 587, 588, 589, 590, 578,
	61, -450, -459, 236, -457, 151, 189, 254, 185, 14,
	146, 420, 186, 553, 575, 497, 557, 567, 582, 548,
	549, 551, 543, 544, 545, 547, 558, 560, 574, -460,
	570, 580, 581, 566, 583, 584, 585, 616, 87, 86,
	573, 572, 559, 554, 555, 561, 542, 552, 562, 563,
	571, 576, 577, 357, 106, 358, 359, 487, 350, 360,
	243, 427, 70, 361, 362, 363, 364, 365, 494, 366,
	71, 367, 356, 258, 410, 368, 188, 205, 499, 498,
	500, 491, 488, 486, 489, 490, 492, 493, 564, 565,
	569, -117, -118, 592, -553, -279, -554, 6, 7, 8,
	9, -555, 153, -544, 429, 538, 88, 163, 160, -382,
	163, 112, 168, 167, -382, 322, 264, -359, -147, 347,
	410, 326, 94, 268, -362, -360, 526, -445, 316, 312,
	288, 238, 109, -148, 248, 247, 107, 487, 236, 384,
	307, 56, 58, -518, -519, 226, 227, 228, -509, 520,
	-508, -311, 359, 96, 27, 237, 370, 264, 465, 463,
	464, 466, 467, 468, 469, -62, -461, -442, 460, 459,
	-323, 452, 458, 450, 462, 453, 348, 328, 327, 229,
	612, 527, 521, -301, 394, 430, 484, 485, 371, 431,
	471, 473, 454, 106, 192, 189, 238, 240, 237, 347,
	487, 410, 94, 326, -518, 160, 471, 473, 268, 408,
	41, -388, 420, -387, -389, 472, 483, 86, 87, 470,
	-301, 106, 451, 451, -553, -279, -155, -157, -111, -507,
	528, 528, 528, 238, 347, 410, 268, 239, 237, 523,
	526, 240, 487, 236, 319, 370, 264, 326, 94, -444,
	-515, 32, -451, 223, 224, 225, 33, 34, -1, 120,
	621, -337, -337, -6, 624, -6, -337, -311, -311, 155,
	-217, -221, -218, -220, -219, -223, -222, 189, 190, 151,
	193, 195, 196, 197, 198, 199, 200, 201, 202, 203,
	206, 207, 204, 31, 205, 254, 185, 186, 187, 188,
	208, 171, 191, 535, 216, 172, 217, 173, 218, 174,
	219, 175, 176, 220, 177, 180, 181, 182, 183, 179,
	154, 82, 154, 88, -180, 260, -211, 154, -180, -553,
	-173, -174, 11, -211, -292, -311, 429, 123, -89, -89,
	428, -510, -511, -512, -514, 233, 428, 427, 154, 276,
	17, -317, -317, 80, -211, -370, 268, -395, -368, 36,
	79, 155, 241, 155, 79, 82, 371, 347, 410, 372,
	487, 237, 384, 240, 268, 385, 347, 410, 237, 240,
	487, 268, 347, 237, 240, 410, 268, 385, 450, 451,
	240, 27, 376, 379, 380, 451, -465, 483, 155, 112,
	109, 110, 111, -337, 130, -352, 123, 124, 125, 126,
	127, 128, 129, 137, 136, 147, 140, 141, 142, 143,
	144, 145, 146, 138, 139, 133, 113, 131, 135, 132,
	115, -157, -337, -345, 61, -335, -335, -335, -335, -425,
	-342, -337, 82, 82, 82, 82, 154, 101, 88, -337,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, -458, 82, 82, -349, -350, 82, 82, -330,
	-292, 82, 88, 88, 82, 82, 82, 88, -350, -350,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, -174, 155, -173, 82, -173, -174, -158,
	-157, 32, 33, 32, 33, 32, 33, 32, 33, -556,
	609, 82, 97, 619, 221, 476, 537, 166, 167, 168,
	-196, -311, -198, 370, 240, 523, 240, -148, -357, 243,
	-357, -357, -357, -357, 239, -357, 24, 237, 237, 237,
	237, -357, 494, 123, 123, 59, -520, 170, 155, -509,
	-179, 82, -322, 131, 135, -322, 24, 266, 266, 266,
	-322, 306, -564, -565, 17, 133, -320, -565, -320, -320,
	-322, -566, 239, 461, 43, 267, 266, -175, -176, 22,
	-175, 455, 451, -412, 456, 457, -324, -565, -323, -322,
	-322, -323, -322, -322, -322, 237, 240, 487, 326, 613,
	-564, -564, 31, 31, -443, -443, -211, -443, 521, -302,
	-311, -443, -443, -443, -521, 242, -550, -549, 474, -552,
	476, 160, -389, 160, -389, -370, 268, 268, 155, 123,
	24, -390, 123, 134, -389, -389, -390, -390, -234, 41,
	-310, 151, -311, 88, -234, 41, -547, -546, -211, -174,
	-158, -157, 83, 83, 83, 531, 531, 531, -443, -443,
	-443, -443, -443, -445, -443, -443, -443, -443, -443, -317,
	-188, -311, -198, 243, -443, -443, -159, -160, 142, -337,
	-311, -159, -3, -126, -125, 117, 118, 120, 603, 365,
	602, 606, 600, -389, 41, -438, 392, 391, -432, -434,
	82, -433, 82, -433, -433, -433, -433, -433, 82, 82,
	-435, 82, -435, -435, -432, -436, 82, -436, -437, 82,
	-437, -436, -311, -343, -345, -311, 39, -454, 61, -154,
	82, 31, 82, -311, -455, 61, -154, 82, 31, -174,
	-119, 39, -176, 21, 154, 97, 88, -89, 83, 155,
	-513, 103, 104, -516, 203, 195, -311, -104, 88, -7,
	-8, -9, -10, -46, -79, -154, -482, -480, 82, 32,
	419, 79, 17, -396, 237, 487, 370, 264, 240, 347,
	-394, -377, -374, -372, -310, -370, -373, -372, -399, -292,
	451, -120, 434, 433, 318, -337, -337, -337, -337, -337,
	102, 113, 342, 103, 104, -332, -353, 32, 314, 315,
	-333, -333, -333, -333, -333, -333, -333, -333, -333, -333,
	-333, -333, -341, -351, -425, 82, 133, 131, 135, 132,
	115, -335, -335, -333, -333, 83, 155, -506, -505, 117,
	-337, -337, -337, -337, -311, -503, -504, 501, 502, 503,
	504, 505, 506, 507, 508, 509, 510, 511, 361, 356,
	362, 360, 350, 368, 363, 364, 188, 518, 519, 512,
	513, 514, 515, 516, 517, -343, -343, -337, -503, -343,
	-285, 33, 32, -345, -345, -345, 83, -337, -517, 340,
	339, 341, -177, -311, -343, 83, 83, 83, 97, -345,
	-345, -343, -333, -343, -504, -285, -285, -285, -285, 142,
	-345, -345, -285, -285, -285, -285, 142, -285, -285, -285,
	-285, -285, -285, -285, -285, 83, 83, 83, 142, -345,
	-175, -118, -463, -462, -337, 41, -119, -176, -557, 610,
	82, -292, -545, 88, 88, 622, 477, 478, 164, 167,
	166, 35, 82, -188, -357, -357, -357, -523, -311, 113,
	-378, -375, -372, -311, -311, -368, -311, -311, -211, -357,
	-357, -357, -357, -211, -245, 53, 54, 55, -372, -149,
	56, 57, -521, -508, 35, -178, -311, -275, 18, -335,
	-335, -372, 268, -564, -322, -322, -303, -302, -324, -319,
	-324, -324, -275, -320, -322, -322, -337, -324, -320, -275,
	-311, 451, -275, -275, -412, -321, -311, -321, -357, -302,
	-303, -303, -211, -211, -256, -261, -257, -262, 260, 234,
	354, 355, 232, 230, 11, 231, -269, 307, -358, 495,
	-240, -241, 77, 42, -243, 258, 396, 389, 270, 274,
	92, 275, 429, 276, 239, 278, 279, 280, 295, 297,
	250, 281, 282, 283, 420, 284, 159, 296, 285, 286,
	287, 372, -235, 6, 329, 41, 51, 52, 443, 442,
	540, 537, 271, -523, -523, 31, 31, -378, -311, -311,
	-167, -162, -166, -163, -168, -278, -280, -165, 82, -211,
	-157, -311, 155, 475, 477, 478, -550, -390, -550, -390,
	32, 419, -393, 419, 32, -368, -387, 471, 473, -383,
	88, 420, -373, -392, 79, 151, -462, -390, -390, -392,
	-392, 150, 155, -548, 476, 477, 226, -175, 97, 97,
	97, -213, -211, -523, -377, -368, -311, -443, -213, -213,
	-213, -311, -311, 82, 154, 36, -311, -311, -274, 155,
	-273, 17, -312, -311, 35, 88, 154, -274, -127, -125,
	119, -337, -6, 602, -337, -6, -6, -337, -6, -337,
	-441, 393, 97, 97, -294, 88, -294, 97, 97, 97,
	83, 88, -381, 79, -456, -346, -501, 592, -182, 83,
	-177, -499, -500, -177, -181, -311, -456, -182, 83, -499,
	-175, 593, -119, -172, -171, -337, -311, 24, -89, -511,
	154, 155, -178, -396, -376, -373, -398, 142, -311, -384,
	155, 537, 625, 86, 241, -537, -536, 411, 83, 155,
	-466, 242, 494, 88, 622, 427, 221, 222, 102, 342,
	103, 104, -425, -345, -341, -335, -335, -333, -333, -339,
	255, -339, 112, -337, -336, -505, 119, -337, 35, 155,
	35, 155, 80, 154, 83, 83, 17, 17, 83, -337,
	83, 83, 83, 83, 17, 17, -337, 83, 154, 83,
	83, 83, 83, 80, 83, 155, 83, 155, -345, -345,
	-337, -345, 83, 83, 83, -337, -337, -337, -345, 83,
	-337, -337, -337, -337, -337, -337, -337, -337, -406, 446,
	-406, -406, 155, 155, 155, 83, -119, 82, 97, 155,
	-298, -297, 88, 165, 168, 168, 167, -197, -199, -200,
	-201, -202, -203, 133, 156, 157, 82, -211, -211, -211,
	-526, 397, 36, -538, 155, 41, -536, 487, -145, 318,
	-361, 80, -152, 17, 537, -211, -211, -211, -211, -224,
	35, 17, -161, -212, -311, 82, 83, 155, -337, -369,
	80, -311, -303, -275, -275, -324, -275, -275, 155, 23,
	-322, -324, -324, -320, 154, -302, -431, 35, -179, 155,
	21, 260, -210, -308, -207, -209, 245, -327, -208, 248,
	-495, 246, 244, 107, 249, 303, 108, 239, -308, -308,
	245, -244, 241, 35, -308, -259, 239, 345, 303, 246,
	21, 260, -258, 239, 108, -311, 245, 249, 244, -307,
	123, -301, 150, 241, 43, 372, -307, 541, 260, -307,
	-307, -307, -307, -307, -307, -307, 277, 277, -307, -307,
	-307, -307, -307, -307, -307, -307, -307, -307, -307, 160,
	-307, -307, -307, -307, -307, -307, 82, 272, 273, -527,
	397, 31, 353, 353, -538, 31, -153, 347, 31, -281,
	-282, -283, -284, 68, 72, 74, 69, 70, 71, 75,
	31, 155, -309, -313, 35, -311, 88, -309, -157, -162,
	-167, -309, 82, -549, -551, 479, 476, 482, -392, -392,
	241, 82, 123, -392, -392, 41, -310, -546, 483, 477,
	-119, 155, 79, -213, -189, -190, -191, -192, -217, -292,
	190, 193, 195, 196, 197, 198, 199, 200, 201, 202,
	203, 206, 207, 204, 205, 254, 185, 186, 187, 188,
	208, 171, 191, 535, 172, 173, 174, 175, 176, 177,
	180, 181, 182, 183, 179, -311, -198, -275, -160, -162,
	-311, 88, -311, 142, -275, 120, -6, 118, -131, -130,
	-129, 121, 600, 606, 120, 120, 120, 83, 83, 83,
	155, 83, 83, 83, 155, 83, 155, -469, 456, 40,
	155, 82, 83, 155, 61, 155, 123, 83, 155, 83,
	61, -119, 88, 155, -169, 37, 38, 154, 429, -311,
	-480, 83, -398, 155, 241, 154, 154, -374, 375, -310,
	-376, 21, 537, -292, 39, -298, 123, 622, -311, 83,
	-339, -339, 112, -335, -332, 83, 120, -337, 118, -215,
	-217, 391, 392, -337, -215, -216, -222, 151, 189, 254,
	188, 187, 185, 391, 392, -234, -311, -337, -337, 83,
	-337, -337, 17, -311, -234, -333, -337, -174, -174, 83,
	83, -405, -406, -405, -405, 83, 83, 83, 83, -405,
	83, 83, 83, 83, 83, 83, 83, 83, 82, 97,
	100, 97, 100, -462, -558, 63, 608, 62, 419, 102,
	308, 155, 97, 623, 155, 123, 168, 383, 83, 155,
	-292, -189, -179, 82, -179, -529, 458, 399, 409, -307,
	-329, -328, 349, 42, -448, 420, 405, 406, -375, 268,
	-311, -535, 95, 123, 79, 333, 337, 334, 335, 336,
	-355, -356, -354, -358, -523, 82, 82, 82, 82, 35,
	-426, 323, -217, -211, -161, -311, 17, 155, -522, 154,
	-1, -311, -368, -322, -275, -337, -337, -275, -322, -322,
	-324, -311, -426, -217, 35, -257, 234, 231, -402, 305,
	306, -403, -416, 308, -418, 82, -214, -292, -208, -494,
	-495, -357, -311, 108, -494, 108, 82, -214, -292, -292,
	-260, -321, -292, -311, -311, -311, -311, -265, -264, -292,
	-267, 32, -268, -311, -311, -311, -311, 108, 108, -239,
	41, 48, 49, 50, -307, -307, 192, -242, 41, 419,
	421, 422, -267, 97, 97, 97, 97, 88, 88, 88,
	-307, -307, 97, 88, -313, 88, -496, 167, 45, 46,
	97, 97, 97, 97, 41, 88, -246, 41, 288, 292,
	289, 290, 291, 88, 97, 41, 97, 41, 97, 41,
	-311, 82, -497, -498, 88, -529, -307, 353, -389, 123,
	-329, -534, 318, -146, 92, 32, -183, 234, 231, -523,
	-380, -379, -292, -166, -166, -166, -166, 68, 68, 68,
	73, 68, 73, 68, -283, -380, -168, -179, -313, 83,
	-543, -542, -541, -539, 76, 242, 77, -343, 476, 480,
	481, -376, -325, 88, -383, -187, 24, -211, -211, -447,
	298, 299, 83, 155, -217, -277, 19, 154, -277, 116,
	-6, -127, -129, -337, -6, -337, 602, 365, 603, 88,
	97, 97, -477, 440, 435, 437, 108, -346, -464, -463,
	61, -154, -177, -456, -500, -462, -311, 61, -154, -456,
	-187, -469, -171, -170, 44, -311, 97, 17, -373, -368,
	142, 142, -311, 376, -384, 88, 398, 88, 237, 623,
	88, -298, -332, -337, 83, -225, 176, 175, -225, 35,
	83, 83, -433, -433, -432, -435, -432, -225, -225, 83,
	83, 24, 83, 83, 83, -337, 83, 83, 155, -452,
	496, -453, 568, -405, -405, -405, -405, -405, -405, -405,
	-405, -405, -405, -405, -405, -405, -405, -348, -347, 260,
	441, 615, 615, 441, 615, 615, 83, 155, -503, 155,
	-297, 88, 88, 88, -201, -217, 83, 35, -204, -205,
	-206, -214, -207, -209, 35, -530, 92, -524, 88, -311,
	-531, 92, 400, 153, 351, 41, 401, 402, 417, 346,
	97, 97, 407, -525, -311, -153, -533, 52, 123, 88,
	-211, -354, -301, 150, 279, 326, -272, -271, -311, 88,
	-204, -204, -204, -154, -427, 325, 21, 97, 141, -180,
	80, 154, -162, -212, -311, 142, 83, -275, -275, -275,
	-322, -427, -154, -414, 309, 82, -412, 82, -412, 108,
	334, -419, -417, 260, -263, 45, 47, -217, -492, -311,
	-490, -492, -311, -490, -490, -357, -337, -263, -214, 241,
	31, 231, -266, 331, 332, 337, -385, 304, 113, -385,
	155, -169, 155, -311, -234, -234, 31, 88, 88, -213,
	83, 155, 123, -530, -524, 123, -390, 88, -531, -535,
	123, 88, 155, -183, -183, -275, 155, 123, -185, -184,
	79, 80, -186, 79, -184, 68, 68, -275, -541, -540,
	24, -495, -495, -495, 83, 83, 15, -191, 41, -276,
	20, 21, 142, -276, 120, 118, 120, 120, -311, 83,
	83, -439, 594, -473, -475, 435, 21, 21, 15, 242,
	83, -456, -456, -477, 45, 46, -368, -384, 420, -211,
	155, 623, -215, -337, 83, -337, 83, 88, 83, 88,
	-174, 21, 83, 83, 83, 83, 83, 83, -337, 83,
	-503, 235, -154, 83, 155, -154, 88, -528, 411, 88,
	88, 97, 41, 97, 153, 403, -449, -146, -532, 92,
	123, 622, 82, -307, -307, -307, -311, 83, 155, -307,
	-307, 83, 83, 83, -232, 537, -428, 259, 97, 141,
	97, 141, 97, -309, -162, -311, -275, -522, 154, -275,
	-428, -404, 310, 97, -333, 82, -333, 82, -413, 307,
	82, 83, 155, -311, -292, -229, -228, -226, 102, 113,
	41, 389, -227, 92, 150, 293, 296, 295, 271, 294,
	-255, -326, 79, 395, 331, 332, -358, 594, 525, 244,
	107, 108, 377, -327, 82, 82, 80, 313, 82, 82,
	-492, 83, -263, -292, 41, -266, 41, 343, 304, -264,
	-311, 150, -234, 83, -498, 88, -528, 88, -392, -533,
	88, -523, -174, -379, -462, -337, 82, -337, 82, 68,
	11, 19, -330, 152, -337, -345, 243, -6, 603, 365,
	-248, 595, 88, 21, 88, -471, 88, -380, -439, -122,
	-467, -412, 276, 83, 83, 83, -405, -405, -408, -407,
	-411, 441, 305, 449, -345, 83, 83, -193, -217, -150,
	537, -232, -206, -150, 21, 537, 350, 41, 97, 41,
	404, 123, 103, 104, -299, -300, 88, -363, -365, -292,
	82, -234, -236, -310, 151, 88, -271, -330, -330, -230,
	-231, -269, -358, -121, -120, -230, 82, -429, 159, 97,
	141, 97, 97, -275, -275, -429, -418, 21, 83, -399,
	83, -399, 82, 123, -333, -417, -420, 61, -226, 102,
	-333, 88, -236, -237, 41, 292, 288, 123, 123, -238,
	41, 272, 273, -247, 82, 303, 15, 192, 82, 108,
	108, -211, -363, -363, -493, 333, 334, 335, 338, 337,
	336, -493, -363, -363, 82, -386, -385, -333, -307, -307,
	150, -532, -175, -178, -491, -311, 244, 21, 21, -311,
	-311, -295, 596, 97, 88, 437, -248, -440, 597, -476,
	440, -470, -468, 435, 436, 437, 438, 123, 83, -410,
	115, 403, 407, -331, -334, 97, 100, 184, 153, 536,
	-151, 60, 483, 88, 398, 88, 350, 88, 623, 155,
	123, 83, 155, -432, -337, -400, 260, 155, -269, -301,
	-122, -400, -233, -270, -311, 88, -446, 167, 324, 537,
	97, 141, 97, -174, -430, 167, 324, -403, 83, 83,
	83, -399, 97, 83, -424, -421, 82, -269, 262, 133,
	88, 88, 97, 82, -457, 31, 88, -364, 82, 83,
	83, 83, 83, -363, 97, -234, -307, 83, 83, 155,
	82, 21, -295, 88, -478, 242, -474, -475, 439, -468,
	21, 437, 21, 21, 88, -409, -410, 407, -331, -334,
	592, 447, 447, 447, -195, -311, 303, 420, -300, 88,
	-366, -365, -169, 83, -401, 312, 21, -269, -307, -401,
	83, 155, -307, -307, 324, 97, 141, 97, -175, 324,
	-415, 311, 83, -424, -269, -423, -422, 310, 263, 82,
	83, -337, -349, -307, 83, -250, -249, 533, -363, -366,
	80, -366, 80, -366, 80, -366, 80, 83, -234, -311,
	244, -296, -311, -471, -485, 82, 97, -473, -472, -474,
	21, -471, 21, -471, -471, -123, 155, 112, 448, 448,
	448, -194, 35, 442, 376, -367, 250, 343, 344, 92,
	537, 331, 332, -169, 21, -402, -234, -270, -330, -330,
	97, 97, 83, 155, -311, 259, 82, -344, -338, -337,
	259, 83, -311, -254, -252, -253, 79, 454, 301, 302,
	83, -493, -493, -493, -493, -255, 83, 155, -489, 31,
	83, -484, -483, -293, -479, -311, 440, 441, 88, -471,
	444, -409, 88, -307, -307, 88, 88, 330, -292, 82,
	-414, -422, -421, -344, 83, 155, -385, -253, 79, -252,
	79, 16, 15, -366, -366, -366, -366, -311, -488, -487,
	-486, 83, 155, 154, 123, -561, -560, 614, 97, 97,
	-311, -399, -404, 83, -338, -251, 298, 299, 31, 167,
	-251, 155, 123, -483, -311, 88, 88, 83, -418, 102,
	41, 300, -487, 41, -337, 154, -311,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 0,
	263, 264, 265, 852, 853, 854, 855, 856, 857, 0,
	0, 0, 0, 611, 612, 0, 578, 0, 0, 0,
	0, 0, 0, 469, 470, 471, 472, 473, 474, 475,
	476, 477, 478, 479, 480, 481, 482, 483, 484, 485,
	486, 487, 488, 489, 490, 491, 492, 493, 494, 495,
	496, 497, 498, 354, 355, 356, 357, 358, 359, 360,
	361, 0, 288, 284, 209, 210, 211, 212, 213, 295,
	296, 446, 0, 0, 0, 0, 693, -2, 56, 0,
	277, 0, 268, 268, 858, 859, 860, 861, 862, 863,
	864, 865, 866, 867, 868, 869, 870, -2, 624, 0,
	579, 580, 581, 582, 583, 584, 585, 586, 587, 588,
	589, 590, 591, 592, 343, 344, 345, 339, 340, 342,
	341, -2, 0, 624, 0, 0, 0, 701, 0, 0,
	0, 0, 0, 744, 766, 23, 0, 7, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 0, 0,
	19, 0, 19, 0, 0, 0, 1243, 1244, 1245, 1246,
	2013, 1983, -2, 1758, 1735, 1909, 2042, 2043, 2044, 2045,
	2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055,
	2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065,
	2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075,
	2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085,
	2086, 2087, 2088, 1692, 1693, 1694, 1695, 1696, 1697, 1698,
	1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708,
	1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718,
	1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728,
	1729, 1730, 1731, 1732, 1733, 1734, 1736, 1737, 1738, 1739,
	1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749,
	1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757, 1759, 1760,
	1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770,
	1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780,
	1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790,
	1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800,
	1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810,
	1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820,
	1821, 1822, 1823, 1825, 1826, 1827, 1828, 1829, 1830, 1831,
	1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841,
	1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851,
	1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861,
	1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871,
	1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880, 1881,
	1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891,
	1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901,
	1902, 1903, 1904, 1905, 1906, 1907, 1908, 1910, 1911, 1912,
	1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922,
	1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932,
	1933, 1934, 1935, 1936, 1937, 1938, 1939, -2, 1941, 1942,
	1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952,
	1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962,
	1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972,
	1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982,
	1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993,
	1994, 1995, 1996, 1997, 1998, -2, -2, -2, 2002, 2003,
	2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2014,
	2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024,
	2025, 2026, 2027, 2028, 2029, 2030, 2031, 0, 261, 259,
	1705, 1735, 1758, 1812, 1823, 1824, 1858, 1909, 1940, 1983,
	1999, 2000, 2001, 2013, 0, 875, 0, 671, 0, 676,
	1196, 671, 289, 613, 614, 701, 727, 576, 0, 325,
	0, 1749, 329, 1990, 0, 0, 573, 319, 320, 321,
	322, 323, 324, 0, 0, 851, 0, 0, 315, 0,
	283, 1814, 2012, 0, 0, 0, 0, 0, 153, 985,
	155, 987, 159, 166, 0, 0, 171, 172, 175, 176,
	177, 178, 179, 0, 183, 0, 185, 188, 0, 190,
	191, 0, 194, 195, 196, 0, 206, 207, 208, 988,
	989, 990, -2, 84, 873, 1663, 1550, 0, 1557, 1570,
	1581, 1323, 1324, 1325, 1326, 0, 0, 0, 0, 0,
	1333, 1334, 0, 1359, 2046, 2087, 2088, 0, 1342, 1343,
	1344, 1345, 1346, 1347, 93, 105, 106, 1603, 1604, 1605,
	1606, 1607, 1608, 1609, 1919, 1611, 1612, 1613, 1521, 1310,
	1243, 0, 2055, 0, 2077, 2082, 2083, 2084, 2085, 2076,
	0, 0, 1506, 0, 1496, 0, 0, -2, -2, 0,
	0, 1883, -2, 2052, 2073, 2081, 2056, 2057, 2080, 2048,
	2049, 2050, 2043, 2044, 2045, 2047, 2059, 2061, 2072, 0,
	2068, 2078, 2079, 1988, 0, 0, 0, 2029, 107, 108,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 1517, -2, -2,
	1520, -2, 1523, -2, -2, -2, -2, 1528, 1529, -2,
	1531, -2, -2, -2, -2, -2, -2, -2, 1508, 1509,
	1510, 1511, 1500, 1501, 1502, 1503, 1504, 1505, -2, -2,
	-2, 727, 802, 0, 727, 0, 702, 749, 752, 755,
	758, 705, 0, 0, 57, 58, 0, 278, 279, 267,
	269, 0, 273, 0, 266, 0, 0, 0, 0, 1020,
	1020, 1020, 1020, 1020, 0, 1020, 0, 0, 0, 0,
	0, 1020, 0, 908, 992, 993, 994, 1018, 1019, 1084,
	0, 0, 0, 629, 625, 626, 627, 628, 715, 0,
	717, 720, 553, 553, 501, 0, 0, 0, 553, 0,
	515, 507, 0, 0, 0, 553, 0, 0, 722, 722,
	0, 556, 563, 553, 553, -2, 553, 553, 553, 0,
	0, 1032, 521, 522, 523, 507, 507, 526, 527, 528,
	538, 539, 564, 1687, 0, 0, 446, 446, 0, 446,
	0, 446, 446, 446, 631, 1853, 1756, 1829, 1814, 2012,
	0, 234, 1883, 239, 0, 1757, 1776, 0, 0, 1794,
	0, -2, 0, 305, 727, 0, 0, 701, 0, 0,
	0, 0, 0, 446, 446, 446, 446, 446, 1083, 446,
	446, 446, 446, 446, 0, 0, 0, 446, 446, 0,
	0, 767, 768, 763, 764, 765, 769, 770, 5, 6,
	19, 0, 0, 0, 0, 0, 0, 63, 62, 0,
	1664, 1682, 1616, 1617, 1618, 1669, 1620, 1673, 1673, 1673,
	1673, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657,
	1673, 1673, 0, 0, 1662, 1640, 1671, 1671, 1671, 1669,
	1666, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629,
	1630, 1631, 1632, 1633, 1634, 1676, 1676, 1679, 1679, 1676,
	0, 1546, 0, 0, 0, 0, 675, 0, 0, 727,
	-2, 0, 0, 577, 326, 1247, 0, 0, 330, 331,
	0, 0, 346, 0, 349, 334, 335, 336, 0, 133,
	0, 317, 318, 0, 0, 285, 0, 0, 0, 447,
	0, 0, 0, 0, 0, 0, 163, 160, 167, 170,
	180, 187, 0, 199, 201, 204, 161, 168, 173, 174,
	181, 202, 162, 164, 165, 169, 203, 205, 182, 186,
	200, 184, 189, 192, 193, 198, 0, 134, 0, 0,
	0, 0, 0, 1556, 0, 0, 1589, 1590, 1591, 1592,
	1593, 1594, 1595, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, -2, 1550, 0, 0, 1329, 1330, 1331, 1332, 1335,
	0, 1360, 0, 0, 0, 0, 0, 1610, 1614, 0,
	1546, 1546, 0, 1546, 1542, 0, 0, 0, 0, 0,
	0, 1546, 1482, 0, 0, 1484, 1497, 0, 0, 1486,
	1487, 0, 1490, 1491, 1546, 0, 1546, 1495, 1478, 1479,
	0, 1542, 1542, 1542, 1542, 0, 0, 1542, 1542, 1542,
	1542, 1542, 1542, 1542, 1542, 1542, 1542, 1542, 1542, 0,
	0, 0, 0, 722, 0, 728, 0, -2, 0, 746,
	748, 750, 751, 753, 754, 756, 757, 759, 760, 707,
	0, 0, 59, 0, 0, 0, 0, 271, 0, 276,
	0, 872, 0, 0, 1020, 1020, 1020, 909, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1020, 1020, 1020,
	1020, 0, 1038, 0, 0, 0, 631, 630, 0, 716,
	0, 0, 775, 0, 0, 500, 0, 507, 553, 553,
	513, 514, 509, 508, 559, 560, 556, 0, 556, 556,
	775, 0, 532, 533, 534, 553, 553, 540, 723, 0,
	541, 542, 556, 0, 561, 562, 775, 0, 0, 775,
	775, 0, 550, 551, 552, 0, 0, 1020, 0, 569,
	509, 509, 1688, 1689, 0, 0, 1029, 0, 0, 0,
	572, 0, 0, 0, 0, 632, 214, 217, 0, 220,
	0, 1853, 0, 1853, 0, 227, 0, 0, 0, 0,
	0, 0, 257, 258, 0, 0, 0, 0, 248, 251,
	1190, 1191, 982, 983, 252, 253, 297, 298, 0, 722,
	745, 747, 741, 742, 743, 0, 0, 0, 0, 0,
	0, 0, 0, 446, 0, 0, 0, 0, 0, 607,
	0, 888, 609, 0, 0, 0, 783, 777, 779, 846,
	93, 783, 8, 80, 77, 0, 19, 0, 0, 19,
	19, 0, 19, 262, 0, 1685, 1683, 1684, 1619, 1670,
	0, 1645, 0, 1646, 1647, 1648, 1658, 1659, 0, 0,
	1641, 0, 1642, 1643, 1644, 1635, 0, 1636, 1637, 0,
	1638, 1639, 260, 0, 1547, 876, 0, 649, 663, 644,
	0, 652, 0, 1197, 633, 663, 635, 0, 652, 722,
	699, 0, 677, 0, 0, 327, 0, 332, 0, 0,
	348, 350, 351, 352, 337, 338, 574, 313, 314, 306,
	307, 308, 309, 310, 311, 312, 316, 103, 0, 286,
	287, 0, 0, 0, 147, 148, 149, 150, 151, 152,
	154, 138, 596, 598, 974, 986, 0, 977, 0, 157,
	197, 130, 0, 0, 0, 1551, 1552, 1553, 1554, 1555,
	1560, 0, 1562, 1564, 1566, 1568, 0, 1586, -2, -2,
	1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320,
	1321, 1322, 1571, 1584, 1585, 0, 0, 0, 0, 0,
	0, 1582, 1582, 1577, 0, 1327, 0, 1357, 1361, 0,
	0, 0, 0, 0, 94, 1541, 1449, 1450, 1451, 1452,
	1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462,
	1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472,
	1473, 1474, 1475, 1476, 1477, 0, 0, 1550, 0, 0,
	0, 1543, 1544, 0, 0, 0, 1437, 0, 0, 1443,
	1444, 1445, 0, 658, 0, 1507, 1483, 1498, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	801, 803, 0, 667, 669, 670, 696, 677, 703, 0,
	0, 0, 55, 60, 53, 1053, 280, 281, 0, 0,
	275, 0, -2, 0, 0, 0, 0, 0, 923, 0,
	444, 968, 0, 0, 0, 984, 1009, 1016, 0, 0,
	0, 0, 0, 1057, 910, 915, 916, 917, 911, 912,
	918, 919, 0, 718, 0, 0, 815, 499, 0, 554,
	555, 504, 1814, 509, 775, 775, 516, 510, 517, 558,
	518, 519, 520, 556, 775, 775, 724, 553, 556, 543,
	557, 556, 546, 547, 0, 565, 570, 566, 0, 568,
	524, 525, 1059, 720, 364, 365, 366, 368, 0, 416,
	416, 416, 399, 416, 0, 0, 387, 1690, 0, 0,
	0, 0, 396, 1690, 0, 0, 1690, 1690, 1690, 1690,
	1690, 1690, 1690, 0, 0, 1690, 1690, 1690, 1690, 1690,
	1690, 1690, 1690, 1690, 1690, 1690, 0, 1690, 1690, 1690,
	1690, 1690, 1176, 1690, 0, 1030, 406, 407, 408, 409,
	414, 415, 0, 441, 0, 0, 0, 444, 0, 957,
	788, 0, 789, 790, 786, 817, 841, 841, 0, 841,
	821, 1196, 0, 0, 225, 226, 215, 0, 216, 0,
	228, 229, 0, 231, 232, 233, 240, 1756, 1829, 235,
	237, 0, 0, 241, 254, 255, 256, 0, 0, 246,
	247, 0, 0, 300, 301, 303, 0, 677, 1033, 1034,
	1035, 593, 1194, 594, 595, 599, 0, 0, 602, 603,
	604, 605, 606, 890, 0, 0, 962, 963, 775, 0,
	784, 0, 780, 847, 0, 849, 0, 775, 0, 78,
	19, 0, 71, 68, 0, 0, 0, 0, 0, 1665,
	1615, 1686, 0, 0, 0, 1667, 0, 0, 0, 0,
	61, 679, 640, 0, 643, 660, 0, 664, 0, 0,
	656, 648, 653, 0, 0, 673, 634, 0, 0, 639,
	677, 0, 700, 729, 730, 733, 1248, 0, 333, 347,
	0, 0, 0, 0, 141, 971, 0, 142, 146, 136,
	0, 0, 0, 976, 0, 973, 978, 0, 156, 0,
	0, 131, 132, 1044, 1053, 0, 0, 0, 1561, 1563,
	1565, 1567, 1569, 0, 1572, 1582, 1582, 1578, 0, 1573,
	0, 1575, 0, 1551, 0, 1362, 0, 0, 0, 0,
	0, 0, 0, 0, 1427, 1428, 0, 0, 1432, 0,
	1434, 1435, 1436, 1438, 0, 0, 0, 1442, 0, 1481,
	1499, 1485, 1488, 0, 1492, 0, 1494, 0, 727, 727,
	0, 0, 1401, 1401, 1401, 0, 0, 0, 0, 1401,
	0, 0, 0, 0, 0, 0, 0, 0, 1348, 0,
	1349, 1350, 0, 0, 0, 804, 697, 0, 0, 0,
	0, 1051, 0, 282, 270, 272, 0, 0, 0, 878,
	879, 881, 0, 884, 885, 886, 890, 720, 0, 720,
	930, 1690, 1021, 448, 0, 0, 970, 0, 946, 0,
	0, 0, -2, 0, 0, 0, 0, 0, 0, 1061,
	0, 0, 0, 618, 622, 23, 721, 0, 776, 502,
	0, 503, 553, 511, 512, 775, 535, 536, 0, 0,
	775, 553, 553, 556, 0, 567, 1061, 0, 0, 1029,
	1127, 1095, 377, 0, 1205, 1206, 417, 0, 1212, 1221,
	1020, 1280, 0, 1221, 0, 0, 1223, 1224, 0, 0,
	0, 0, 400, 401, 0, 386, 0, 0, 0, 0,
	0, 0, 385, 0, 0, 427, 0, 0, 0, 0,
	1691, 1690, 1690, 0, 394, 395, 0, 398, 0, 0,
	0, 0, 0, 0, 0, 0, 1690, 1690, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1167,
	0, 0, 0, 0, 0, 0, 0, 1182, 1183, 930,
	1690, 0, 0, 0, 448, 944, 953, 0, 0, 0,
	0, 0, 0, 808, 0, 0, 807, 0, 0, 0,
	0, 0, 720, 842, 0, 844, 845, 819, -2, 0,
	788, 824, 1546, 218, 219, 0, 0, 224, 242, 244,
	0, 0, 0, 243, 245, 249, 250, 299, 302, 304,
	739, 0, 0, 1085, 0, 891, 892, 894, 895, 0,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 1740, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 889, 610, 773, 778, 785,
	848, 850, 94, 781, 773, 0, 81, 19, 80, 72,
	73, 0, 19, 0, 0, 0, 0, 1675, 1674, 1660,
	0, 1661, 1672, 1677, 0, 1680, 0, 683, 0, 0,
	663, 665, 0, 0, 663, 0, 0, 672, 0, 0,
	663, 739, 679, 0, 736, 734, 735, 0, 0, 575,
	104, 353, 0, 0, 0, 0, 0, 597, 0, 975,
	138, 0, 0, 158, 0, 0, 0, 1053, 1048, 1545,
	1574, 1576, 0, 1583, 1579, 1328, 1336, 1358, 0, 0,
	1364, 1376, 1376, 0, 0, 0, 1367, 1673, 1673, 1370,
	1669, 1671, 1669, 1376, 1376, 0, 95, 0, 0, 1433,
	0, 0, 0, 659, 0, 0, 0, 1397, 1399, 1401,
	1401, 1408, 1402, 1409, 1410, 1401, 1401, 1401, 1401, 1415,
	1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1395, 0,
	0, 1604, 1605, 668, 0, 0, 710, 711, 712, 713,
	714, 0, 0, 54, 1053, 0, 274, 0, 0, 883,
	0, 0, 0, 1198, 0, 934, 931, 932, 933, 0,
	965, 449, 450, 451, 452, 0, 0, 0, 969, 0,
	957, 939, 0, 0, 0, 1010, 1011, 1012, 1013, 1014,
	1015, -2, 1024, 0, 0, 0, 1198, 1198, 1198, 0,
	1069, 0, 1058, 671, 0, -2, 0, 0, 620, 0,
	0, 816, 505, 775, 529, 725, 726, 544, 775, 775,
	553, 571, 1069, 1060, 0, 367, 416, 0, 1115, 0,
	0, 1121, 0, 1128, 370, 0, 418, 0, 1211, 1237,
	1222, 1237, 1281, 1237, 1237, 1020, 0, 418, 0, 0,
	388, 424, 0, 0, 0, 0, 0, 384, 421, 733,
	371, 373, 374, 375, 425, 426, 428, 0, 430, 390,
	402, 403, 404, 405, 0, 0, 0, 397, 410, 411,
	412, 413, 372, 1144, 1145, 1146, 1149, 1150, 1151, 1152,
	0, 0, 1155, 1156, 1157, 1158, 1159, 1234, 1235, 1236,
	1160, 1161, 1162, 1163, 1164, 1165, 1166, 1184, 1185, 1186,
	1187, 1188, 1189, 1168, 1169, 1170, 1171, 1172, 1173, 1174,
	1175, 0, 0, 1179, 0, 934, 0, 0, 0, 0,
	965, 946, 0, 956, 0, 958, 959, 0, 0, 641,
	775, 292, 0, 811, 805, 0, 794, 809, 810, 797,
	0, 799, 0, 795, 796, 775, 787, 818, 843, 820,
	823, 825, 826, 832, 0, 0, 0, 0, 221, 222,
	223, 230, 0, 468, 236, 695, 0, 1195, 600, 601,
	1086, 1087, 608, 0, 896, 771, 0, 0, 771, 76,
	79, 0, 74, 0, 0, 0, 0, 66, 64, 1668,
	0, 0, 685, 118, 0, 0, 0, 661, 0, 666,
	663, 647, 657, 646, 654, 655, 674, 663, 638, 637,
	698, 683, 731, 732, 0, 1249, 328, 0, 972, 138,
	143, 144, 145, 139, 137, 979, 0, 981, 0, 1046,
	0, 0, 1580, 1363, 1337, 1365, 1377, 1378, 1366, 0,
	1339, 1340, 1368, 1369, 1371, 1372, 1373, 1374, 1375, 1341,
	1429, 0, 1431, 1439, 1440, 0, 1489, 1493, 0, 0,
	0, 0, 0, 1406, 1407, 1411, 1412, 1413, 1414, 1416,
	1417, 1418, 1419, 1420, 1421, 1422, 1423, 727, 1396, 0,
	0, 0, 0, 0, 0, 0, 708, 0, 0, 0,
	1052, 1054, 871, 874, 880, 882, 0, 0, 0, 1199,
	1200, 1202, 1203, 1204, 0, 907, 0, 0, 925, 926,
	936, 0, 0, 0, 454, 455, 0, 0, 0, 467,
	463, 464, 465, 445, 964, 953, 942, 0, 0, 952,
	0, 1025, 1690, 1690, 1690, 0, 0, 1129, 1690, 1690,
	0, 0, 0, 1133, 1072, 0, 0, 1063, 0, 841,
	0, 0, 775, 619, 622, 623, 719, 506, 548, 545,
	775, 1072, 363, 1093, 0, 0, 0, 0, 0, 1125,
	0, 0, 1097, 0, 389, 419, 0, -2, 0, 1238,
	0, 1225, 1238, 0, 0, 1237, 0, 378, 418, 0,
	0, 0, 431, 435, 436, 0, 433, 1276, 0, 434,
	0, 423, 0, 429, 1147, 1148, 0, 1153, 1154, 0,
	1178, 0, 0, 437, 0, 0, 0, 438, 443, 939,
	0, 954, 0, 960, 961, 727, 0, 0, 791, 812,
	0, 0, 792, 0, 793, 798, 800, 291, 827, 0,
	0, 829, 830, 831, 822, 238, 740, 893, 0, 761,
	0, 0, 782, 762, 0, 19, 0, 0, 69, 1678,
	1681, 687, 0, 684, 119, 0, 0, 0, 0, 651,
	662, 645, 636, 685, 737, 738, 140, 135, 980, 121,
	0, 1047, 0, 0, 1441, 0, 1401, 1398, 1401, 1400,
	1392, 0, 1351, 1352, 1353, 1354, 1355, 1356, 0, 706,
	0, 0, 913, 1133, 0, 913, 935, 924, 0, 966,
	967, 0, 456, 457, 0, 460, 466, 937, 938, 0,
	0, 950, 0, 0, 0, 0, 1017, 1031, 0, 0,
	0, -2, 0, -2, 1042, 0, 1078, 0, 1070, 0,
	1062, 0, 1065, 775, 775, -2, 616, 621, 0, 549,
	1078, 1095, 0, 1116, 0, 0, 0, 0, 0, 0,
	0, 1096, 0, 1109, 420, 1239, -2, 1252, 1254, 0,
	1030, 1257, 1258, 0, 0, 0, 0, 0, 0, 1302,
	1266, 0, 0, 1270, 1271, 1272, 0, 0, 1275, 0,
	1598, 1599, 0, 1279, 0, 0, 0, 0, 0, 0,
	0, 1219, 379, 380, 0, 382, 383, 1690, 1277, 422,
	376, 1690, 392, 1177, 1180, 1181, 442, 439, 440, 942,
	945, 642, 722, 293, 294, 813, 0, 806, 836, 833,
	0, 0, 897, 0, 772, 774, 70, 75, 0, 0,
	689, 0, 686, 0, 680, 682, 129, 650, 687, 91,
	112, 0, 0, 1338, 1430, 1480, 1404, 1405, 0, 1393,
	0, 1387, 1388, 1389, 1394, 709, 704, 0, 899, 906,
	920, 1036, 1201, 905, 0, 0, 453, 458, 0, 461,
	462, 0, 940, 941, 0, 948, 0, 0, 1005, 1669,
	0, 1026, 1027, 1192, 1193, 1028, 1130, 1131, 1132, 1088,
	-2, 1141, 0, 1040, 121, 1088, 0, 1066, 0, 1073,
	0, 1071, 1064, 727, 617, 1075, 369, 1127, 1117, 0,
	1119, 0, 0, 0, 0, 1098, -2, 0, 1253, 1255,
	1256, 1259, 1260, 1261, 1307, 1308, 1309, 0, 0, 1264,
	1304, 1305, 1306, 1265, 0, 0, 0, 0, 0, 1596,
	1597, 1300, 0, 0, 1226, 1228, 1229, 1230, 1231, 1232,
	1233, 1227, 0, 0, 0, 1218, 1220, 381, 0, 0,
	1690, 955, 290, 0, 0, 837, 839, 834, 835, 65,
	67, 82, 0, 688, 120, 0, 689, 83, 0, 109,
	0, 122, 123, 0, 0, 0, 0, 0, 1403, 1390,
	0, 0, 0, 0, 0, 1600, 1601, 1602, 0, 0,
	0, 921, 922, 927, 0, 929, 459, 943, 947, 950,
	0, 996, 0, 733, 0, 1090, 0, 1029, 1143, 1690,
	1043, 1090, 0, 1135, 1690, 1690, 1056, 0, 1068, 0,
	1080, 0, 1074, 722, 362, 0, 1077, 1113, 1118, 1120,
	1122, 0, 1126, 1124, 1099, -2, 0, 1107, 0, 0,
	1262, 1263, 0, 0, 1496, 1690, 0, 1295, 0, 996,
	996, 996, 996, 0, 432, 391, 0, 814, 828, 0,
	0, 0, 678, 92, 96, 0, 118, 115, 0, 124,
	0, 0, 0, 0, 1049, 0, 1379, 0, 0, 0,
	1383, 1384, 1385, 1386, 0, 898, 0, 928, 949, 951,
	995, 1006, 1007, 733, 1039, 0, 1127, 1142, 0, 1041,
	1134, 0, 0, 0, 1067, 1079, 0, 1082, 615, 1076,
	1094, 0, 1123, 1100, 1108, 0, 1103, 0, 0, 0,
	1303, 0, 1269, 0, 1274, 1283, 1296, 0, 0, 1207,
	0, 1209, 0, 1213, 0, 1215, 0, 0, 393, 838,
	840, 0, 691, 681, 85, 0, 0, 113, 114, 116,
	0, 125, 0, 127, 128, 1045, 0, 0, 1380, 1381,
	1382, 0, 900, 901, 914, 997, 1690, 1690, 0, 0,
	0, 1003, 1004, 1008, 0, 1115, 1147, 1136, 1137, 1138,
	1081, 1114, 1102, 0, -2, 1110, 0, 0, 1548, 1558,
	1559, 1267, 1273, 1282, 1284, 1285, 0, 1297, 1298, 1299,
	1301, 996, 996, 996, 996, 1217, 690, 0, 1055, 0,
	97, 0, 99, 101, 102, 1240, 110, 111, 117, 126,
	0, 1391, 902, 0, 0, 1000, 1001, 0, 1091, 0,
	1093, 1104, -2, 0, 1112, 0, 1268, 1286, 0, 1287,
	0, 0, 0, 1208, 1210, 1214, 1216, 692, 86, 87,
	0, 98, 0, 0, 0, 887, 903, 0, 998, 999,
	1002, 0, 1095, 1111, 1549, 1288, 1290, 1291, 0, 0,
	1289, 0, 0, 100, 1241, 1050, 904, 1092, 1089, 1292,
	1294, 1293, 88, 89, 90, 0, 1242,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 114, 3, 3, 3, 145, 137, 3,
	82, 83, 142, 140, 155, 141, 154, 143, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 624, 621,
	124, 123, 125, 3, 625, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 147, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 622, 136, 623, 148,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	84, 85, 86, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	115, 116, 117, 118, 119, 120, 121, 122, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 138, 139,
	144, 146, 149, 150, 151, 152, 153, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:796
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:803
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:809
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:817
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:823
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:827
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:842
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:846
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:852
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:857
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:861
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:893
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:901
		{
			yyLOCAL = &tree.BackupStart{
				Timestamp: yyDollar[2].str,
				IsS3:      false,
				Dir:       yyDollar[4].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 54:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:909
		{
			yyLOCAL = &tree.BackupStart{
				Timestamp: yyDollar[2].str,
				IsS3:      true,
				Option:    yyDollar[5].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:919
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				return 1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 56:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:939
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:945
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:952
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:960
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:966
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:975
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:985
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().ToLower()),
			}
		}
		yyVAL.union = yyLOCAL
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:993
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().ToLower()),
			}
		}
		yyVAL.union = yyLOCAL
	case 64:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1001
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 65:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1009
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1019
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1027
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1037
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1044
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1053
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1063
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1067
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1073
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1077
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1083
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1092
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1102
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1106
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1112
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1121
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1125
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1131
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1152
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1165
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1172
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1176
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1182
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1186
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1192
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1199
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1207
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1211
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1225
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1229
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1233
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1238
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1242
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1246
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1252
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1261
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1272
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1276
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1282
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1286
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1292
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1296
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1302
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1326
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            return 1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1345
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1349
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1353
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1358
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1362
		{
			yyLOCAL = &tree.Lines{
				StartingBy:   yyDollar[2].str,
				TerminatedBy: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1369
		{
			yyLOCAL = &tree.Lines{
				StartingBy:   yyDollar[3].str,
				TerminatedBy: yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1377
		{
			yyVAL.str = ""
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1384
		{
			yyVAL.str = yyDollar[3].str
		}
	case 118:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1389
		{
			yyVAL.str = "\n"
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1396
		{
			yyVAL.str = yyDollar[3].str
		}
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1401
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1405
		{
			res := &tree.Fields{
				Terminated: "\t",
				EscapedBy:  0,
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != "" {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != 0 {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != 0 {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1429
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1433
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1439
		{
			yyLOCAL = &tree.Fields{
				Terminated: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1445
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1463
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1480
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1503
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1507
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1511
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1516
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1520
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1526
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1539
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1550
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1563
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1567
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1577
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1590
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1603
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1609
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1615
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: yyDollar[1].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1622
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  yyDollar[1].cstrUnion().Compare(),
				TabName: yyDollar[3].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1630
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: yyDollar[1].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1639
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1643
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1647
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1651
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1655
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1659
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1666
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1670
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1676
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1683
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1692
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1696
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1702
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1706
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1710
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1714
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1718
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1722
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1726
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1730
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1734
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1738
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1742
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1746
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1750
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1754
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1758
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1762
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1766
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1770
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1774
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1778
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1782
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1786
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1790
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1794
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1798
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1802
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1806
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1810
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1814
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1818
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1822
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1826
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1830
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1834
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1838
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1842
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1846
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1850
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1854
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1858
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1862
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1866
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1870
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1874
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1878
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1882
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1886
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1890
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1894
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1898
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1911
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1918
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1925
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:1935
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:1939
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:1945
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:1952
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:1960
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:1964
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:1968
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:1972
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:1978
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:1982
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1988
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1995
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2002
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2011
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2041
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2045
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2049
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2055
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2061
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2065
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2072
		{
			yyVAL.str = yyDollar[3].str
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2078
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2082
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2088
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2096
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2105
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2114
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2122
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2130
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2153
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2176
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2183
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2190
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2198
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2205
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2212
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2221
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2225
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2229
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2235
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2239
		{
			yyVAL.str = yyDollar[1].str
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2245
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2249
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2255
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2259
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2270
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2276
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 268:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2281
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2285
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2289
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2293
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2297
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2301
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2305
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2309
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2313
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2319
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2323
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2327
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2331
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2336
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2341
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2347
		{
			yyLOCAL = &tree.Use{
				SecondaryRole: false,
				Name:          yyDollar[2].cstrUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2354
		{
			yyLOCAL = &tree.Use{
				SecondaryRole: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2360
		{
			yyLOCAL = &tree.Use{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2367
		{
			yyLOCAL = &tree.Use{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2374
		{
			yyLOCAL = &tree.Use{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2384
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2391
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2402
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].joinTableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2413
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2417
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2423
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2433
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2439
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2443
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2449
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2455
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2459
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2463
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2467
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2473
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2485
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 313:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2491
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 314:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2495
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2501
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2505
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2511
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2517
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2528
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2534
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2538
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2542
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2546
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2550
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2554
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2562
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2570
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2580
		{
			if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:2621
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:2625
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:2631
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2637
		{
			yyVAL.str = yyDollar[1].str
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2642
		{
			yyVAL.str = "true"
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2643
		{
			yyVAL.str = "false"
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2644
		{
			yyVAL.str = yyDollar[1].str
		}
	case 353:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2649
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 362:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2666
		{
			yyLOCAL = &tree.AlterSequence{
				IfExists:    yyDollar[3].boolValUnion(),
				Name:        yyDollar[4].tableNameUnion(),
				Type:        yyDollar[5].alterTypeOptionUnion(),
				IncrementBy: yyDollar[6].incrementByOptionUnion(),
				MinValue:    yyDollar[7].minValueOptionUnion(),
				MaxValue:    yyDollar[8].maxValueOptionUnion(),
				StartWith:   yyDollar[9].startWithOptionUnion(),
				Cycle:       yyDollar[10].cycleOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 363:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2681
		{
			yyLOCAL = &tree.AlterView{
				Name:     yyDollar[4].tableNameUnion(),
				ColNames: yyDollar[5].identifierListUnion(),
				AsSource: yyDollar[7].selectUnion(),
				IfExists: yyDollar[3].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 364:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2692
		{
			yyLOCAL = &tree.AlterTable{
				Table:   yyDollar[3].tableNameUnion(),
				Options: yyDollar[4].alterTableOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 365:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2699
		{
			yyLOCAL = &tree.AlterTable{
				Table:            yyDollar[3].tableNameUnion(),
				PartitionOptions: yyDollar[4].alterPartitionOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:2708
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:2712
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2718
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 369:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2722
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			partitionDef := &tree.PartitionOption{
				PartBy:     *yyDollar[3].partitionByUnion(),
				SubPartBy:  yyDollar[5].partitionByUnion(),
				Partitions: yyDollar[6].partitionsUnion(),
			}
			opt := &tree.AlterPartitionRedefinePartitionClause{
				PartitionOption: partitionDef,
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2737
		{
			opt := &tree.AlterPartitionAddPartitionClause{
				Typ:        tree.AlterPartitionAddPartition,
				Partitions: yyDollar[3].partitionsUnion(),
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2745
		{
			opt := &tree.AlterPartitionDropPartitionClause{
				Typ:            tree.AlterPartitionDropPartition,
				PartitionNames: yyDollar[3].PartitionNamesUnion(),
			}
			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2758
		{
			opt := &tree.AlterPartitionTruncatePartitionClause{
				Typ:            tree.AlterPartitionTruncatePartition,
				PartitionNames: yyDollar[3].PartitionNamesUnion(),
			}
			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2773
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2777
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2783
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2787
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2793
		{
			opt := &tree.AlterOptionAdd{
				Def: yyDollar[2].tableDefUnion(),
			}
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2800
		{
			opt := &tree.AlterTableModifyColumnClause{
				Typ:       tree.AlterTableModifyColumn,
				NewColumn: yyDollar[3].columnTableDefUnion(),
				Position:  yyDollar[4].alterColPositionUnion(),
			}
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2809
		{
			opt := &tree.AlterTableChangeColumnClause{
				Typ:           tree.AlterTableChangeColumn,
				OldColumnName: yyDollar[3].unresolvedNameUnion(),
				NewColumn:     yyDollar[4].columnTableDefUnion(),
				Position:      yyDollar[5].alterColPositionUnion(),
			}
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2819
		{
			opt := &tree.AlterTableRenameColumnClause{
				Typ:           tree.AlterTableRenameColumn,
				OldColumnName: yyDollar[3].unresolvedNameUnion(),
				NewColumnName: yyDollar[5].unresolvedNameUnion(),
			}
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2828
		{
			opt := &tree.AlterTableAlterColumnClause{
				Typ:         tree.AlterTableAlterColumn,
				ColumnName:  yyDollar[3].unresolvedNameUnion(),
				DefalutExpr: tree.NewAttributeDefault(yyDollar[6].exprUnion()),
				OptionType:  tree.AlterColumnOptionSetDefault,
			}
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2838
		{
			opt := &tree.AlterTableAlterColumnClause{
				Typ:        tree.AlterTableAlterColumn,
				ColumnName: yyDollar[3].unresolvedNameUnion(),
				Visibility: yyDollar[5].indexVisibilityUnion(),
				OptionType: tree.AlterColumnOptionSetVisibility,
			}
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 383:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2848
		{
			opt := &tree.AlterTableAlterColumnClause{
				Typ:        tree.AlterTableAlterColumn,
				ColumnName: yyDollar[3].unresolvedNameUnion(),
				OptionType: tree.AlterColumnOptionDropDefault,
			}
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2857
		{
			opt := &tree.AlterTableOrderByColumnClause{
				Typ:              tree.AlterTableOrderByColumn,
				AlterOrderByList: yyDollar[3].alterColumnOrderByUnion(),
			}
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2865
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2869
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2873
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2877
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 389:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2881
		{
			yyLOCAL = tree.AlterTableOption(
				&tree.AlterAddCol{
					Column:   yyDollar[3].columnTableDefUnion(),
					Position: yyDollar[4].alterColPositionUnion(),
				},
			)
		}
		yyVAL.union = yyLOCAL
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2890
		{
			yyLOCAL = &tree.AlterOptionAlterCheck{
				Type: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 391:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2896
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2900
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 393:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2904
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2908
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2912
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2916
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2920
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2924
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2929
		{
			yyVAL.str = ""
		}
	case 416:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2960
		{
			yyVAL.str = ""
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2964
		{
			yyVAL.str = string("COLUMN")
		}
	case 418:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:2969
		{
			yyLOCAL = &tree.ColumnPosition{
				Typ: tree.ColumnPositionNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:2975
		{
			yyLOCAL = &tree.ColumnPosition{
				Typ: tree.ColumnPositionFirst,
			}
		}
		yyVAL.union = yyLOCAL
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:2981
		{
			yyLOCAL = &tree.ColumnPosition{
				Typ:            tree.ColumnPositionAfter,
				RelativeColumn: yyDollar[2].unresolvedNameUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:2990
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:2994
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3000
		{
			yyLOCAL = &tree.AlterColumnOrder{Column: yyDollar[1].unresolvedNameUnion(), Direction: yyDollar[2].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3007
		{
			yyLOCAL = &tree.AlterTableName{
				Name: yyDollar[1].unresolvedObjectNameUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3015
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropIndex,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3022
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3029
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropColumn,
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3036
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropColumn,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3043
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3050
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ: tree.AlterTableDropPrimaryKey,
			}
		}
		yyVAL.union = yyLOCAL
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3058
		{
			yyLOCAL = &tree.AlterOptionAlterIndex{
				Visibility: yyDollar[3].indexVisibilityUnion(),
				Name:       tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 432:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3065
		{
			yyLOCAL = &tree.AlterOptionAlterReIndex{
				KeyType:       tree.INDEX_TYPE_IVFFLAT,
				AlgoParamList: int64(yyDollar[6].item.(int64)),
				Name:          tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3073
		{
			yyLOCAL = &tree.AlterOptionAlterCheck{
				Type:    yyDollar[1].str,
				Enforce: yyDollar[3].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3080
		{
			yyLOCAL = &tree.AlterOptionAlterCheck{
				Type:    yyDollar[1].str,
				Enforce: yyDollar[3].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3089
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3093
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 437:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3100
		{
			yyLOCAL = &tree.AlterAccount{
				IfExists:     yyDollar[3].boolValUnion(),
				Name:         yyDollar[4].str,
				AuthOption:   yyDollar[5].alterAccountAuthOptionUnion(),
				StatusOption: yyDollar[6].accountStatusUnion(),
				Comment:      yyDollar[7].accountCommentUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 438:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3112
		{
			yyLOCAL = &tree.AlterDataBaseConfig{
				DbName:         yyDollar[3].str,
				UpdateConfig:   yyDollar[7].str,
				IsAccountLevel: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 439:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3120
		{
			yyLOCAL = &tree.AlterDataBaseConfig{
				AccountName:    yyDollar[4].str,
				UpdateConfig:   yyDollar[8].str,
				IsAccountLevel: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3128
		{
			assignments := []*tree.VarAssignmentExpr{
				&tree.VarAssignmentExpr{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3141
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3147
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].str,
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3158
		{
			yyLOCAL = &tree.AlterUser{
				IfExists:           yyDollar[3].boolValUnion(),
				Users:              yyDollar[4].usersUnion(),
				Role:               yyDollar[5].accountRoleUnion(),
				MiscOpt:            yyDollar[6].userMiscOptionUnion(),
				CommentOrAttribute: yyDollar[7].accountCommentOrAttributeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3169
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3173
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3178
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3182
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3187
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3191
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3207
		{
			yyLOCAL = &tree.UserMiscOptionAccountUnlock{}
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3211
		{
			yyLOCAL = &tree.UserMiscOptionAccountLock{}
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3215
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireNone{}
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3219
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireInterval{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3223
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireNever{}
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3227
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireDefault{}
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3231
		{
			yyLOCAL = &tree.UserMiscOptionPasswordHistoryDefault{}
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3235
		{
			yyLOCAL = &tree.UserMiscOptionPasswordHistoryCount{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3239
		{
			yyLOCAL = &tree.UserMiscOptionPasswordReuseIntervalDefault{}
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3243
		{
			yyLOCAL = &tree.UserMiscOptionPasswordReuseIntervalCount{Value: yyDollar[4].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3247
		{
			yyLOCAL = &tree.UserMiscOptionPasswordRequireCurrentNone{}
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3251
		{
			yyLOCAL = &tree.UserMiscOptionPasswordRequireCurrentDefault{}
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3255
		{
			yyLOCAL = &tree.UserMiscOptionPasswordRequireCurrentOptional{}
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3259
		{
			yyLOCAL = &tree.UserMiscOptionFailedLoginAttempts{Value: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3263
		{
			yyLOCAL = &tree.UserMiscOptionPasswordLockTimeCount{Value: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3267
		{
			yyLOCAL = &tree.UserMiscOptionPasswordLockTimeUnbounded{}
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:3273
		{
			yyVAL.item = nil
		}
	case 467:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3278
		{
			yyVAL.item = nil
		}
	case 499:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3319
		{
			yyLOCAL = &tree.ShowCollation{}
		}
		yyVAL.union = yyLOCAL
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3325
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3333
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 502:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3337
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 503:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3341
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{tree.NewRole(yyDollar[5].cstrUnion().Compare())}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 504:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3350
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3354
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 506:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3360
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 507:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3365
		{
		}
	case 509:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3369
		{
		}
	case 511:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3374
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3384
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3394
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3402
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3408
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3414
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3420
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3426
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3432
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3438
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3447
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3451
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3455
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3459
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3463
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3467
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3471
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3475
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3481
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3490
		{
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3492
		{
		}
	case 535:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3501
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 536:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3511
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 537:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3520
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3524
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3528
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3534
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3540
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3546
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 543:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3552
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 544:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3561
		{
			yyLOCAL = &tree.ShowTables{
				Open:   false,
				Full:   yyDollar[2].fullOptUnion(),
				DBName: yyDollar[4].str,
				Like:   yyDollar[5].comparisionExprUnion(),
				Where:  yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 545:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3571
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3583
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 547:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3587
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 548:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3593
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 549:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3605
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3619
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3625
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3632
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 553:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:3637
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:3641
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:3645
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 556:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3650
		{
			yyVAL.str = ""
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3654
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3660
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 563:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3673
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3677
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 565:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3683
		{
			yyLOCAL = &tree.ShowCreateTable{Name: yyDollar[4].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 566:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3688
		{
			yyLOCAL = &tree.ShowCreateView{Name: yyDollar[4].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 567:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3692
		{
			yyLOCAL = &tree.ShowCreateDatabase{IfNotExists: yyDollar[4].ifNotExistsUnion(), Name: yyDollar[5].str}
		}
		yyVAL.union = yyLOCAL
	case 568:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3696
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3702
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3708
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3712
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3718
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3724
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3728
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 575:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3732
		{
			yyLOCAL = tree.SetUnresolvedObjectName(3, [3]string{yyDollar[5].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3738
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3742
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 593:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3767
		{
			yyLOCAL = &tree.DropSequence{
				IfExists: yyDollar[3].boolValUnion(),
				Names:    yyDollar[4].tableNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 594:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3776
		{
			yyLOCAL = &tree.DropAccount{
				IfExists: yyDollar[3].boolValUnion(),
				Name:     yyDollar[4].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 595:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3785
		{
			yyLOCAL = &tree.DropUser{
				IfExists: yyDollar[3].boolValUnion(),
				Users:    yyDollar[4].usersUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:3794
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:3798
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:3804
		{
			yyLOCAL = &tree.User{
				Username: yyDollar[1].usernameRecordUnion().Username,
				Hostname: yyDollar[1].usernameRecordUnion().Hostname,
			}
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3813
		{
			yyLOCAL = &tree.DropRole{
				IfExists: yyDollar[3].boolValUnion(),
				Roles:    yyDollar[4].rolesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 600:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3822
		{
			yyLOCAL = &tree.DropIndex{
				Name:      tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				TableName: yyDollar[6].tableNameUnion(),
				IfExists:  yyDollar[3].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 601:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3832
		{
			yyLOCAL = &tree.DropTable{IfExists: yyDollar[4].boolValUnion(), Names: yyDollar[5].tableNamesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3836
		{
			yyLOCAL = &tree.DropTable{IfExists: yyDollar[3].boolValUnion(), Names: yyDollar[4].tableNamesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3842
		{
			yyLOCAL = &tree.DropConnector{IfExists: yyDollar[3].boolValUnion(), Names: yyDollar[4].tableNamesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3848
		{
			yyLOCAL = &tree.DropView{IfExists: yyDollar[3].boolValUnion(), Names: yyDollar[4].tableNamesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3854
		{
			yyLOCAL = &tree.DropDatabase{Name: tree.Identifier(yyDollar[4].cstrUnion().Compare()), IfExists: yyDollar[3].boolValUnion()}
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3858
		{
			yyLOCAL = &tree.DropDatabase{Name: tree.Identifier(yyDollar[4].cstrUnion().Compare()), IfExists: yyDollar[3].boolValUnion()}
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3864
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3870
		{
			yyLOCAL = &tree.DropFunction{
				Name: yyDollar[3].functionNameUnion(),
				Args: yyDollar[5].funcArgsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3879
		{
			yyLOCAL = &tree.DropProcedure{
				Name:     yyDollar[3].procNameUnion(),
				IfExists: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3886
		{
			yyLOCAL = &tree.DropProcedure{
				Name:     yyDollar[5].procNameUnion(),
				IfExists: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3897
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3902
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3909
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3925
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3938
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:3949
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:3953
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:3959
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:3964
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3971
		{
		}
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3973
		{
		}
	case 624:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3976
		{
		}
	case 629:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3985
		{
		}
	case 631:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3989
		{
		}
	case 633:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3994
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4003
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4010
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 636:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4016
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 637:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4024
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 638:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4031
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 639:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4038
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				return 1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4058
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4068
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 642:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4072
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 643:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4078
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4085
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 645:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4091
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4099
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4106
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4113
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				return 1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4132
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 650:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4136
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 651:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4140
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4145
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4149
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4153
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 655:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:4159
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4168
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 657:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4172
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4178
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 659:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4182
		{
			yyVAL.str = yyDollar[3].cstrUnion().Compare()
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4188
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 661:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4192
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 662:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4198
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 663:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4203
		{
		}
	case 665:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4207
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4214
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 668:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4218
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4225
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 671:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4230
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 672:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4234
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4240
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4244
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4250
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4254
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 677:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4259
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 678:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4263
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 679:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4276
		{
			yyLOCAL = &tree.Fields{
				Terminated: ",",
				EnclosedBy: '"',
			}
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4283
		{
			yyLOCAL = &tree.Fields{
				Terminated: yyDollar[4].str,
				EnclosedBy: '"',
			}
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4290
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: yyDollar[4].str,
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4308
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: ",",
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:4327
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: "\n",
			}
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:4333
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 685:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4340
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4344
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 687:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4357
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4361
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4366
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 690:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4370
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4377
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 692:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4382
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4389
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 695:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4395
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 696:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4399
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 697:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4403
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 698:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4407
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 699:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4411
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 700:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4415
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 701:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4420
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4424
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 703:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4430
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 704:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:4440
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				return 1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 705:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:4455
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 706:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:4459
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				return 1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4473
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4477
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4483
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4492
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4496
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4500
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4504
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4508
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:4514
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:4521
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:4530
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:4534
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:4540
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4548
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4552
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4557
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4561
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4567
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4571
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4575
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4580
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4584
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4590
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4596
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4600
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:4606
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:4611
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:4615
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:4619
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:4624
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:4628
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:4632
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:4637
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:4641
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 741:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4649
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4653
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4657
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4671
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4675
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4685
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4695
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4705
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4717
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4725
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4733
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4742
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4750
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4758
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4766
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4774
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4782
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4790
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4798
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4806
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4816
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4827
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4841
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4845
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4849
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 766:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4854
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4858
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4862
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:4871
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:4875
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:4880
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:4884
		{
			yyLOCAL = tree.GroupBy(yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:4889
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:4893
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:4899
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:4903
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:4909
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:4913
		{
			yyDollar[2].cstrUnion().SetConfig(0)
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:4918
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:4922
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:4927
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:4935
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:4941
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:4949
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:4957
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].joinTableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4967
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:4973
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:4982
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:4991
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5000
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5010
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 796:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5014
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 797:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5024
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 798:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5028
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 799:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5032
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 800:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5036
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 801:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5042
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5052
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5056
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5062
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5068
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5072
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5078
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5084
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 809:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5088
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 810:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5092
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 811:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5098
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5102
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5108
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5112
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5118
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5122
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5128
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5132
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5142
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5155
		{
			yyLOCAL = yyDollar[2].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:5161
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5167
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].cstrUnion().Compare()))
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:  tree.FuncName2ResolvableFunctionReference(name),
					Exprs: yyDollar[3].exprsUnion(),
					Type:  tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:5180
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5191
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5198
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5202
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:5208
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5218
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5222
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5226
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5231
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5235
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5239
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5243
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5248
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5252
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5256
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5260
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5264
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5269
		{
			yyVAL.str = ""
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5273
		{
			yyVAL.str = yyDollar[1].str
		}
	case 843:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5277
		{
			yyVAL.str = yyDollar[2].str
		}
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5283
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 846:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5289
		{
			yyLOCAL = tree.NewCStr("", yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5293
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5297
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5301
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5305
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5311
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 871:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5350
		{
			yyLOCAL = &tree.CreateExtension{
				Language: yyDollar[3].str,
				Name:     tree.Identifier(yyDollar[5].str),
				Filename: tree.Identifier(yyDollar[7].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 872:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5360
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5366
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 874:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5372
		{
			yyLOCAL = &tree.CreateProcedure{
				Name: yyDollar[3].procNameUnion(),
				Args: yyDollar[5].procArgsUnion(),
				Body: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:5382
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().ToLower()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 876:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:5387
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().ToLower()), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().ToLower()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 877:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5393
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5400
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 880:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5404
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:5410
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 882:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:5416
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 883:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5421
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5425
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5429
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5433
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 887:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5440
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				return 1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				return 1
			}

			yyLOCAL = &tree.CreateFunction{
				Replace:    yyDollar[2].sourceOptionalUnion(),
				Name:       yyDollar[4].functionNameUnion(),
				Args:       yyDollar[6].funcArgsUnion(),
				ReturnType: yyDollar[9].funcReturnUnion(),
				Language:   yyDollar[11].str,
				Import:     yyDollar[12].boolValUnion(),
				Body:       yyDollar[13].str,
				Handler:    yyDollar[14].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:5464
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 889:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:5469
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 890:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5475
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5482
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 893:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5486
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:5492
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5498
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 896:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5502
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 897:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5506
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5512
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:5518
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5524
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5528
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5534
		{
			yyVAL.str = ""
		}
	case 904:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5541
		{
			yyVAL.str = yyDollar[2].str
		}
	case 905:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5547
		{
			yyLOCAL = &tree.CreateView{
				Name:        yyDollar[5].tableNameUnion(),
				ColNames:    yyDollar[6].identifierListUnion(),
				AsSource:    yyDollar[8].selectUnion(),
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5556
		{
			yyLOCAL = &tree.CreateView{
				Replace:     yyDollar[2].sourceOptionalUnion(),
				Name:        yyDollar[5].tableNameUnion(),
				ColNames:    yyDollar[6].identifierListUnion(),
				AsSource:    yyDollar[8].selectUnion(),
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5568
		{
			yyLOCAL = &tree.CreateAccount{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         yyDollar[4].str,
				AuthOption:   yyDollar[5].accountAuthOptionUnion(),
				StatusOption: yyDollar[6].accountStatusUnion(),
				Comment:      yyDollar[7].accountCommentUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5580
		{
			yyVAL.str = yyDollar[1].str
		}
	case 909:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5584
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 910:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5590
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 911:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5594
		{
			yyVAL.str = "DEFINER = "
		}
	case 912:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5598
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 913:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5603
		{
			yyVAL.str = ""
		}
	case 914:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:5607
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 920:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5621
		{
			yyVAL.str = ""
		}
	case 923:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5629
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 924:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:5635
		{
			yyLOCAL = tree.AccountAuthOption{
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].str,
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5645
		{
			yyVAL.str = yyDollar[1].str
		}
	case 926:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5649
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 927:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:5655
		{
			yyLOCAL = tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 928:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:5662
		{
			yyLOCAL = tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 929:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:5668
		{
			yyLOCAL = tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 930:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:5676
		{
			yyLOCAL = tree.AccountStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 931:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:5682
		{
			yyLOCAL = tree.AccountStatus{
				Exist:  true,
				Option: tree.AccountStatusOpen,
			}
		}
		yyVAL.union = yyLOCAL
	case 932:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:5689
		{
			yyLOCAL = tree.AccountStatus{
				Exist:  true,
				Option: tree.AccountStatusSuspend,
			}
		}
		yyVAL.union = yyLOCAL
	case 933:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:5696
		{
			yyLOCAL = tree.AccountStatus{
				Exist:  true,
				Option: tree.AccountStatusRestricted,
			}
		}
		yyVAL.union = yyLOCAL
	case 934:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:5704
		{
			yyLOCAL = tree.AccountComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 935:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:5710
		{
			yyLOCAL = tree.AccountComment{
				Exist:   true,
				Comment: yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 936:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5719
		{
			yyLOCAL = &tree.CreateUser{
				IfNotExists:        yyDollar[3].ifNotExistsUnion(),
				Users:              yyDollar[4].usersUnion(),
				Role:               yyDollar[5].accountRoleUnion(),
				MiscOpt:            yyDollar[6].userMiscOptionUnion(),
				CommentOrAttribute: yyDollar[7].accountCommentOrAttributeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 937:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5731
		{
			yyLOCAL = &tree.CreatePublication{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Database:    tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				AccountsSet: yyDollar[7].accountsSetOptionUnion(),
				Comment:     yyDollar[8].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 938:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5743
		{
			yyLOCAL = &tree.CreateStage{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Url:         yyDollar[5].str,
				Credentials: yyDollar[6].stageCredentialsUnion(),
				Status:      yyDollar[7].stageStatusUnion(),
				Comment:     yyDollar[8].stageCommentUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 939:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:5755
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 940:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:5761
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 941:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:5768
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 942:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:5776
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 943:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:5782
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 944:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:5790
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 945:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:5796
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 946:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:5804
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 947:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:5810
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 948:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5819
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 949:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5823
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 950:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5828
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 951:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5832
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 952:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5839
		{
			yyVAL.str = yyDollar[3].str
		}
	case 953:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5844
		{
			yyVAL.str = ""
		}
	case 954:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5848
		{
			yyVAL.str = yyDollar[2].str
		}
	case 955:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5854
		{
			yyLOCAL = &tree.AlterStage{
				IfNotExists:       yyDollar[3].boolValUnion(),
				Name:              tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				UrlOption:         yyDollar[6].stageUrlUnion(),
				CredentialsOption: yyDollar[7].stageCredentialsUnion(),
				StatusOption:      yyDollar[8].stageStatusUnion(),
				Comment:           yyDollar[9].stageCommentUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 956:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5868
		{
			yyLOCAL = &tree.AlterPublication{
				IfExists:    yyDollar[3].boolValUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				AccountsSet: yyDollar[5].accountsSetOptionUnion(),
				Comment:     yyDollar[6].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 957:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:5878
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 958:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:5882
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 959:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:5888
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 960:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:5894
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 961:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:5900
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 962:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5909
		{
			yyLOCAL = &tree.DropPublication{
				IfExists: yyDollar[3].boolValUnion(),
				Name:     tree.Identifier(yyDollar[4].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 963:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5918
		{
			yyLOCAL = &tree.DropStage{
				IfNotExists: yyDollar[3].boolValUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5927
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 965:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:5932
		{
			yyLOCAL = tree.AccountCommentOrAttribute{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 966:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:5938
		{
			yyLOCAL = tree.AccountCommentOrAttribute{
				Exist:     true,
				IsComment: true,
				Str:       yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 967:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:5946
		{
			yyLOCAL = tree.AccountCommentOrAttribute{
				Exist:     true,
				IsComment: false,
				Str:       yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6052
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6056
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6062
		{
			yyLOCAL = &tree.User{
				Username:   yyDollar[1].usernameRecordUnion().Username,
				Hostname:   yyDollar[1].usernameRecordUnion().Hostname,
				AuthOption: yyDollar[2].userIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6072
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6076
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6082
		{
			yyLOCAL = &tree.User{
				Username:   yyDollar[1].usernameRecordUnion().Username,
				Hostname:   yyDollar[1].usernameRecordUnion().Hostname,
				AuthOption: yyDollar[2].userIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6092
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 975:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6096
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 976:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6100
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 977:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6105
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6109
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 979:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6115
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 980:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6122
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6128
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6137
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 984:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6144
		{
			yyLOCAL = &tree.CreateRole{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Roles:       yyDollar[4].rolesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6153
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 986:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6157
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 987:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:6163
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 988:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6177
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 989:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6181
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 990:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6185
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 991:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6190
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 992:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6194
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 993:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6198
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 994:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6202
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 995:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6208
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = &tree.IndexOption{IType: yyDollar[5].indexTypeUnion()}
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = &tree.IndexOption{IType: tree.INDEX_TYPE_INVALID}
			}
			yyLOCAL = &tree.CreateIndex{
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Table:       yyDollar[7].tableNameUnion(),
				IndexCat:    yyDollar[2].indexCategoryUnion(),
				KeyParts:    yyDollar[9].keyPartsUnion(),
				IndexOption: io,
				MiscOption:  nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 996:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6229
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 997:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6233
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 998:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6259
		{
			yyLOCAL = &tree.IndexOption{KeyBlockSize: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 999:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6263
		{
			yyLOCAL = &tree.IndexOption{AlgoParamList: int64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 1000:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6267
		{
			yyLOCAL = &tree.IndexOption{AlgoParamVectorOpType: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1001:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6271
		{
			yyLOCAL = &tree.IndexOption{Comment: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1002:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6275
		{
			yyLOCAL = &tree.IndexOption{ParserName: yyDollar[3].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6279
		{
			yyLOCAL = &tree.IndexOption{Visible: tree.VISIBLE_TYPE_VISIBLE}
		}
		yyVAL.union = yyLOCAL
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6283
		{
			yyLOCAL = &tree.IndexOption{Visible: tree.VISIBLE_TYPE_INVISIBLE}
		}
		yyVAL.union = yyLOCAL
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:6289
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:6293
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:6299
		{
			// Order is parsed but just ignored as MySQL dtree.
			yyLOCAL = &tree.KeyPart{ColName: yyDollar[1].unresolvedNameUnion(), Length: int(yyDollar[2].lengthOptUnion()), Direction: yyDollar[3].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:6304
		{
			yyLOCAL = &tree.KeyPart{Expr: yyDollar[2].exprUnion(), Direction: yyDollar[4].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6309
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6313
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6317
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6321
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6325
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6329
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6335
		{
			yyLOCAL = &tree.CreateDatabase{
				IfNotExists:        yyDollar[3].ifNotExistsUnion(),
				Name:               tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				SubscriptionOption: yyDollar[5].subscriptionOptionUnion(),
				CreateOptions:      yyDollar[6].createOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:6346
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:6350
		{
			yyLOCAL = &tree.SubscriptionOption{From: tree.Identifier(yyDollar[2].str), Publication: tree.Identifier(yyDollar[4].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6360
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6364
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6369
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6373
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6379
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6383
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:6389
		{
			yyLOCAL = &tree.CreateOptionCharset{IsDefault: yyDollar[1].defaultOptionalUnion(), Charset: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:6393
		{
			yyLOCAL = &tree.CreateOptionCollate{IsDefault: yyDollar[1].defaultOptionalUnion(), Collate: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:6397
		{
			yyLOCAL = &tree.CreateOptionEncryption{Encrypt: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6402
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6406
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6412
		{
			yyLOCAL = &tree.CreateConnector{
				TableName: yyDollar[4].tableNameUnion(),
				Options:   yyDollar[7].connectorOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6421
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6427
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6445
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6463
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6481
		{
			yyLOCAL = &tree.CreateSource{
				Replace:     yyDollar[2].sourceOptionalUnion(),
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				SourceName:  yyDollar[5].tableNameUnion(),
				Defs:        yyDollar[7].tableDefsUnion(),
				Options:     yyDollar[9].tableOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6492
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6496
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6502
		{
			yyLOCAL = &tree.CreateTable{
				Temporary:       yyDollar[2].boolValUnion(),
				IfNotExists:     yyDollar[4].ifNotExistsUnion(),
				Table:           *yyDollar[5].tableNameUnion(),
				Defs:            yyDollar[7].tableDefsUnion(),
				Options:         yyDollar[9].tableOptionsUnion(),
				PartitionOption: yyDollar[10].partitionOptionUnion(),
				ClusterByOption: yyDollar[11].clusterByOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6514
		{
			yyLOCAL = &tree.CreateTable{
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Table:       *yyDollar[5].tableNameUnion(),
				Defs:        yyDollar[7].tableDefsUnion(),
				Param:       yyDollar[9].loadParamUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6523
		{
			yyLOCAL = &tree.CreateTable{
				IsClusterTable:  true,
				IfNotExists:     yyDollar[4].ifNotExistsUnion(),
				Table:           *yyDollar[5].tableNameUnion(),
				Defs:            yyDollar[7].tableDefsUnion(),
				Options:         yyDollar[9].tableOptionsUnion(),
				PartitionOption: yyDollar[10].partitionOptionUnion(),
				ClusterByOption: yyDollar[11].clusterByOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6535
		{
			yyLOCAL = &tree.CreateTable{
				IsDynamicTable: true,
				IfNotExists:    yyDollar[4].ifNotExistsUnion(),
				Table:          *yyDollar[5].tableNameUnion(),
				AsSource:       yyDollar[7].selectUnion(),
				DTOptions:      yyDollar[8].tableOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6546
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1044:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6553
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1045:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6563
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1046:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6576
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1047:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6584
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1048:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6593
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1049:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6602
		{
			yyVAL.str = ""
		}
	case 1050:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:6606
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1051:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6612
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1052:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6616
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1053:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6621
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1054:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6625
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1055:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:6632
		{
			yyLOCAL = &tree.TailParameter{
				Fields:       yyDollar[1].fieldsUnion(),
				Lines:        yyDollar[2].linesUnion(),
				IgnoredLines: uint64(yyDollar[3].int64ValUnion()),
				ColumnList:   yyDollar[4].loadColumnsUnion(),
				Assignments:  yyDollar[5].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6643
		{
			yyLOCAL = &tree.CreateSequence{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        yyDollar[4].tableNameUnion(),
				Type:        yyDollar[5].columnTypeUnion(),
				IncrementBy: yyDollar[6].incrementByOptionUnion(),
				MinValue:    yyDollar[7].minValueOptionUnion(),
				MaxValue:    yyDollar[8].maxValueOptionUnion(),
				StartWith:   yyDollar[9].startWithOptionUnion(),
				Cycle:       yyDollar[10].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6656
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6670
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:6674
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:6678
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:6684
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:6688
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:6695
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:6702
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:6709
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6716
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6720
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6724
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:6728
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:6732
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:6739
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:6746
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:6750
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:6757
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:6764
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:6768
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:6774
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:6780
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:6784
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:6791
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:6798
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:6805
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6812
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6816
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6821
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6825
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6829
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:6834
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:6838
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = &tree.PartitionOption{
				PartBy:     *yyDollar[3].partitionByUnion(),
				SubPartBy:  yyDollar[5].partitionByUnion(),
				Partitions: yyDollar[6].partitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:6848
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:6852
		{
			yyLOCAL = &tree.ClusterByOption{
				ColumnList: []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()},
			}

		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:6859
		{
			yyLOCAL = &tree.ClusterByOption{
				ColumnList: yyDollar[4].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:6866
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:6870
		{
			yyLOCAL = &tree.PartitionBy{
				IsSubPartition: true,
				PType:          yyDollar[3].partitionByUnion(),
				Num:            uint64(yyDollar[4].int64ValUnion()),
			}
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:6879
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:6883
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:6889
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:6893
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:6899
		{
			yyLOCAL = &tree.Partition{
				Name:    tree.Identifier(yyDollar[2].cstrUnion().Compare()),
				Values:  yyDollar[3].valuesUnion(),
				Options: nil,
				Subs:    yyDollar[4].subPartitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:6908
		{
			yyLOCAL = &tree.Partition{
				Name:    tree.Identifier(yyDollar[2].cstrUnion().Compare()),
				Values:  yyDollar[3].valuesUnion(),
				Options: yyDollar[4].tableOptionsUnion(),
				Subs:    yyDollar[5].subPartitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:6918
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:6922
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:6928
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:6932
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1105:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:6938
		{
			yyLOCAL = &tree.SubPartition{
				Name:    tree.Identifier(yyDollar[2].cstrUnion().Compare()),
				Options: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:6945
		{
			yyLOCAL = &tree.SubPartition{
				Name:    tree.Identifier(yyDollar[2].cstrUnion().Compare()),
				Options: yyDollar[3].tableOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:6954
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:6958
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:6963
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:6967
		{
			expr := tree.NewMaxValue()
			yyLOCAL = &tree.ValuesLessThan{ValueList: tree.Exprs{expr}}
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:6972
		{
			yyLOCAL = &tree.ValuesLessThan{ValueList: yyDollar[5].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:6976
		{
			yyLOCAL = &tree.ValuesIn{ValueList: yyDollar[4].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:6981
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1114:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:6985
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				return 1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:6995
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:6999
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				return 1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7010
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.RangeType{
					Expr: yyDollar[3].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7018
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.RangeType{
					ColumnList: yyDollar[4].unresolveNamesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7026
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.ListType{
					Expr: yyDollar[3].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7034
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.ListType{
					ColumnList: yyDollar[4].unresolveNamesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7045
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.KeyType{
					Linear:    yyDollar[1].boolValUnion(),
					Algorithm: yyDollar[3].int64ValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7054
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.KeyType{
					Linear:     yyDollar[1].boolValUnion(),
					ColumnList: yyDollar[5].unresolveNamesUnion(),
					Algorithm:  yyDollar[3].int64ValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7064
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.HashType{
					Linear: yyDollar[1].boolValUnion(),
					Expr:   yyDollar[4].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7074
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7078
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7083
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7087
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:7093
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:7097
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:7103
		{
			yyLOCAL = &tree.ConnectorOption{Key: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Val: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1132:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:7107
		{
			yyLOCAL = &tree.ConnectorOption{Key: tree.Identifier(yyDollar[1].str), Val: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7112
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7116
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7122
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7126
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7132
		{
			yyLOCAL = &tree.CreateSourceWithOption{Key: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Val: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7136
		{
			yyLOCAL = &tree.CreateSourceWithOption{Key: tree.Identifier(yyDollar[1].str), Val: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1139:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7141
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1140:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7145
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7151
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7155
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7159
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7165
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7169
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7173
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7177
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7181
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7185
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7189
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7194
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7198
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7202
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7206
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1155:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7210
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7214
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7218
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7222
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7226
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7230
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7234
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7238
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7242
		{
			yyLOCAL = &tree.TableOptionPackKeys{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7246
		{
			yyLOCAL = &tree.TableOptionPackKeys{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7250
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7254
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7258
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7262
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7266
		{
			yyLOCAL = &tree.TableOptionStatsAutoRecalc{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7270
		{
			yyLOCAL = &tree.TableOptionStatsAutoRecalc{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7274
		{
			yyLOCAL = &tree.TableOptionStatsPersistent{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7278
		{
			yyLOCAL = &tree.TableOptionStatsPersistent{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7282
		{
			yyLOCAL = &tree.TableOptionStatsSamplePages{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7286
		{
			yyLOCAL = &tree.TableOptionStatsSamplePages{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7290
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7294
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7298
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7302
		{
			yyLOCAL = &tree.TableOptionProperties{Preperties: yyDollar[3].propertiesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:7308
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:7312
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:7318
		{
			yyLOCAL = tree.Property{Key: yyDollar[1].str, Value: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7324
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7328
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1184:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7334
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7338
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7342
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7346
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7350
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7354
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7368
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7372
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:7381
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:7386
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:7392
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:7399
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:7403
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7409
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7413
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1204:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7417
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1205:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7423
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7427
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7433
		{
			yyLOCAL = &tree.FullTextIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].str,
				Empty:       true,
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7442
		{
			yyLOCAL = &tree.FullTextIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].str,
				Empty:       true,
				IndexOption: yyDollar[9].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7451
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid the type of index")
					return 1
				}
			}
			yyLOCAL = &tree.Index{
				IfNotExists: yyDollar[2].ifNotExistsUnion(),
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				KeyType:     keyTyp,
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7482
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid type of index")
					return 1
				}
			}
			yyLOCAL = &tree.Index{
				IfNotExists: yyDollar[2].ifNotExistsUnion(),
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				KeyType:     keyTyp,
				IndexOption: yyDollar[9].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7515
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1212:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7529
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1213:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7535
		{
			yyLOCAL = &tree.PrimaryKeyIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1214:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7544
		{
			yyLOCAL = &tree.PrimaryKeyIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[9].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7553
		{
			yyLOCAL = &tree.UniqueIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7562
		{
			yyLOCAL = &tree.UniqueIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[9].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7571
		{
			yyLOCAL = &tree.ForeignKey{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				KeyParts:    yyDollar[6].keyPartsUnion(),
				Name:        yyDollar[4].str,
				Refer:       yyDollar[8].attributeReferenceUnion(),
				Empty:       true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7581
		{
			yyLOCAL = &tree.CheckIndex{
				Expr:     yyDollar[3].exprUnion(),
				Enforced: yyDollar[5].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7589
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1221:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7595
		{
			yyVAL.str = ""
		}
	case 1222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7599
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1225:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7609
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7615
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7621
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1237:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7641
		{
			yyVAL.str = ""
		}
	case 1238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7645
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1239:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:7651
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1240:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:7657
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1241:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:7661
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:7665
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1243:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7671
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1244:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7675
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1245:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7679
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1246:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7683
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1247:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:7689
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1248:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:7693
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1249:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:7697
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1250:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:7702
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1251:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:7706
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1252:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:7712
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1253:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:7716
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1254:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7722
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1255:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7726
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1256:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7730
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1257:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7734
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1258:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7738
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1259:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7742
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1260:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7747
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1261:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7751
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7755
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1263:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7759
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1264:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7763
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1265:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7767
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1266:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7771
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7775
		{
			yyLOCAL = tree.NewAttributeCheck(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1268:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7779
		{
			yyLOCAL = tree.NewAttributeCheck(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7783
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[3].str))
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1270:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7796
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7800
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7804
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7808
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7812
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7816
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7822
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7826
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7831
		{
			yyVAL.str = ""
		}
	case 1279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7835
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7841
		{
			yyVAL.str = ""
		}
	case 1281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7845
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1282:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:7851
		{
			yyLOCAL = &tree.AttributeReference{
				TableName: yyDollar[2].tableNameUnion(),
				KeyParts:  yyDollar[3].keyPartsUnion(),
				Match:     yyDollar[4].matchTypeUnion(),
				OnDelete:  yyDollar[5].referenceOnRecordUnion().OnDelete,
				OnUpdate:  yyDollar[5].referenceOnRecordUnion().OnUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 1283:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:7863
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1284:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:7870
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1285:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:7877
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1286:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:7884
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1287:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:7891
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1288:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:7900
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1289:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:7906
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1290:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:7912
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1291:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:7916
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1292:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:7920
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1293:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:7924
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1294:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:7928
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1295:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:7933
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1297:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:7940
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1298:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:7944
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1299:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:7948
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1300:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7953
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1301:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7957
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1302:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7962
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1303:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7966
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1310:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:7982
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1311:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:7988
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1312:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:7992
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1313:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:7996
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1314:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8000
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1315:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8004
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1316:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8008
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1317:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8012
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1318:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8016
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1319:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8020
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1320:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8024
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1321:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8028
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1322:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8032
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1323:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8036
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1324:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8042
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8046
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1326:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8050
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1327:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8054
		{
			yyLOCAL = tree.NewParenExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1328:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8058
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1329:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8062
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1330:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8066
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1331:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8070
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1332:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8074
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1333:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8078
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1334:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8082
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1335:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8086
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1336:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8091
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1337:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8099
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1338:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8103
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1339:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8107
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1340:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8111
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1341:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8115
		{
			name := tree.SetUnresolvedName("convert")
			es := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1342:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8124
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1343:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8128
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1344:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8132
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1345:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8136
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1346:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8140
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1347:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8144
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1348:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8150
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1349:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8158
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1350:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8166
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1351:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8176
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1352:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8186
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1353:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8195
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1354:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8205
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1355:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8215
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1356:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8224
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1357:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8234
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1358:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8238
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1359:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8243
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1360:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8247
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1361:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:8253
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1362:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:8257
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1363:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:8263
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8272
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1365:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8284
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1366:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8301
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1368:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8318
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8331
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1370:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8344
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1371:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8356
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1372:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8370
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1373:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8385
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1374:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8400
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1375:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8417
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1376:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8432
		{
		}
	case 1380:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8439
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1381:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8443
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1382:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8447
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1383:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8453
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1384:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8457
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1385:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8461
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1386:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8465
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1387:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:8471
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1388:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:8475
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1389:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:8479
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1390:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:8485
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1391:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:8493
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1392:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:8503
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1393:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:8507
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1394:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:8514
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1395:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:8519
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1396:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:8523
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1397:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8528
		{
			yyVAL.str = ","
		}
	case 1398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8532
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1399:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8537
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8541
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1401:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:8546
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1403:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:8553
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1404:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8579
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1405:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8590
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1406:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8601
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1407:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8611
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1408:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8621
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1409:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8631
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1410:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8640
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1411:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8649
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1412:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8659
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1413:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8669
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1414:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8679
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1415:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8689
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1416:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8699
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1417:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8709
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1418:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8719
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1419:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8729
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1420:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8739
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1421:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8749
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1422:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8759
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1423:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8769
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1427:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8788
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1428:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8796
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1429:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8804
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1430:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8812
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1431:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8820
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1432:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8830
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8838
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1434:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8847
		{
			name := tree.SetUnresolvedName("nextval")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1435:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8855
		{
			name := tree.SetUnresolvedName("setval")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8863
		{
			name := tree.SetUnresolvedName("currval")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1437:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8871
		{
			name := tree.SetUnresolvedName("lastval")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1438:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8879
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1439:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8890
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1440:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8900
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8912
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1442:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8923
		{
			column := tree.SetUnresolvedName(strings.ToLower(yyDollar[3].str))
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8945
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1478:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8981
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1479:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8993
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1480:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9005
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1481:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9016
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1482:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9024
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 1483:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9031
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 1484:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9038
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1485:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9050
		{
			name := tree.SetUnresolvedName("binary")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1486:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9058
		{
			name := tree.SetUnresolvedName("binary")
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1487:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9068
		{
			name := tree.SetUnresolvedName("binary")
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1488:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9078
		{
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1489:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9086
		{
			cn := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1490:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9097
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("date")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1491:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9106
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("time")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1492:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9115
		{
			name := tree.SetUnresolvedName("insert")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1493:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9123
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.SetUnresolvedName("mod")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1494:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9133
		{
			name := tree.SetUnresolvedName("password")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1495:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9141
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("timestamp")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1496:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9151
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1497:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9155
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1498:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9161
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1499:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9165
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				return 1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(ival), str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1506:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9184
		{
		}
	case 1507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9186
		{
		}
	case 1541:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9227
		{
			name := tree.SetUnresolvedName("interval")
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1542:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:9238
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1543:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:9242
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1544:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:9246
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1545:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:9252
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1546:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9257
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1547:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9261
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1548:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9267
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1549:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9271
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1550:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9277
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1551:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9281
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1552:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9288
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1553:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9292
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1554:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9296
		{
			name := tree.SetUnresolvedName(strings.ToLower("concat"))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1555:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9304
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1556:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9308
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1557:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9312
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1558:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9317
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1559:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9321
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1560:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9327
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1561:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9331
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1562:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9335
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1563:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9339
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1564:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9343
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1565:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9347
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1566:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9351
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1567:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9355
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1568:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9359
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1569:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9363
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1571:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9371
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1572:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9375
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1573:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9379
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1574:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9383
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1575:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9387
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1576:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9391
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1577:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9395
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1578:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9399
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1579:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9403
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1580:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9407
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1582:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9413
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1583:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9417
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1584:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9423
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1585:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9427
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1586:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9434
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1587:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9438
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1588:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9442
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1589:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9448
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1590:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9452
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1591:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9456
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1592:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9460
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1593:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9464
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1594:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9468
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1595:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9472
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1596:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9478
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1597:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9482
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1598:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9486
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1599:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9490
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1600:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9496
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1601:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9509
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1602:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9514
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1603:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9520
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1604:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9524
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1605:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9537
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1606:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9542
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1607:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9546
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1608:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9550
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1609:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9554
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1610:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9558
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1611:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9565
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1612:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9569
		{
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_int64)
			case string:
				yyLOCAL = tree.NewNumValWithType(constant.MakeString(v), v, false, tree.P_bit)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1613:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9583
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1614:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9587
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1615:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9594
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1619:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9605
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1620:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9610
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1621:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9616
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1622:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9628
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1623:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9640
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1624:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9652
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1625:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9665
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1626:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9678
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1627:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9691
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1628:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9704
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1629:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9717
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1630:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9730
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1631:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9743
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1632:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9756
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1633:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9769
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1634:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9782
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1635:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9797
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1636:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9824
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1637:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9866
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				return 1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1638:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9902
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				return 1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1639:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9938
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1640:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9955
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1641:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9967
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1642:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9987
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1643:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10007
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1644:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10027
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1645:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10043
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1646:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10056
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1647:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10069
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1648:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10082
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1649:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10095
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1650:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10107
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1651:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10119
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1652:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10131
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1653:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10143
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1654:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10155
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1655:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10167
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1656:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10179
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1657:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10191
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1658:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10203
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1659:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10216
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1660:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10229
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1661:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10242
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1662:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10255
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1663:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:10270
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1664:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:10278
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1665:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:10287
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1666:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10297
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1667:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:10320
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1668:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:10325
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1669:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10331
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1671:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10338
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1672:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10342
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1673:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10347
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1674:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10351
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1675:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10357
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1676:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10363
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1677:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10370
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1678:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10377
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1679:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10386
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1680:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10393
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1681:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10400
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1682:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:10409
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1683:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:10413
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1684:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:10417
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1685:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10423
		{
		}
	case 1686:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:10425
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1690:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10435
		{
			yyVAL.str = ""
		}
	case 1691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10439
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
